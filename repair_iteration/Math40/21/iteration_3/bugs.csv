bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
2	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
3	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  0)||(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
5	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)||(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  <  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	4	replace
7	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	4	replace
8	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
10	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
11	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
12	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
13	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
14	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
15	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
16	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  ')'  expected	31	None	replace
17	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
18	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	50	4	replace
20	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	50	4	replace
21	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  1)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  1)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  1)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
22	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xTol)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xTol)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	147	5	replace
24	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xTol)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	147	5	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xTol)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	147	5	replace
26	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xTol)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	147	5	replace
27	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  1)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xTol)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
28	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	131	4	replace
30	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	131	4	replace
31	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  1)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  1)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  1)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	131	4	replace
33	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	131	4	replace
34	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
35	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  >=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
36	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >>  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >>  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  >>  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
37	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
38	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xB,  yB);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xB,  yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xB,  yB);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xA,    yB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
39	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  yB);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  yB);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xA,    yB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
40	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  yB);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  yB);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xA,    yB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
41	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  agingB);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  agingB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  agingB);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
42	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(xTol,  agingB);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(xTol,  agingB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(xTol,  agingB);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
43	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  absYB);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  absYB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  absYB);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
44	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  ages);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  ages);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  ages);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
45	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
46	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
47	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >>  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
48	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
49	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
50	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
51	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
52	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
53	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getrelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
54	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getrelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
55	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	126	None	add
56	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	126	None	add
57	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  >>  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  >>  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xB)  >>  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	126	None	add
58	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	126	None	add
59	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y,  absYB);  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y,  absYB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y,  absYB);	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(y);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
60	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
61	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  ';'  expected	23	None	replace
62	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
63	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
64	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
65	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
66	[BUG]  [BUGGY]  final  double  xxA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xxA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xxA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xA    =    getAbsoluteAccuracy()    +    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
67	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    +    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
68	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
69	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
70	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	58	4	replace
72	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	58	4	replace
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	59	3	replace
74	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	59	3	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	59	5	replace
76	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	59	5	replace
77	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  1)||(FastMath.max(yA,  yB)  <  getRelativeAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  1)||(FastMath.max(yA,  yB)  <  getRelativeAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  1)||(FastMath.max(yA,  yB)  <  getRelativeAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
78	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
79	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
80	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                          TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));	  double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
81	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yTol));  [CE]  class,  interface,  or  enum  expected  [FE]                            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yTol));	  double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
82	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
83	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    fastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
84	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
85	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    If(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	132	None	add
86	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
87	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                          TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
88	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
89	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
90	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
91	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  FastMath.abs(xA));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(absYA,    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
92	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(absYA,    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
93	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB,  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB,  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB,  FastMath.abs(xA));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(absYA,    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
94	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(absY,  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(absY,  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(absY,  FastMath.abs(xA));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(absYA,    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
95	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
96	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
97	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    If(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	79	None	add
98	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
99	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
100	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >>  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
101	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
102	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
103	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
104	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
105	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
106	[BUG]  [BUGGY]  if  (((xTol  -  absYB)  <  =  xA)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if  (((xTol  -  absYB)  <  =  xA)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if  (((xTol  -  absYB)  <  =  xA)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xA)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
107	[BUG]  [BUGGY]  if  (((xTol  -  absYB)  <  =  xA)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if  (((xTol  -  absYB)  <  =  xA)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if  (((xTol  -  absYB)  <  =  xA)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xA)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	55	5	replace
109	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	55	5	replace
110	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
111	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	92	None	replace
112	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	92	None	replace
113	[BUG]  [BUGGY]  if(xTol  <  =  0  ||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(xTol  <  =  0  ||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(xTol  <  =  0  ||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
114	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
115	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
116	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    If(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	123	None	add
117	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	45	None	replace
118	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
119	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	167	None	add
120	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >>  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >>  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  >>  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	167	None	add
121	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	167	None	add
122	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	167	None	add
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	4	replace
124	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	4	replace
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	4	replace
126	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	4	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	4	replace
128	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	4	replace
129	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	4	replace
130	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	4	replace
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	3	replace
132	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	3	replace
133	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	139	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	4	replace
135	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	4	replace
136	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	139	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	133	4	replace
138	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	133	4	replace
139	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	133	None	replace
140	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	133	None	replace
141	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
142	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
143	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
144	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    +    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
145	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xB,  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xB,  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xB,  FastMath.abs(xA));	  double    xA    =    getAbsoluteAccuracy()    +    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
146	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    +    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
147	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  FastMath.abs(yB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
148	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  FastMath.abs(yB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
149	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yA,  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yA,  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yA,  FastMath.abs(yB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
150	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
151	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
152	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
153	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
154	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(yB,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(yB,  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(yB,  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(yB,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
155	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yB,  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yB,  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yB,  FastMath.abs(xA));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(yB,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
156	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(y,  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(y,  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(y,  FastMath.abs(xA));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(yB,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
157	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	48	4	replace
158	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	48	4	replace
159	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  1)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  1)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  1)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
160	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	48	4	replace
162	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	48	4	replace
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	90	4	replace
164	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	90	4	replace
165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	90	4	replace
166	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	90	4	replace
167	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(absY,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
168	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  1)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  1)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  1)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(absY,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
169	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  absYB)&&(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  absYB)&&(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  absYB)&&(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(absY,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
170	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(absY,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	29	None	replace
171	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  int    xA    =    getAbsoluteAccuracy()    +    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
172	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  agingB);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  agingB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  agingB);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
173	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xA,  agingB);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xA,  agingB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xA,  agingB);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
174	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(xTol,  agingB);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(xTol,  agingB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(xTol,  agingB);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  >=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)  >=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	46	4	replace
176	[BUG]  [BUGGY]  if(((xTol  -  absYB)  >=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  >=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  >=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	46	4	replace
177	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	46	4	replace
178	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	46	4	replace
179	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
180	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
181	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
182	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	114	None	add
183	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	114	None	add
184	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	114	None	add
185	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	114	None	add
186	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.abs(xTol);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	113	4	replace
188	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	113	4	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	113	4	replace
190	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	113	4	replace
191	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	113	4	replace
192	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	113	4	replace
193	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
194	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
195	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
196	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
197	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
198	[BUG]  [BUGGY]  if(((xTol  -  absYB)  <  =  xB)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  <  =  xB)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  <  =  xB)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
199	[BUG]  [BUGGY]  if  (((xTol  -  absYB)  <  =  xB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if  (((xTol  -  absYB)  <  =  xB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if  (((xTol  -  absYB)  <  =  xB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
200	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  1)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  1)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  1)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
201	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
202	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
203	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
204	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
205	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xA));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
206	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xTol));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xTol));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
207	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
208	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	16	7	add
209	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	16	7	add
210	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMath.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMath.  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMath.	  	non-compiled	[CE]  <identifier>  expected	16	None	add
211	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastM  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastM	  	non-compiled	[CE]  ';'  expected	16	None	add
212	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	16	7	add
213	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	16	7	add
214	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMa  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMa  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMa	  	non-compiled	[CE]  ';'  expected	16	None	add
215	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
216	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
217	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >>  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
218	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
219	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	32	7	add
220	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	32	7	add
221	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	32	None	add
222	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  int  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  int  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    int  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	32	None	add
223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	32	7	add
224	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	32	7	add
225	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
226	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
227	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
228	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
229	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	3	replace
230	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	3	replace
231	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	5	replace
232	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	5	replace
233	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	3	replace
234	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	3	replace
235	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	4	replace
236	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	4	replace
237	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	89	5	replace
238	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	89	5	replace
239	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(yA,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(yA,  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(yA,  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(yA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
240	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(y,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(y,  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(y,  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(yA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
241	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	106	5	replace
243	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	106	5	replace
244	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	47	None	replace
245	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
246	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	4	replace
248	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	4	replace
249	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	5	replace
250	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	5	replace
251	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	4	replace
252	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	4	replace
253	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	5	replace
254	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	5	replace
255	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	169	None	add
256	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    If(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	169	None	add
257	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  0);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  0);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  0);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
258	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB,  0);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB,  0);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB,  0);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
259	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  1);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  1);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
260	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
261	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
262	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
263	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
264	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
265	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
266	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
267	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
268	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xB)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
269	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
270	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
271	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
272	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
273	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                          TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
274	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	143	5	replace
275	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	143	5	replace
276	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  1)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
277	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.abs(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.abs(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.abs(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
278	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  1)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
279	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  FastMath.abs(xB));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
280	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xA,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xA,  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xA,  FastMath.abs(xB));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
281	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB,  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB,  FastMath.abs(xTol));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB,  FastMath.abs(xTol));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	78	5	replace
283	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	78	5	replace
284	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	78	5	replace
285	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	78	5	replace
286	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	78	5	replace
287	[BUG]  [BUGGY]  if(((xTol  -  absYB)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	78	5	replace
288	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	28	4	replace
289	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	28	4	replace
290	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
291	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
292	[BUG]  [BUGGY]  if(((yA  -  xB)  <  =  0)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xB)  <  =  0)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((yA  -  xB)  <  =  0)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
293	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xTol));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xTol));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	140	None	replace
294	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
295	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	135	5	replace
296	[BUG]  [BUGGY]  if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	135	5	replace
297	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	135	4	replace
298	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	135	4	replace
299	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	135	None	replace
300	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	135	3	replace
301	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	135	3	replace
302	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  agingB);  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  agingB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  agingB);	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
303	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
304	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
305	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  double    yA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
306	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                          TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  double    yA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
307	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yTol));  [CE]  class,  interface,  or  enum  expected  [FE]                            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yTol));	  double    yA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  >=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	49	4	replace
309	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	49	4	replace
310	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	49	4	replace
311	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	49	4	replace
312	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	5	replace
313	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	5	replace
314	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	5	replace
315	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	5	replace
316	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	5	replace
317	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	5	replace
318	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
319	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
320	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
321	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	127	None	replace
322	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
323	[BUG]  [BUGGY]  if(((xTol  -  absYB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
324	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
325	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
326	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
327	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
328	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	5	5	replace
329	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	5	5	replace
330	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  1)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
331	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	14	7	add
332	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	14	7	add
333	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	14	7	add
334	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	14	7	add
335	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.	  	non-compiled	[CE]  <identifier>  expected	14	None	add
336	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB));  [CE]  no  suitable  method  found  for  max(double)  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB));	  	non-compiled	[CE]  no  suitable  method  found  for  max(double)	14	None	add
337	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	14	7	add
338	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	14	7	add
339	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
340	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  ')'  expected	33	None	replace
341	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
342	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	97	3	replace
343	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	97	3	replace
344	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	97	5	replace
345	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	97	5	replace
346	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	97	3	replace
347	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	97	3	replace
348	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	97	4	replace
349	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	97	4	replace
350	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	110	None	replace
351	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
352	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    +    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
353	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(yA    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
354	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(yA  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(yA  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(yA  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(yA    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
355	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(yA  <  =  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(yA  <  =  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(yA  <  =  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(yA    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
356	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(yA  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                          TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(yA  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(yA  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(yA    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
357	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
358	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
359	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  >=  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	168	4	replace
360	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  >=  0)&&(FastMath.max(xTol,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	168	4	replace
361	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	168	None	replace
362	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xB)  >=  0)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((yA  -  xB)  >=  0)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	168	4	replace
363	[BUG]  [BUGGY]  if(((yA  -  xB)  >=  0)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xB)  >=  0)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((yA  -  xB)  >=  0)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	168	4	replace
364	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  Double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	115	4	replace
366	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	115	4	replace
367	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
368	[BUG]  [BUGGY]  if((  xTol  -  xB)  <  =  0)||  (FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  <  =  0)||  (FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  <  =  0)||  (FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
369	[BUG]  [BUGGY]  if((  xTol  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
370	[BUG]  [BUGGY]  if(xTol  <  =  0  ||((  xA  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(xTol  <  =  0  ||((  xA  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(xTol  <  =  0  ||((  xA  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
371	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
372	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
373	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
374	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
375	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA));  [CE]  no  suitable  method  found  for  min(double)  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA));	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	20	None	add
376	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
377	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
378	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB));  [CE]  no  suitable  method  found  for  min(double)  [FE]            AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB));	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	20	None	add
379	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	130	4	replace
380	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	130	4	replace
381	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
382	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
383	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	122	5	replace
384	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	122	5	replace
385	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  yB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  yB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	122	5	replace
386	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  yB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  yB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  yB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	122	5	replace
387	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));	  double    yA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
388	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	99	4	replace
389	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	99	4	replace
390	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	99	4	replace
391	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	99	4	replace
392	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	109	7	add
393	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	109	7	add
394	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	109	7	add
395	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	109	7	add
396	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB));  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB));	  	non-compiled	[CE]  no  suitable  method  found  for  max(double)	109	None	add
397	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA));  [CE]  no  suitable  method  found  for  max(double)  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA));	  	non-compiled	[CE]  no  suitable  method  found  for  max(double)	109	None	add
398	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.	  	non-compiled	[CE]  <identifier>  expected	109	None	add
399	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	30	7	add
400	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	30	7	add
401	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	30	7	add
402	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	30	7	add
403	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	30	7	add
404	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	30	7	add
405	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	30	None	add
406	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x));  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x));	  	non-compiled	[CE]  ';'  expected	30	None	add
407	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	4	replace
408	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	4	replace
409	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	3	replace
410	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	3	replace
411	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	3	replace
412	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	3	replace
413	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	4	replace
414	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	4	replace
415	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
416	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)||(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)||(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)||(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
417	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
418	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	170	4	replace
419	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	170	4	replace
420	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
421	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	170	4	replace
422	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	170	4	replace
423	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
424	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yTol),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yTol),  FastMath.abs(yB));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
425	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
426	[BUG]  [BUGGY]  if(((xTol  -  absYB)  <  =  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  <  =  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  <  =  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
427	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
428	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
429	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	18	7	add
430	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	18	7	add
431	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	18	7	add
432	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	18	7	add
433	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.	  	non-compiled	[CE]  <identifier>  expected	18	None	add
434	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	18	None	add
435	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastM  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastM	  	non-compiled	[CE]  ';'  expected	18	None	add
436	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	91	None	replace
437	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
438	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
439	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
440	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  1)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  1)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  1)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
441	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
442	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
443	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
444	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
445	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
446	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
447	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
448	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
449	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  >=  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	4	replace
450	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  >=  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	4	replace
451	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  ==  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  ==  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	4	replace
452	[BUG]  [BUGGY]  if(((xA  -  xB)  ==  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  ==  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  ==  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	4	replace
453	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  >=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	93	4	replace
454	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	93	4	replace
455	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	93	5	replace
456	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	93	5	replace
457	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	19	None	replace
458	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yA));	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
459	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
460	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(xB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
461	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
462	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
463	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                          TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
464	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
465	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
466	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
467	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
468	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
469	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
470	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	17	None	replace
471	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	17	None	replace
472	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	17	None	replace
473	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
474	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	27	4	replace
475	[BUG]  [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  >=  xTol)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	27	4	replace
476	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  1)&&  (FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  1)&&  (FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  1)&&  (FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
477	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.abs(xB,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.abs(xB,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.abs(xB,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
478	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	22	7	add
479	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	22	7	add
480	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	compilable	  [FE]  AssertionError  	22	7	add
481	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	compilable	  [FE]  AssertionError  	22	7	add
482	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	22	7	add
483	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	22	7	add
484	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.	  	non-compiled	[CE]  <identifier>  expected	22	None	add
485	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));	  	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	22	None	add
486	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
487	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
488	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
489	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
490	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >>  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
491	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
492	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
493	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
494	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(y));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(y));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(y));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
495	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
496	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
497	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
498	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
499	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
500	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                          TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
501	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(y));  [CE]  class,  interface,  or  enum  expected  [FE]                            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(y));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(y));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
502	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  yB);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  yB);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
503	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
504	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
505	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  Double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
506	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xTol));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
507	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xTol));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
508	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                          TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xTol));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
509	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(y),  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(y),  FastMath.abs(xTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(y),  FastMath.abs(xTol));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
510	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	149	5	replace
511	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	149	5	replace
512	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	149	5	replace
513	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	149	5	replace
514	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.abs(yA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.abs(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.abs(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
515	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
516	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
517	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  >>  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
518	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
519	[BUG]  [BUGGY]  if((  xTol  -  absYB)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  absYB)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  absYB)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
520	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	5	replace
521	[BUG]  [BUGGY]  if(((xTol  -  absYB)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	80	5	replace
522	[BUG]  [BUGGY]  if(allowed)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(allowed)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(allowed)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  ';'  expected	23	None	replace
523	[BUG]  [BUGGY]  if(allowed)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(allowed)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(allowed)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  ';'  expected	23	None	replace
524	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	4	None	replace
525	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	4	None	replace
526	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xB);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
527	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
528	[BUG]  [BUGGY]  if((  xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xTol)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
529	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xTol)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	147	5	replace
530	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xTol)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	147	5	replace
531	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
532	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
533	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	3	replace
534	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	3	replace
535	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  0)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
536	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
537	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  >=  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  >=  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  >=  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
538	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMath  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMath  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMath	  	non-compiled	[CE]  ';'  expected	16	None	add
539	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
540	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
541	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
542	[BUG]  [BUGGY]  if((  xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
543	[BUG]  [BUGGY]  if((  xTol  -  xB)  ==  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  ==  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  ==  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
544	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	5	replace
545	[BUG]  [BUGGY]  if(((xTol  -  absYB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	5	replace
546	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
547	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	45	None	replace
548	[BUG]  [BUGGY]  if(((xTol  -  absYB)  <  =  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  <  =  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  <  =  xB)&&(FastMath.max(xA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
549	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    If(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
550	[BUG]  [BUGGY]  if((  xTol  -  xA)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xA)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xA)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
551	[BUG]  [BUGGY]  if((  xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xA)  <  =  xB)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
552	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
553	[BUG]  [BUGGY]  if((  yA  -  xB)  <  =  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)  <  =  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)  <  =  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
554	[BUG]  [BUGGY]  if((  yA  -  xB)!=  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)!=  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)!=  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
555	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	92	None	replace
556	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	92	None	replace
557	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	92	None	replace
558	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	55	3	replace
559	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	55	3	replace
560	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    If(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	103	None	add
561	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	133	3	replace
562	[BUG]  [BUGGY]  if(((xA  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	133	3	replace
563	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
564	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(yA,  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(yA,  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(yA,  FastMath.abs(xA));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(absYA,    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
565	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  >=  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  >=  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  >=  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	114	None	add
566	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    If(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	114	None	add
567	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
568	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yA,  yB);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yA,  yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yA,  yB);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xA,    yB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
569	[BUG]  [BUGGY]  if((  xTol  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
570	[BUG]  [BUGGY]  if((  xTol  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  ==  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
571	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	90	3	replace
572	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	90	3	replace
573	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
574	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yY),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yY),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yY),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
575	[BUG]  [BUGGY]  if(((xTol  -  absYB)  <  =  0)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  <  =  0)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  <  =  0)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
576	[BUG]  [BUGGY]  if(((xTol  -  absYB)  <  =  yB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  <  =  yB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  <  =  yB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
577	[BUG]  [BUGGY]  Double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
578	[BUG]  [BUGGY]  if((  xA  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xA  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xA  -  xB)!=  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
579	[BUG]  [BUGGY]  if((  yA  -  xB)  <  =  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)  <  =  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)  <  =  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
580	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xTol)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
581	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(yA,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(yA,  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(yA,  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(yB,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
582	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(y));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(y));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(y));	  double    yA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
583	[BUG]  [BUGGY]  if((  xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
584	[BUG]  [BUGGY]  if((  xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
585	[BUG]  [BUGGY]  if((  yA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
586	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xB)!=  yB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((yA  -  xB)!=  yB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	115	3	replace
587	[BUG]  [BUGGY]  if(((yA  -  xB)!=  yB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xB)!=  yB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((yA  -  xB)!=  yB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	115	3	replace
588	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	109	9	add
589	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	109	9	add
590	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	109	7	add
591	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	109	7	add
592	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
593	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xTol));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
594	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
595	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	130	4	replace
596	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	130	4	replace
597	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	130	4	replace
598	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	130	4	replace
599	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
600	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	5	replace
601	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	5	replace
602	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	5	replace
603	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	5	replace
604	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	4	replace
605	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	152	4	replace
606	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yY),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yY),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yY),  FastMath.abs(yA));	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
607	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	18	9	add
608	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	18	9	add
609	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM	  	non-compiled	[CE]  ';'  expected	18	None	add
610	[BUG]  [BUGGY]  if((  xA  -  xB)!=  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xA  -  xB)!=  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xA  -  xB)!=  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
611	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	151	4	replace
612	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	151	4	replace
613	[BUG]  [BUGGY]  if((  xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
614	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absyB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absyB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absyB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
615	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	93	3	replace
616	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	93	3	replace
617	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	93	5	replace
618	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	93	5	replace
619	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	106	4	replace
620	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	106	4	replace
621	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	106	4	replace
622	[BUG]  [BUGGY]  if(((xTol  -  absYB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	106	4	replace
623	[BUG]  [BUGGY]  if((  xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
624	[BUG]  [BUGGY]  if((  xTol  -  xB)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
625	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	5	replace
626	[BUG]  [BUGGY]  if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)!=  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	5	replace
627	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	3	replace
628	[BUG]  [BUGGY]  if(((xTol  -  absYB)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	3	replace
629	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	21	None	replace
630	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	21	None	replace
631	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(yB));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
632	[BUG]  [BUGGY]  if((  xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)!=  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
633	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getrelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
634	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(agingA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(agingA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(agingA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(yA    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
635	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(yA    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
636	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(yA    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
637	[BUG]  [BUGGY]  if((  xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getRelativeAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getRelativeAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getRelativeAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
638	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
639	[BUG]  [BUGGY]  Double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
640	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	58	5	replace
641	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	58	5	replace
642	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	58	3	replace
643	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	58	3	replace
644	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absyB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absyB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absyB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  illegal  start  of  expression	126	None	add
645	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    If(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	128	None	add
646	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	14	9	add
647	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	14	9	add
648	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  Double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
649	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  Double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
650	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	47	None	replace
651	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	47	None	replace
652	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	5	replace
653	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	5	replace
654	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	4	replace
655	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xTol)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	75	4	replace
656	[BUG]  [BUGGY]  if((  xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  ==  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
657	[BUG]  [BUGGY]  if((  yA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
658	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	149	5	replace
659	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	149	5	replace
660	[BUG]  [BUGGY]  if((  xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xA)!=  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    yB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
661	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	compilable	  [FE]  AssertionError  	22	9	add
662	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	compilable	  [FE]  AssertionError  	22	9	add
663	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
664	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
665	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
666	[BUG]  [BUGGY]  if((  xTol  -  xB)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
667	[BUG]  [BUGGY]  if((  xTol  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
668	[BUG]  [BUGGY]  if((  xA  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xA  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xA  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
669	[BUG]  [BUGGY]  if((  xTol  -  absYB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  absYB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  absYB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
670	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
671	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
672	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	3	replace
673	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xTol)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	3	replace
674	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
675	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xA)&&(FastMath.max(absYB,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
676	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	60	4	replace
677	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	60	4	replace
678	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.abs(yB,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.abs(yB,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xTol)&&(FastMath.abs(yB,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	129	None	replace
679	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	129	None	replace
680	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	129	None	replace
681	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  ages);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  ages);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  ages);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
682	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  xTol);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
683	[BUG]  [BUGGY]  if((  xTol  -  xB)!=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)!=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)!=  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
684	[BUG]  [BUGGY]  if((  xTol  -  xB)  ==  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  ==  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  ==  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
685	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	49	4	replace
686	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	49	4	replace
687	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xA,  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xA,  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xA,  FastMath.abs(yB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
688	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yB,  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yB,  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yB,  FastMath.abs(yA));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
689	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	5	4	replace
690	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	5	4	replace
691	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	30	None	add
692	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	30	7	add
693	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	30	7	add
694	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  int  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  int  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    int  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	30	None	add
695	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
696	[BUG]  [BUGGY]  if(((xTol  -  absYB)  <  =  0)||(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  <  =  0)||(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  <  =  0)||(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xA)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
697	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  <  xA)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  absYB)  <  xA)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xA)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	6	5	replace
698	[BUG]  [BUGGY]  if(((xTol  -  absYB)  <  xA)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  <  xA)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  <  xA)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xA)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	6	5	replace
699	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    If(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	167	None	add
700	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
701	[BUG]  [BUGGY]  float  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  float  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	float  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  int    xA    =    getAbsoluteAccuracy()    +    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
702	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
703	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
704	[BUG]  [BUGGY]  if((  xTol  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
705	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xTol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xTol));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
706	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                          TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
707	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	46	4	replace
708	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)&&(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	46	4	replace
709	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	46	5	replace
710	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    >=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	46	5	replace
711	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	143	5	replace
712	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	143	5	replace
713	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	143	4	replace
714	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	143	4	replace
715	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(yA,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(yA,  0);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(yA,  0);	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
716	[BUG]  [BUGGY]  if((  xTol  -  xB)  ==  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  ==  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  ==  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
717	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	66	4	replace
718	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	66	4	replace
719	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	9	add
720	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	9	add
721	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.min(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.min(  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.min(	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
722	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  >=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	153	4	replace
723	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  >=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	153	4	replace
724	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	153	4	replace
725	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	153	4	replace
726	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  0)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  0)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  0)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
727	[BUG]  [BUGGY]  if((  xTol  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
728	[BUG]  [BUGGY]  if((  yA  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
729	[BUG]  [BUGGY]  if((  yA  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)!=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
730	[BUG]  [BUGGY]  if((  xTol  -  xB)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
731	[BUG]  [BUGGY]  if((  xTol  -  xA)!=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xA)!=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xA)!=  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
732	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
733	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
734	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
735	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
736	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	32	7	add
737	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	32	7	add
738	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(absY,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	29	None	replace
739	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xTol)!=  yB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((yA  -  xTol)!=  yB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	122	5	replace
740	[BUG]  [BUGGY]  if(((yA  -  xTol)!=  yB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xTol)!=  yB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((yA  -  xTol)!=  yB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	122	5	replace
741	[BUG]  [BUGGY]  if((  xTol  -  xA)!=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xA)!=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xA)!=  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
742	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  If(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    If(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  	non-compiled	[CE]  ';'  expected	98	None	add
743	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  FastMath.abs(yA));	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
744	[BUG]  [BUGGY]  if((  yA  -  xB)!=  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)!=  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)!=  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
745	[BUG]  [BUGGY]  if((  yA  -  xB)  ==  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)  ==  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)  ==  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
746	[BUG]  [BUGGY]  if((  xTol  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  xTol  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  xTol  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
747	[BUG]  [BUGGY]  if((  yA  -  xB)  >=  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xB)  >=  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xB)  >=  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
748	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	135	5	replace
749	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(yA,  xTol)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	135	5	replace
750	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	59	5	replace
751	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)!=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	59	5	replace
752	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  1)||(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  1)||(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  1)||(FastMath.abs(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	59	None	replace
753	[BUG]  [BUGGY]  if((  yA  -  xTol)  <  =  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if((  yA  -  xTol)  <  =  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if((  yA  -  xTol)  <  =  0)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
754	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  double    yA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
755	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xTol)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xTol)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	122	4	replace
756	[BUG]  [BUGGY]  if(((xA  -  xTol)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xTol)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xTol)!=  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	122	4	replace
757	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  1)||(yA  <  =  0)||(FastMath.max(yB,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  1)||(yA  <  =  0)||(FastMath.max(yB,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  1)||(yA  <  =  0)||(FastMath.max(yB,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
758	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  1)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  <  1)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	59	5	replace
759	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  1)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  1)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  1)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	59	5	replace
760	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  1)||(yB  <  =  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  1)||(yB  <  =  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  1)||(yB  <  =  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    1)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
761	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  y);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  y);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  y);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
762	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  yY);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  yY);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  yY);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
763	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
764	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  absYB)*  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  absYB)*  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  absYB)*  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
765	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    fastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
766	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM	  	non-compiled	[CE]  ';'  expected	22	None	add
767	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastM  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastM	  	non-compiled	[CE]  ')'  expected	22	None	add
768	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  *  FastMath.max(	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
769	[BUG]  [BUGGY]  if(((xA  -  xA)  <  =  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xA)  <  =  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xA)  <  =  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
770	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  >=  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	168	4	replace
771	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  >=  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	168	4	replace
772	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	168	4	replace
773	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  >=  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	168	4	replace
774	[BUG]  [BUGGY]  if(((yA  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((yA  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    >=    0)&&(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	168	None	replace
775	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	3	replace
776	[BUG]  [BUGGY]  if(((xA  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xA)!=  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	139	3	replace
777	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	49	4	replace
778	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  xA)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	49	4	replace
779	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.abs(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.abs(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.abs(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
780	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
781	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)||  (yA  <  =  0)||  (FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)||  (yA  <  =  0)||  (FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  0)||  (yA  <  =  0)||  (FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
782	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  0)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
783	[BUG]  [BUGGY]  if(((yA  -  xB)  <  =  0)||  (FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xB)  <  =  0)||  (FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((yA  -  xB)  <  =  0)||  (FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
784	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  yB);  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  yB);	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
785	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(yA,  yB);  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(yA,  yB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(yA,  yB);	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
786	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	4	replace
787	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xTol)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	4	replace
788	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	4	replace
789	[BUG]  [BUGGY]  if(((xA  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	129	4	replace
790	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  no  suitable  method  found  for  max(double)  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double)	30	None	add
791	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);	  	compilable	  [FE]  AssertionError  	30	7	add
792	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);	  	compilable	  [FE]  AssertionError  	30	7	add
793	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  y);  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  y);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  y);	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(y);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
794	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
795	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	115	4	replace
796	[BUG]  [BUGGY]  if(((xA  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	115	4	replace
797	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
798	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  ';'  expected	23	None	replace
799	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	58	5	replace
800	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	58	5	replace
801	[BUG]  [BUGGY]  if(xTol  <  =  0)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(xTol  <  =  0)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  }  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(xTol  <  =  0)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  }	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
802	[BUG]  [BUGGY]  if(xTol  <  =  0)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(xTol  <  =  0)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(xTol  <  =  0)  {  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
803	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
804	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
805	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	  Double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
806	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMath.max(  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMath.max(  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  *  FastMath.max(	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
807	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  1)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  1)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  1)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
808	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
809	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
810	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getrelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
811	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                        TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
812	[BUG]  [BUGGY]  if(((yA  -  xB)  <  =  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((yA  -  xB)  <  =  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((yA  -  xB)  <  =  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
813	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xB)||(FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
814	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yA));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yA));	  double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
815	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
816	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  >=  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	133	None	replace
817	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	133	None	replace
818	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(y,  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(y,  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(y,  FastMath.abs(yB));	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(yB,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
819	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  <  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	5	replace
820	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	124	5	replace
821	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  xA);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  xA);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  xA);	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xA,    yB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
822	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  y);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  y);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  y);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
823	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  yY);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  yY);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol,  yY);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
824	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  <  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	99	5	replace
825	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    ==    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	99	5	replace
826	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
827	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)&&(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	127	4	replace
828	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  <  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	155	4	replace
829	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)&&(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	155	4	replace
830	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	3	replace
831	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)!=    xTol)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	104	3	replace
832	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	113	4	replace
833	[BUG]  [BUGGY]  if(((xTol  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)!=    xTol)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	113	4	replace
834	[BUG]  [BUGGY]  if(((xTol  -  absYB)  <  =  xA)||(FastMath.max(xA,  absYB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  absYB)  <  =  xA)||(FastMath.max(xA,  absYB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  absYB)  <  =  xA)||(FastMath.max(xA,  absYB)>  getFunctionValueAccuracy()))  {	  if    (((xTol    -    absYB)    <    =    xA)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
835	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
836	[BUG]  [BUGGY]  long  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  long  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	long  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
837	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
838	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  1)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  1)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  1)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xA)&&(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
839	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  no  suitable  method  found  for  max(double)  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double)	32	None	add
840	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	32	None	add
841	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	32	7	add
842	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.abs(xTol);        xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	32	7	add
843	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  absYB)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  absYB)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  absYB)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
844	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  1)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  1)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  1)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
845	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  xB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&(FastMath.max(yA,    absYB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
846	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  double    yA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
847	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM	  	non-compiled	[CE]  ';'  expected	14	None	add
848	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath	  	non-compiled	[CE]  ';'  expected	14	None	add
849	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.	  	non-compiled	[CE]  <identifier>  expected	14	None	add
850	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastM	  	non-compiled	[CE]  ';'  expected	109	None	add
851	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.	  	non-compiled	[CE]  <identifier>  expected	109	None	add
852	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath	  	non-compiled	[CE]  ';'  expected	109	None	add
853	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xTol),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xTol),  FastMath.abs(xB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xTol),  FastMath.abs(xB));	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
854	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
855	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
856	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
857	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  0)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	166	5	replace
858	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
859	[BUG]  [BUGGY]  final  double  yB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  final  double  yB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  final    double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
860	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
861	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
862	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                      TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));	  double    absYB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xTol),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
863	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(yA  <  =  0)||(FastMath.max(absY,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(yA  <  =  0)||(FastMath.max(absY,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(yA  <  =  0)||(FastMath.max(absY,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xB)||(yA    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
864	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  1)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  1)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  1)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(yA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
865	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath	  	non-compiled	[CE]  ';'  expected	18	None	add
866	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.	  	non-compiled	[CE]  <identifier>  expected	18	None	add
867	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
868	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	170	4	replace
869	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xA)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    0)||(FastMath.max(yA,    xB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	170	4	replace
870	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	110	None	replace
871	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  Fast	          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	17	None	replace
872	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xA  -  xB)  <  =  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  0)&&(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)&&(FastMath.max(absY,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
873	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));	  xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
874	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	27	4	replace
875	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  xA)&&(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xTol)&&    (FastMath.max(xA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	27	4	replace
876	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath	  	non-compiled	[CE]  ')'  expected	20	None	add
877	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastM  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastM  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastM	  	non-compiled	[CE]  ')'  expected	20	None	add
878	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath	  	non-compiled	[CE]  ';'  expected	20	None	add
879	[BUG]  [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]          xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(  [BUGGY]      if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	                xA        =        getAbsoluteAccuracy()        +        getRelativeAccuracy()        *        FastMath.max(FastMath.abs(xA),        FastMath.abs(xB));        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
880	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absY,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));      [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absY,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absY,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xB)    <    =    xA)&&(FastMath.max(absY,    xB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
