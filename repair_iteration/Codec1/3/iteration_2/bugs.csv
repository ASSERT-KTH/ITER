bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Parchet.checkState(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkState(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkState(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
2	[BUG]  [BUGGY]  Parchet.checkState(!pString.equals( "* "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkState(!pString.equals( "* "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkState(!pString.equals( "* "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
3	[BUG]  [BUGGY]  Parchet.checkState(!pString.equals( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkState(!pString.equals( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkState(!pString.equals( ". "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
4	[BUG]  [BUGGY]  allowsCaverphone(pString);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  allowsCaverphone(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	allowsCaverphone(pString);	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
5	[BUG]  [BUGGY]  Parchet.checkState(!pString.equals( "n "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkState(!pString.equals( "n "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkState(!pString.equals( "n "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
6	[BUG]  [BUGGY]  Parchet.checkState(!pString.equals( " "))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkState(!pString.equals( " "))  throw  new  IllegalArgumentException( " ");  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkState(!pString.equals( " "))  throw  new  IllegalArgumentException( " ");	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
7	[BUG]  [BUGGY]  Context.checkState(pString!=  null);  [CE]  cannot  find  symbol  Context  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Context.checkState(pString!=  null);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Context.checkState(pString!=  null);	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  Context	27	None	replace
8	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString  + "= "  +  pString;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString  + "= "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString  + "= "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString    +   "=   "    +    pString;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
9	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString  + "= "  +  pString;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString  + "= "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString  + "= "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString    +   "=   "    +    pString;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
10	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + "= "  +  pString;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + "= "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + "= "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString    +   "=   "    +    pString;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
11	[BUG]  [BUGGY]  return(pString  ==  null)?  null  :  pString.toLowerCase();  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString  ==  null)?  null  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString  ==  null)?  null  :  pString.toLowerCase();	  return    encode(pString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
12	[BUG]  [BUGGY]  return(pString!=  null)?  null  :  pString.toLowerCase();  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString!=  null)?  null  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString!=  null)?  null  :  pString.toLowerCase();	  return    encode(pString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
13	[BUG]  [BUGGY]  return(pString  ==  null)?  null  :  pString;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString  ==  null)?  null  :  pString;  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString  ==  null)?  null  :  pString;	  return    encode(pString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  return(pString!=  null)?  null  :  pString;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString!=  null)?  null  :  pString;  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString!=  null)?  null  :  pString;	  return    encode(pString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
15	[BUG]  [BUGGY]  return  _encode(pString);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  _encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  _encode(pString);	  return    encode(pString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
16	[BUG]  [BUGGY]  return(pString  ==  null)?  null  :  pString.substring(0,  pString.length());  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString  ==  null)?  null  :  pString.substring(0,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString  ==  null)?  null  :  pString.substring(0,  pString.length());	  return    encode(pString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
17	[BUG]  [BUGGY]  return(pString  ==  null)?  null  :  pString.trim();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString  ==  null)?  null  :  pString.trim();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString  ==  null)?  null  :  pString.trim();	  return    encode(pString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
18	[BUG]  [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  pString;  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
21	[BUG]  [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  pString;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  String  pString  =  pString.substring(0,  pString.length()  -  1);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  pString  =  pString.substring(0,  pString.length()  -  1);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  pString  =  pString.substring(0,  pString.length()  -  1);	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  return  pString;  [CE]  <identifier>  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  return  pString;  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0)))  {  return  pString;	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  return  caverphone(pString,  null,  false);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  false);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  false);	  return    caverphone(pString,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
25	[BUG]  [BUGGY]  return  caverphone(pString,  true,  false);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  true,  false);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  true,  false);	  return    caverphone(pString,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
26	[BUG]  [BUGGY]  return  caverphone(pString,  false,  null);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  false,  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  false,  null);	  return    caverphone(pString,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
27	[BUG]  [BUGGY]  return  caverphone(pString,  false,  true);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  false,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  false,  true);	  return    caverphone(pString,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
28	[BUG]  [BUGGY]  return  caverphone(pString,  false,  pString.toLowerCase());  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  false,  pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  false,  pString.toLowerCase());	  return    caverphone(pString,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
29	[BUG]  [BUGGY]  return  caverphone(pString,  false,  pString.length());  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  false,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  false,  pString.length());	  return    caverphone(pString,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
30	[BUG]  [BUGGY]  return  caverphone(pString,  false,  0);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  false,  0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  false,  0);	  return    caverphone(pString,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
31	[BUG]  [BUGGY]  return  caverphone(pString,  true,  null);  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  true,  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  true,  null);	  return    caverphone(pString,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
32	[BUG]  [BUGGY]  return  this.encode(pString,  null);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString,  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.encode(pString,  null);	  return    this.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
33	[BUG]  [BUGGY]  return  this.encode(pString,  true);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.encode(pString,  true);	  return    this.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
34	[BUG]  [BUGGY]  return  this.encode(pString,  0);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString,  0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.encode(pString,  0);	  return    this.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
35	[BUG]  [BUGGY]  return(pString!=  null)?  null  :  this.encode(pString);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString!=  null)?  null  :  this.encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString!=  null)?  null  :  this.encode(pString);	  return    this.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  return(pString  ==  null)?  null  :  this.encode(pString);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString  ==  null)?  null  :  this.encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString  ==  null)?  null  :  this.encode(pString);	  return    this.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  return(pString!=  null)?  null  :  pString.trim();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString!=  null)?  null  :  pString.trim();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString!=  null)?  null  :  pString.trim();	  return    this.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  String  caverphone(pString.toLowerCase());  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  String  caverphone(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    String  caverphone(pString.toLowerCase());	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
39	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  Caverphone  caverphone(pString.toLowerCase());  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  Caverphone  caverphone(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    Caverphone  caverphone(pString.toLowerCase());	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
40	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  String  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  String  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString!=  null)  {  String  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
41	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString!=  null)  {  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
42	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  return  caverphone(pString.toLowerCase());  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString!=  null)  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
43	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  if(pString.length()  >  0)  {  return  caverphone(pString.toLowerCase());  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  if(pString.length()  >  0)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString!=  null)  {  if(pString.length()  >  0)  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
44	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString.length()  ==  0)  {  return  caverphone(pString.toLowerCase());  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString.length()  ==  0)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString.length()  ==  0)  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
45	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  caverphone(pString.toLowerCase());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  caverphone(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    caverphone(pString.toLowerCase());	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
46	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
47	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  if(pString.length()  ==  0)  {  return  caverphone(pString.toLowerCase());  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  if(pString.length()  ==  0)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString!=  null)  {  if(pString.length()  ==  0)  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
48	[BUG]  [BUGGY]  return  this.caverphone(pString);  this.caverphone(pString);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  this.caverphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    this.caverphone(pString);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
49	[BUG]  [BUGGY]  return  this.caverphone(pString);  String  pString  =  this.caverphone(pString);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  String  pString  =  this.caverphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    String  pString  =  this.caverphone(pString);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
50	[BUG]  [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
51	[BUG]  [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
52	[BUG]  [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();  this.caverphone(pString);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();  this.caverphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();  this.caverphone(pString);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
53	[BUG]  [BUGGY]  return  this.caverphone(pString);  String  pString  =  getCaverphone(pString);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  String  pString  =  getCaverphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    String  pString  =  getCaverphone(pString);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
54	[BUG]  [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();  this.caverphone(pString);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();  this.caverphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();  this.caverphone(pString);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
55	[BUG]  [BUGGY]  return  this.caverphone(pString);  if(this.caverphone(pString)!=  null)  {  return  this.caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  if(this.caverphone(pString)!=  null)  {  return  this.caverphone(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    if(this.caverphone(pString)!=  null)  {  return  this.caverphone(pString);  }	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
56	[BUG]  [BUGGY]  return  this.caverphone(pString);  if(pString!=  null)  {  if(this.caverphone(pString)!=  null)  {  return  this.caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  if(pString!=  null)  {  if(this.caverphone(pString)!=  null)  {  return  this.caverphone(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    if(pString!=  null)  {  if(this.caverphone(pString)!=  null)  {  return  this.caverphone(pString);  }	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
57	[BUG]  [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString  ==  null)?  null  :  pString.substring(0,  pString.length());  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  String  pString  =(pString  ==  null)?  null  :  pString.substring(0,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    String  pString  =(pString  ==  null)?  null  :  pString.substring(0,  pString.length());	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
58	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
59	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
60	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
61	[BUG]  [BUGGY]  String  pString  =  pString.toLowerCase();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  pString  =  pString.toLowerCase();  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  pString  =  pString.toLowerCase();	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
62	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
63	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
64	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
65	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
66	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
67	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
68	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
69	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
70	[BUG]  [BUGGY]  String  caverphone(pString.length())  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.length())  {  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.length())  {	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
71	[BUG]  [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
72	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  CharacterImpl  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharacterImpl  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharacterImpl  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  return  null;  [CE]  <identifier>  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0)))  {  return  null;  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0)))  {  return  null;	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  null;  }  [CE]  <identifier>  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
77	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString  + ",   "  +  pString;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString  + ",   "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString  + ",   "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString    +   ",   "    +    pString;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
78	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  return  pString  + ", "  +  pString;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  return  pString  + ", "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  return  pString  + ", "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString    +   ",   "    +    pString;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
79	[BUG]  [BUGGY]  String  caverphone(pString.toUpperCase());  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.toUpperCase());  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.toUpperCase());	      String    caverphone(pString.toLowerCase());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
80	[BUG]  [BUGGY]  char  pString  =  pString.toLowerCase();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  char  pString  =  pString.toLowerCase();  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	char  pString  =  pString.toLowerCase();	      String    caverphone(pString.toLowerCase());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
81	[BUG]  [BUGGY]  String  caverphone(pString.toLowerCase()  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.toLowerCase()  +  1);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.toLowerCase()  +  1);	      String    caverphone(pString.toLowerCase());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
82	[BUG]  [BUGGY]  String  caverphone(pString.toLowerCase(),  false);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.toLowerCase(),  false);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.toLowerCase(),  false);	      String    caverphone(pString.toLowerCase());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
83	[BUG]  [BUGGY]  String  caverphone(pString.toLowerCase(),  true);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.toLowerCase(),  true);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.toLowerCase(),  true);	      String    caverphone(pString.toLowerCase());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
84	[BUG]  [BUGGY]  String  caverphone(pString.substring(0,  pString.length()  -  1));  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.substring(0,  pString.length()  -  1));  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.substring(0,  pString.length()  -  1));	      String    caverphone(pString.toLowerCase());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
85	[BUG]  [BUGGY]  String  caverphone(pString.toLowerCase()  +  ';');  [CE]  <identifier>  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.toLowerCase()  +  ';');  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.toLowerCase()  +  ';');	      String    caverphone(pString.toLowerCase());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
86	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString  + ", "  +  pString;  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString  + ", "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString  + ", "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString    +   ",   "    +    pString;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
87	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString  + "., "  +  pString;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString  + "., "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString  + "., "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString    +   ",   "    +    pString;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
88	[BUG]  [BUGGY]  char  pString  =  pString.toCharArray();  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  char  pString  =  pString.toCharArray();  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	char  pString  =  pString.toCharArray();	      String    caverphone(pString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
89	[BUG]  [BUGGY]  if(pString!=  null)  {  String  caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  caverphone(pString);  }	      String    caverphone(pString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
90	[BUG]  [BUGGY]  String  caverphone(pString,  0);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString,  0);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString,  0);	      String    caverphone(pString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
91	[BUG]  [BUGGY]  char  pString  =  pString.charAt(0);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  char  pString  =  pString.charAt(0);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	char  pString  =  pString.charAt(0);	      String    caverphone(pString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
92	[BUG]  [BUGGY]  String  caverphone(pString,  false);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString,  false);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString,  false);	      String    caverphone(pString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
93	[BUG]  [BUGGY]  String  caverphone(pString,  null);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString,  null);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString,  null);	      String    caverphone(pString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
94	[BUG]  [BUGGY]  return  getCamerphone(pString,  null);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone(pString,  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone(pString,  null);	  return    getCamerphone(pString);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
95	[BUG]  [BUGGY]  return  getCamerphone(pString.toLowerCase());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone(pString.toLowerCase());	  return    getCamerphone(pString);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
96	[BUG]  [BUGGY]  return  getCamerphone(pString,  true);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone(pString,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone(pString,  true);	  return    getCamerphone(pString);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
97	[BUG]  [BUGGY]  return  getCamerphone(pString,  0);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone(pString,  0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone(pString,  0);	  return    getCamerphone(pString);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
98	[BUG]  [BUGGY]  return  getCamerphone(pString,  false);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone(pString,  false);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone(pString,  false);	  return    getCamerphone(pString);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
99	[BUG]  [BUGGY]  return  getCamerphone(pString,  this);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone(pString,  this);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone(pString,  this);	  return    getCamerphone(pString);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
100	[BUG]  [BUGGY]  String  pString  =  getCamerphone(pString);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  pString  =  getCamerphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  pString  =  getCamerphone(pString);	  return    getCamerphone(pString);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
101	[BUG]  [BUGGY]  return  getCamerphone(pString,  this.camerphone);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone(pString,  this.camerphone);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone(pString,  this.camerphone);	  return    getCamerphone(pString);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
102	[BUG]  [BUGGY]  Annotation  <  String>  caverphone  =  getCaverphone(pString);  if(caverphone  ==  null)  {  return  caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caverphone  =  getCaverphone(pString);  if(caverphone  ==  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caverphone  =  getCaverphone(pString);  if(caverphone  ==  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
103	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
104	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver!=  null)  {  return  caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver!=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver!=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
105	[BUG]  [BUGGY]  Annotation  <  String>  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
106	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver  ==  null)  {  return  caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver  ==  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaver(pString);  if(caver  ==  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
107	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver  ==  null)  {  return  caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver  ==  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver  ==  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
108	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver  >=  null)  {  return  caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver  >=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaver(pString);  if(caver  >=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
109	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver  >=  null)  {  return  caverphone(pString);  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver  >=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver  >=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
110	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver!=  null)  {  return  caver;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver!=  null)  {  return  caver;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone(pString);  if(caver!=  null)  {  return  caver;  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
111	[BUG]  [BUGGY]  return  super.encode(pString,  null);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  null);	  return    super.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
112	[BUG]  [BUGGY]  return  super.encode(pString,  0);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  0);	  return    super.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
113	[BUG]  [BUGGY]  return  super.encode(pString,  false);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  false);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  false);	  return    super.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
114	[BUG]  [BUGGY]  return  super.encode(pString,  true);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  true);	  return    super.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
115	[BUG]  [BUGGY]  return  super.encode(pString,  this);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  this);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  this);	  return    super.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
116	[BUG]  [BUGGY]  return  super.encode(pString,  String.valueOf(pString));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  String.valueOf(pString));  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  String.valueOf(pString));	  return    super.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
117	[BUG]  [BUGGY]  return  super.encode(pString,  String.class);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  String.class);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  String.class);	  return    super.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
118	[BUG]  [BUGGY]  return  super.encode(pString,  1.0);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  1.0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  1.0);	  return    super.encode(pString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
119	[BUG]  [BUGGY]  return  caverphone(pString,  null,  null);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  null);	  return    caverphone(pString,    null);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
120	[BUG]  [BUGGY]  return  caverphone(pString,  null,  0);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  0);	  return    caverphone(pString,    null);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
121	[BUG]  [BUGGY]  return  caverphone(pString,  null,  true);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  true);	  return    caverphone(pString,    null);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
122	[BUG]  [BUGGY]  return  caverphone(pString,  null,  this);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  this);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  this);	  return    caverphone(pString,    null);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
123	[BUG]  [BUGGY]  return  caverphone(pString,  null,  pString.length());  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  pString.length());	  return    caverphone(pString,    null);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
124	[BUG]  [BUGGY]  return  caverphone(pString,  null,  cfg);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  cfg);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  cfg);	  return    caverphone(pString,    null);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
125	[BUG]  [BUGGY]  return  caverphone(pString,  null,  type);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  type);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  type);	  return    caverphone(pString,    null);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
126	[BUG]  [BUGGY]  return  caverphone(pString,  null,  ctxt);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  ctxt);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  ctxt);	  return    caverphone(pString,    null);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
127	[BUG]  [BUGGY]  return  this.caverphone(pString.toLowerCase());  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.caverphone(pString.toLowerCase());	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
128	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase()  +  1);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase()  +  1);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString.toLowerCase()  +  1);	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
129	[BUG]  [BUGGY]  return  caverphone(pString.toUpperCase());  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toUpperCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString.toUpperCase());	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
130	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase(),  false);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase(),  false);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString.toLowerCase(),  false);	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
131	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase(),  true);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase(),  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString.toLowerCase(),  true);	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
132	[BUG]  [BUGGY]  return  super.encode(pString.toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString.toLowerCase());	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	19	None	replace
133	[BUG]  [BUGGY]  return  encode(pString.toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  encode(pString.toLowerCase());	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	19	None	replace
134	[BUG]  [BUGGY]  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	31	None	replace
135	[BUG]  [BUGGY]  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	31	None	replace
136	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	31	None	replace
137	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	31	None	replace
138	[BUG]  [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	31	None	replace
139	[BUG]  [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString.toLowerCase());  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	31	None	replace
140	[BUG]  [BUGGY]  return  this.caverphone(pString,  true);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.caverphone(pString,  true);	  return    this.caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	12	None	replace
141	[BUG]  [BUGGY]  return  this.caverphone(pString,  null);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString,  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.caverphone(pString,  null);	  return    this.caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	12	None	replace
142	[BUG]  [BUGGY]  return  this.caverphone(pString,  false);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString,  false);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.caverphone(pString,  false);	  return    this.caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	12	None	replace
143	[BUG]  [BUGGY]  return  this.caverphone(pString,  0);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString,  0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.caverphone(pString,  0);	  return    this.caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	12	None	replace
144	[BUG]  [BUGGY]  return(pString!=  null)?  null  :  this.caverphone(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString!=  null)?  null  :  this.caverphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString!=  null)?  null  :  this.caverphone(pString);	  return    this.caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	12	None	replace
145	[BUG]  [BUGGY]  return(pString  ==  null)?  null  :  this.caverphone(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString  ==  null)?  null  :  this.caverphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString  ==  null)?  null  :  this.caverphone(pString);	  return    this.caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	12	None	replace
146	[BUG]  [BUGGY]  Annotation  caverphone(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  caverphone(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  caverphone(pString);	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
147	[BUG]  [BUGGY]  return  String.valueOf(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  String.valueOf(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  String.valueOf(pString);	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
148	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	aughtExceptionHandler.handleMissingException( " ");	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
149	[BUG]  [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	aughtExceptionHandler.handleMalformedException( " ");	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
150	[BUG]  [BUGGY]  Annotation  caverphone  =  getCaverphone(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  caverphone  =  getCaverphone(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  caverphone  =  getCaverphone(pString);	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
151	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcherFailure(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  aughtExceptionHandler.handleMatcherFailure(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	aughtExceptionHandler.handleMatcherFailure(pString);	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
152	[BUG]  [BUGGY]  Annotation  <  String>  caverphone(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caverphone(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caverphone(pString);	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
153	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(pString,  null);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  aughtExceptionHandler.handleMatcher(pString,  null);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	aughtExceptionHandler.handleMatcher(pString,  null);	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
154	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString  + ", "  +  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString  + ", "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString  + ", "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString    +   ",   "    +    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	36	None	replace
155	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ", "  +  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ", "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ", "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString    +   ",   "    +    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	36	None	replace
156	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
157	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
158	[BUG]  [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
159	[BUG]  [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
160	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
161	[BUG]  [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
162	[BUG]  [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
163	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	29	None	replace
164	[BUG]  [BUGGY]  if(pString.length()  ==  0)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	29	None	replace
165	[BUG]  [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	29	None	replace
166	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone(pString);  if(caverphone!=  null)  {  return  caverphone(pString.toLowerCase());  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	29	None	replace
167	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	38	None	replace
168	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	38	None	replace
169	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	38	None	replace
170	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	38	None	replace
171	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	38	None	replace
172	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	38	None	replace
173	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	38	None	replace
174	[BUG]  [BUGGY]  return  caverphone(pString,  0,  pString.length);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  pString.length);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  pString.length);	  return    caverphone(pString,    0);    	non-compiled	[CE]  	24	None	replace
175	[BUG]  [BUGGY]  return  caverphone(pString,  0,  0);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  0);	  return    caverphone(pString,    0);    	non-compiled	[CE]  	24	None	replace
176	[BUG]  [BUGGY]  return  caverphone(pString,  0,  pString.length());  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  pString.length());	  return    caverphone(pString,    0);    	non-compiled	[CE]  	24	None	replace
177	[BUG]  [BUGGY]  return  caverphone(pString,  0,  null);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  null);	  return    caverphone(pString,    0);    	non-compiled	[CE]  	24	None	replace
178	[BUG]  [BUGGY]  return  caverphone(pString,  String.valueOf(pString));  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  String.valueOf(pString));  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  String.valueOf(pString));	  return    caverphone(pString,    0);    	non-compiled	[CE]  	24	None	replace
179	[BUG]  [BUGGY]  return  caverphone(pString,  0,  pString.toLowerCase());  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  pString.toLowerCase());	  return    caverphone(pString,    0);    	non-compiled	[CE]  	24	None	replace
180	[BUG]  [BUGGY]  return  caverphone(pString,  0,  true);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  true);	  return    caverphone(pString,    0);    	non-compiled	[CE]  	24	None	replace
181	[BUG]  [BUGGY]  if(pString.length()  ==  0)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString);  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
182	[BUG]  [BUGGY]  if(pString.length()  ==  0)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString);  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
183	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString.toLowerCase());  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone(pString.toLowerCase());  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
184	[BUG]  [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  	28	None	replace
185	[BUG]  [BUGGY]  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  	28	None	replace
186	[BUG]  [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone.encode(pString);  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  	28	None	replace
187	[BUG]  [BUGGY]  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone.encode(pString);  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  	28	None	replace
188	[BUG]  [BUGGY]  Annotation  <  String>  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  	28	None	replace
189	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  caver.encode(pString);  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  caver.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  caver.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  	28	None	replace
190	[BUG]  [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.toString();  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.toString();  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.toString();  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  	28	None	replace
191	[BUG]  [BUGGY]  Annotation  <  String>  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone.encode(pString);  }  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caverphone  =  getCaverphone();  if(caverphone  ==  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  	28	None	replace
192	[BUG]  [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
193	[BUG]  [BUGGY]  return  encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
194	[BUG]  [BUGGY]  return  encode(pString);  String  pString  =  getCamerphone().encode(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  String  pString  =  getCamerphone().encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    String  pString  =  getCamerphone().encode(pString);	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
195	[BUG]  [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.trim();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.trim();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    String  pString  =(pString  ==  null)?  null  :  pString.trim();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
196	[BUG]  [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.substring(0,  pString.length());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.substring(0,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    String  pString  =(pString  ==  null)?  null  :  pString.substring(0,  pString.length());	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
197	[BUG]  [BUGGY]  return  encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.trim();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.trim();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    String  pString  =(pString!=  null)?  null  :  pString.trim();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
198	[BUG]  [BUGGY]  return  encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.substring(0,  pString.length());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.substring(0,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    String  pString  =(pString!=  null)?  null  :  pString.substring(0,  pString.length());	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
199	[BUG]  [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString;  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString;  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    String  pString  =(pString  ==  null)?  null  :  pString;	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
200	[BUG]  [BUGGY]  return  encode(pString);  if(pString!=  null)  {  if(!pString.equals( " "))  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString!=  null)  {  if(!pString.equals( " "))  {  return  String.valueOf(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString!=  null)  {  if(!pString.equals( " "))  {  return  String.valueOf(pString);  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
201	[BUG]  [BUGGY]  return  encode(pString);  if(pString  ==  null)  {  if(!pString.equals( " "))  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString  ==  null)  {  if(!pString.equals( " "))  {  return  String.valueOf(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString  ==  null)  {  if(!pString.equals( " "))  {  return  String.valueOf(pString);  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
202	[BUG]  [BUGGY]  return  caver(pString.toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caver(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caver(pString.toLowerCase());	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
203	[BUG]  [BUGGY]  return  caver(pString,  null);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caver(pString,  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caver(pString,  null);	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
204	[BUG]  [BUGGY]  return  caver(pString,  true);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caver(pString,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caver(pString,  true);	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
205	[BUG]  [BUGGY]  return  caver(pString,  false);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caver(pString,  false);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caver(pString,  false);	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
206	[BUG]  [BUGGY]  return  caver(pString,  0);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caver(pString,  0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caver(pString,  0);	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
207	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(0));  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(0));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(0));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	3	None	replace
208	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(1));  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(1));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(1));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	3	None	replace
209	[BUG]  [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	3	None	replace
210	[BUG]  [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	3	None	replace
211	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(1));  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(1));  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(1));	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	3	None	replace
212	[BUG]  [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(0));  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(0));  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isUpperCase(pString.charAt(0))  {  return  String.valueOf(pString.charAt(0));	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	3	None	replace
213	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
214	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString!=  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
215	[BUG]  [BUGGY]  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
216	[BUG]  [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
217	[BUG]  [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
218	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()!=  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()!=  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()!=  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
219	[BUG]  [BUGGY]  return  caverphone(pString,  false,  pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  false,  pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  false,  pString);	  return    caverphone(pString,    true);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	22	None	replace
220	[BUG]  [BUGGY]  CharSequence  caverphone(pString,  true);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharSequence  caverphone(pString,  true);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharSequence  caverphone(pString,  true);	      CharSequence    caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	5	None	replace
221	[BUG]  [BUGGY]  CharSequence  caverphone(pString,  false);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharSequence  caverphone(pString,  false);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharSequence  caverphone(pString,  false);	      CharSequence    caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	5	None	replace
222	[BUG]  [BUGGY]  CharSequence  caverphone(pString.charAt(0));  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharSequence  caverphone(pString.charAt(0));  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharSequence  caverphone(pString.charAt(0));	      CharSequence    caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	5	None	replace
223	[BUG]  [BUGGY]  CharSequence  caverphone(pString,  0);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharSequence  caverphone(pString,  0);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharSequence  caverphone(pString,  0);	      CharSequence    caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	5	None	replace
224	[BUG]  [BUGGY]  CharSequence  caverphone(pString,  null);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharSequence  caverphone(pString,  null);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharSequence  caverphone(pString,  null);	      CharSequence    caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	5	None	replace
225	[BUG]  [BUGGY]  CharSequence  caverphone(pString.toCharArray());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharSequence  caverphone(pString.toCharArray());  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharSequence  caverphone(pString.toCharArray());	      CharSequence    caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	5	None	replace
226	[BUG]  [BUGGY]  CharSequence  caverphone(pString,  ';');  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharSequence  caverphone(pString,  ';');  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharSequence  caverphone(pString,  ';');	      CharSequence    caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	5	None	replace
227	[BUG]  [BUGGY]  allowsCaverphone(pString)  {  if(!pString.equals( "   "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  allowsCaverphone(pString)  {  if(!pString.equals( "   "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	allowsCaverphone(pString)  {  if(!pString.equals( "   "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString    ==    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	30	None	replace
228	[BUG]  [BUGGY]  allowsCaverphone(pString)  {  if(!pString.equals( "   "))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  allowsCaverphone(pString)  {  if(!pString.equals( "   "))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	allowsCaverphone(pString)  {  if(!pString.equals( "   "))  {  throw  new  IllegalArgumentException( " ".);  }	      if(pString    ==    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	30	None	replace
229	[BUG]  [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.length())  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
230	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
231	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
232	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0))&&!Character.isDigit(pString.charAt(0))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0))&&!Character.isDigit(pString.charAt(0))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0))&&!Character.isDigit(pString.charAt(0))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
233	[BUG]  [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(1)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(1)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(1)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
234	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0)))  {  return  pString;  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0)))  {  return  pString;  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0)))  {  return  pString;	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
235	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
236	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
237	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
238	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
239	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
240	[BUG]  [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
241	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()!=  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()!=  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()!=  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
242	[BUG]  [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
243	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
244	[BUG]  [BUGGY]  if(pString!=  null  ||  pString.length()  ==  0)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null  ||  pString.length()  ==  0)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null  ||  pString.length()  ==  0)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
245	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
246	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  >=  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  >=  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  >=  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
247	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =(pString  ==  null)?  null  :  pString.toLowerCase();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
248	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =(pString!=  null)?  null  :  pString.toLowerCase();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
249	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =  this.encode(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =  this.encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =  this.encode(pString);	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
250	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =  getCamerphone().encode(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =  getCamerphone().encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =  getCamerphone().encode(pString);	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
251	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.substring(0,  pString.length());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.substring(0,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =(pString  ==  null)?  null  :  pString.substring(0,  pString.length());	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
252	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.trim();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.trim();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =(pString  ==  null)?  null  :  pString.trim();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
253	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.substring(0,  pString.length());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.substring(0,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =(pString!=  null)?  null  :  pString.substring(0,  pString.length());	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
254	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.trim();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =(pString!=  null)?  null  :  pString.trim();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =(pString!=  null)?  null  :  pString.trim();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
255	[BUG]  [BUGGY]  return  this.encode(pString);  this.encode(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  this.encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    this.encode(pString);	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
256	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toCharArray();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)?  null  :  pString.toCharArray();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =(pString  ==  null)?  null  :  pString.toCharArray();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
257	[BUG]  [BUGGY]  return  caverphone(pString,  null,  booleanValue);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  booleanValue);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  booleanValue);	  return    caverphone(pString,    null);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	21	None	replace
258	[BUG]  [BUGGY]  return  caverphone(pString,  null,  pString.toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  pString.toLowerCase());	  return    caverphone(pString,    null);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	21	None	replace
259	[BUG]  [BUGGY]  return  caverphone(pString,  null,  booleanValues);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  booleanValues);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  booleanValues);	  return    caverphone(pString,    null);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	21	None	replace
260	[BUG]  [BUGGY]  return  caverphone(pString,  null,  _typeFactory);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  _typeFactory);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  _typeFactory);	  return    caverphone(pString,    null);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	21	None	replace
261	[BUG]  [BUGGY]  Encoder.getInstance().encode(pString);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.getInstance().encode(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.getInstance().encode(pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
262	[BUG]  [BUGGY]  Encoder.isTrue(pString.length()  ==  0);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.isTrue(pString.length()  ==  0);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.isTrue(pString.length()  ==  0);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
263	[BUG]  [BUGGY]  Encoder.getInstance().encodeCamera(pString);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.getInstance().encodeCamera(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.getInstance().encodeCamera(pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
264	[BUG]  [BUGGY]  Encoder.getDefault().encode(pString);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.getDefault().encode(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.getDefault().encode(pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
265	[BUG]  [BUGGY]  Encoder.isTrue(pString.length()!=  0);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.isTrue(pString.length()!=  0);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.isTrue(pString.length()!=  0);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
266	[BUG]  [BUGGY]  Encoder.getCamera().encode(pString);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.getCamera().encode(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.getCamera().encode(pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
267	[BUG]  [BUGGY]  Encoder.getInstance().encodeAsString(pString);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.getInstance().encodeAsString(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.getInstance().encodeAsString(pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
268	[BUG]  [BUGGY]  Encoder.isTrue(pString.length()  >  0);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.isTrue(pString.length()  >  0);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.isTrue(pString.length()  >  0);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	26	None	replace
269	[BUG]  [BUGGY]  return  getCamerphone().encode(pString);  [CE]  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone().encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone().encode(pString);	  return    encode(pString);    	non-compiled	[CE]  	14	None	replace
270	[BUG]  [BUGGY]  return(pString  ==  null)?  null  :  encode(pString);  [CE]  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString  ==  null)?  null  :  encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString  ==  null)?  null  :  encode(pString);	  return    encode(pString);    	non-compiled	[CE]  	14	None	replace
271	[BUG]  [BUGGY]  Parchet.checkArgument(pString.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(pString.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(pString.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString    ==    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
272	[BUG]  [BUGGY]  safeCaverphone(pString);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  safeCaverphone(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	safeCaverphone(pString);	      if(pString    ==    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
273	[BUG]  [BUGGY]  Parchet.checkState(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkState(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkState(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ".);  }	      if(pString    ==    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
274	[BUG]  [BUGGY]  Parchet.checkState(!pString.equals( " "))  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkState(!pString.equals( " "))  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkState(!pString.equals( " "))  {  throw  new  IllegalArgumentException( ". ");  }	      if(pString    ==    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
275	[BUG]  [BUGGY]  Encoder.getDefaultEncoding().encode(pString);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.getDefaultEncoding().encode(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.getDefaultEncoding().encode(pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	25	None	replace
276	[BUG]  [BUGGY]  safeCamera.encode(pString);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  safeCamera.encode(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	safeCamera.encode(pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	25	None	replace
277	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
278	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
279	[BUG]  [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
280	[BUG]  [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
281	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
282	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
283	[BUG]  [BUGGY]  char  pString  =  pString;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  char  pString  =  pString;  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	char  pString  =  pString;	      String    caverphone(pString);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
284	[BUG]  [BUGGY]  String  caverphone(pString,  ';');  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString,  ';');  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString,  ';');	      String    caverphone(pString);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
285	[BUG]  [BUGGY]  String  caverphone(pString,  true);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString,  true);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString,  true);	      String    caverphone(pString);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
286	[BUG]  [BUGGY]  return  caverphone(pString,  false,  pString.toUpperCase());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  false,  pString.toUpperCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  false,  pString.toUpperCase());	  return    caverphone(pString,    false);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
287	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString  ==  null)  {  String  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString  ==  null)  {  String  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString  ==  null)  {  String  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	18	None	add
288	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  Comparerphone  caverphone(pString.toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  Comparerphone  caverphone(pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    Comparerphone  caverphone(pString.toLowerCase());	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	18	None	add
289	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  String  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  String  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString!=  null)  {  String  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	18	None	add
290	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString  ==  null)  {  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString  ==  null)  {  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString  ==  null)  {  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	18	None	add
291	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
292	[BUG]  [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
293	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
294	[BUG]  [BUGGY]  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
295	[BUG]  [BUGGY]  if(pString.length()  ==  0  ||!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0  ||!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0  ||!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
296	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
297	[BUG]  [BUGGY]  Annotation  caverphone(pString)  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  caverphone(pString)  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  caverphone(pString)  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
298	[BUG]  [BUGGY]  Annotations.encode(pString,  true)  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotations.encode(pString,  true)  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotations.encode(pString,  true)  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
299	[BUG]  [BUGGY]  Annotation  caverphone(pString)  {  if(pString!=  null)  {  return  caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  caverphone(pString)  {  if(pString!=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  caverphone(pString)  {  if(pString!=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
300	[BUG]  [BUGGY]  Annotations.encode(pString,  null)  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotations.encode(pString,  null)  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotations.encode(pString,  null)  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
301	[BUG]  [BUGGY]  Annotation  caverphone(pString)  {  if(pString  ==  null)  {  return  caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  caverphone(pString)  {  if(pString  ==  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  caverphone(pString)  {  if(pString  ==  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
302	[BUG]  [BUGGY]  Annotation  caverphone(pString)  {  if(pString.length()  ==  0)  {  return  String.valueOf(caverphone);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  caverphone(pString)  {  if(pString.length()  ==  0)  {  return  String.valueOf(caverphone);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  caverphone(pString)  {  if(pString.length()  ==  0)  {  return  String.valueOf(caverphone);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
303	[BUG]  [BUGGY]  Annotation  caverphone(pString)  {  if(caverphone.length()  ==  0)  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  caverphone(pString)  {  if(caverphone.length()  ==  0)  {  return  String.valueOf(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  caverphone(pString)  {  if(caverphone.length()  ==  0)  {  return  String.valueOf(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
304	[BUG]  [BUGGY]  Annotation  caverphone(pString)  {  if(pString  ==  null)  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  caverphone(pString)  {  if(pString  ==  null)  {  return  String.valueOf(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  caverphone(pString)  {  if(pString  ==  null)  {  return  String.valueOf(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
305	[BUG]  [BUGGY]  return  this.caverphone(pString);  if(this.caverphone(pString)!=  null)  {  if(this.caverphone(pString)  ==  null)  {  return  this.caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  if(this.caverphone(pString)!=  null)  {  if(this.caverphone(pString)  ==  null)  {  return  this.caverphone(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    if(this.caverphone(pString)!=  null)  {  if(this.caverphone(pString)  ==  null)  {  return  this.caverphone(pString);  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	11	None	add
306	[BUG]  [BUGGY]  return  this.caverphone(pString);  if(this.caverphone(pString)!=  null)  {  String  pString  =  this.caverphone(pString);  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  if(this.caverphone(pString)!=  null)  {  String  pString  =  this.caverphone(pString);  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    if(this.caverphone(pString)!=  null)  {  String  pString  =  this.caverphone(pString);  if(pString  ==  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	11	None	add
307	[BUG]  [BUGGY]  return  this.caverphone(pString);  if(this.caverphone(pString)!=  null)  {  String  pString  =  this.caverphone(pString);  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  if(this.caverphone(pString)!=  null)  {  String  pString  =  this.caverphone(pString);  if(pString!=  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    if(this.caverphone(pString)!=  null)  {  String  pString  =  this.caverphone(pString);  if(pString!=  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	11	None	add
308	[BUG]  [BUGGY]  return  this.caverphone(pString);  if(pString!=  null)  {  if(this.caverphone(pString)  ==  null)  {  return  this.caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  if(pString!=  null)  {  if(this.caverphone(pString)  ==  null)  {  return  this.caverphone(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    if(pString!=  null)  {  if(this.caverphone(pString)  ==  null)  {  return  this.caverphone(pString);  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	11	None	add
309	[BUG]  [BUGGY]  Parchet.checkArgument(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	27	None	replace
310	[BUG]  [BUGGY]  Parchet.checkArgument(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(!pString.equals( " "))  {  throw  new  IllegalArgumentException( " ".);  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	27	None	replace
311	[BUG]  [BUGGY]  Parchet.checkState(pString!=  null);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkState(pString!=  null);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkState(pString!=  null);	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	27	None	replace
312	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
313	[BUG]  [BUGGY]  if(pString!=  null  ||  pString.length()  ==  0)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null  ||  pString.length()  ==  0)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null  ||  pString.length()  ==  0)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
314	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
315	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return   " ";  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return   " ";  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return   " ";  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
316	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  >=  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  >=  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  >=  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
317	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ".);  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	38	None	replace
318	[BUG]  [BUGGY]  return  caverphone(ctxt,  pString,  true);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(ctxt,  pString,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(ctxt,  pString,  true);	  return    caverphone(pString,    true);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	22	None	replace
319	[BUG]  [BUGGY]  return  caverphone(class,  pString,  true);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(class,  pString,  true);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(class,  pString,  true);	  return    caverphone(pString,    true);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	22	None	replace
320	[BUG]  [BUGGY]  return  caverphone(pString,  true,  0);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  true,  0);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  true,  0);	  return    caverphone(pString,    true);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	22	None	replace
321	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.toUpperCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.toUpperCase());  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.toUpperCase());  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	10	None	replace
322	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.trim());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.trim());  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.trim());  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	10	None	replace
323	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(cString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(cString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(cString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	10	None	replace
324	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
325	[BUG]  [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
326	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
327	[BUG]  [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.length())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
328	[BUG]  [BUGGY]  Character.isLetter(pString.charAt(0))&&!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isLetter(pString.charAt(0))&&!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isLetter(pString.charAt(0))&&!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
329	[BUG]  [BUGGY]  Character.isLetter(pString.charAt(0))&&!Character.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isLetter(pString.charAt(0))&&!Character.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isLetter(pString.charAt(0))&&!Character.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
330	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ".);  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
331	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
332	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ".= "  +  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ".= "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ".= "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString    +   "=   "    +    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	40	None	replace
333	[BUG]  [BUGGY]  if(pString.length()  ==  0)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
334	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString  ==  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
335	[BUG]  [BUGGY]  return  this.encodeValue(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encodeValue(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.encodeValue(pString);	  return    this.encode(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	16	None	replace
336	[BUG]  [BUGGY]  return  this.encode(pString,  false);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString,  false);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.encode(pString,  false);	  return    this.encode(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	16	None	replace
337	[BUG]  [BUGGY]  return  this.encodePath(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encodePath(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.encodePath(pString);	  return    this.encode(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	16	None	replace
338	[BUG]  [BUGGY]  return  this.encodeCamerphone(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encodeCamerphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.encodeCamerphone(pString);	  return    this.encode(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	16	None	replace
339	[BUG]  [BUGGY]  return  super.encode(pString,  pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  pString);	  return    super.encode(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	17	None	replace
340	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
341	[BUG]  [BUGGY]  if(pString  ==  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
342	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
343	[BUG]  [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  caverphone(pString.length())  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  caverphone(pString.length())  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
344	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
345	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0))||!Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0))||!Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0))||!Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
346	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Character.isDigit(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Character.isDigit(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Character.isDigit(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
347	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ".);  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	6	None	replace
348	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
349	[BUG]  [BUGGY]  if(pString  ==  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
350	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
351	[BUG]  [BUGGY]  if(pString!=  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
352	[BUG]  [BUGGY]  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
353	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(1)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(1)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isDigit(pString.charAt(1)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
354	[BUG]  [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString  ==  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
355	[BUG]  [BUGGY]  return  encode(pString);  if(pString  ==  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString  ==  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString!=  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString  ==  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString!=  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
356	[BUG]  [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString!=  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString!=  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
357	[BUG]  [BUGGY]  return  encode(pString);  if(pString  ==  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString  ==  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString  ==  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString  ==  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
358	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ".);  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	37	None	replace
359	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	37	None	replace
360	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( ". ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	37	None	replace
361	[BUG]  [BUGGY]  return  caverphone(pString,  0,  String.class);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  String.class);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  String.class);	  return    caverphone(pString,    0);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	24	None	replace
362	[BUG]  [BUGGY]  return  caverphone(pString,  0,  String.valueOf(pString));  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  String.valueOf(pString));  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  String.valueOf(pString));	  return    caverphone(pString,    0);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	24	None	replace
363	[BUG]  [BUGGY]  return  caverphone(pString,  0,  false);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  false);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  false);	  return    caverphone(pString,    0);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	24	None	replace
364	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
365	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toUpperCase();  if(pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
366	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  1)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  1)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  1)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	34	None	replace
367	[BUG]  [BUGGY]  Encoder.getCurrentName(pString)  ==  null;  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.getCurrentName(pString)  ==  null;  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.getCurrentName(pString)  ==  null;	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	29	None	replace
368	[BUG]  [BUGGY]  Encoder.isTrue(pString.length()  >=  0);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.isTrue(pString.length()  >=  0);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.isTrue(pString.length()  >=  0);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	29	None	replace
369	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	7	None	replace
370	[BUG]  [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	7	None	replace
371	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	7	None	replace
372	[BUG]  [BUGGY]  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	7	None	replace
373	[BUG]  [BUGGY]  if(pString!=  null)  {  if(!Paint.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  if(!Paint.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  if(!Paint.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	7	None	replace
374	[BUG]  [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null  ||  pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	7	None	replace
375	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.substring(0,  pString.length()  -  1));  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.substring(0,  pString.length()  -  1));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone(pString.substring(0,  pString.length()  -  1));  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	31	None	replace
376	[BUG]  [BUGGY]  return(this.caverphone(pString)!=  null);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(this.caverphone(pString)!=  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(this.caverphone(pString)!=  null);	  return    this.caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	12	None	replace
377	[BUG]  [BUGGY]  return(this.caverphone(pString)  ==  null);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(this.caverphone(pString)  ==  null);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(this.caverphone(pString)  ==  null);	  return    this.caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	12	None	replace
378	[BUG]  [BUGGY]  return  this.caverphone(pString,  String.class);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString,  String.class);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.caverphone(pString,  String.class);	  return    this.caverphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	12	None	replace
379	[BUG]  [BUGGY]  return  cacheFactory(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  cacheFactory(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  cacheFactory(pString);	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
380	[BUG]  [BUGGY]  return  caver(pString.toCharArray());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caver(pString.toCharArray());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caver(pString.toCharArray());	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
381	[BUG]  [BUGGY]  return  getCamerphone(pString,  String.class);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone(pString,  String.class);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone(pString,  String.class);	  return    getCamerphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	20	None	replace
382	[BUG]  [BUGGY]  return  getCamerphone(pString,  cfg);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  getCamerphone(pString,  cfg);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  getCamerphone(pString,  cfg);	  return    getCamerphone(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	20	None	replace
383	[BUG]  [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString!=  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString!=  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
384	[BUG]  [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    if(pString!=  null)  {  String  pString  =  getCamerphone().encode(pString);  if(pString  ==  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
385	[BUG]  [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)? "null "  :  pString.toLowerCase();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  String  pString  =(pString  ==  null)? "null "  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    String  pString  =(pString  ==  null)? "null "  :  pString.toLowerCase();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
386	[BUG]  [BUGGY]  char  caverphone(pString.toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  char  caverphone(pString.toLowerCase());  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	char  caverphone(pString.toLowerCase());	      String    caverphone(pString.toLowerCase());    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	4	None	replace
387	[BUG]  [BUGGY]  Encoder.isTrue(pString.endsWith( "n "))  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.isTrue(pString.endsWith( "n "))  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.isTrue(pString.endsWith( "n "))  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
388	[BUG]  [BUGGY]  Encoder.isTrue(pString.startsWith( "n "))  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Encoder.isTrue(pString.startsWith( "n "))  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Encoder.isTrue(pString.startsWith( "n "))  {  String  caverphone  =  getCaverphone();  if(caverphone!=  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
389	[BUG]  [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caveraudio!=  null)  {  return  caverphone.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caveraudio!=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caveraudio!=  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
390	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caveraudio!=  null)  {  return  caverphone.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caveraudio!=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  caverphone  =  getCaverphone();  if(caveraudio!=  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
391	[BUG]  [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  >=  null)  {  return  caverphone.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  >=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  caverphone  =  getCaverphone();  if(caverphone  >=  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
392	[BUG]  [BUGGY]  return  caverphone(pString  ==  null?  null  :  pString.toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString  ==  null?  null  :  pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString  ==  null?  null  :  pString.toLowerCase());	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	19	None	replace
393	[BUG]  [BUGGY]  return  caverphone(pString!=  null?  null  :  pString.toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString!=  null?  null  :  pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString!=  null?  null  :  pString.toLowerCase());	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	19	None	replace
394	[BUG]  [BUGGY]  return  cache(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  cache(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  cache(pString);	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
395	[BUG]  [BUGGY]  return  cacheverphone(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  cacheverphone(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  cacheverphone(pString);	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
396	[BUG]  [BUGGY]  return  cacheVersion(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  cacheVersion(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  cacheVersion(pString);	  return    caver(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	42	None	replace
397	[BUG]  [BUGGY]  AnnotationTraversal.traverse(compiler,  pString,  this);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  AnnotationTraversal.traverse(compiler,  pString,  this);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	AnnotationTraversal.traverse(compiler,  pString,  this);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
398	[BUG]  [BUGGY]  AnnotationTraversal.traverse(compiler,  pString,  new  Comparable  <  String>());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  AnnotationTraversal.traverse(compiler,  pString,  new  Comparable  <  String>());  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	AnnotationTraversal.traverse(compiler,  pString,  new  Comparable  <  String>());	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
399	[BUG]  [BUGGY]  Annotation  <  String>  pString  =  getChronology().encode(pString);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  pString  =  getChronology().encode(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  pString  =  getChronology().encode(pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
400	[BUG]  [BUGGY]  Annotation  <  String>  pString  =  getCaverphone();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  pString  =  getCaverphone();  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  pString  =  getCaverphone();	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
401	[BUG]  [BUGGY]  AnnotationTraversal.traverse(compiler,  pString,  null);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  AnnotationTraversal.traverse(compiler,  pString,  null);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	AnnotationTraversal.traverse(compiler,  pString,  null);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
402	[BUG]  [BUGGY]  pullParser().encode(pString);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  pullParser().encode(pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	pullParser().encode(pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
403	[BUG]  [BUGGY]  AnnotationTraversal.traverse(compiler,  pString);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  AnnotationTraversal.traverse(compiler,  pString);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	AnnotationTraversal.traverse(compiler,  pString);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
404	[BUG]  [BUGGY]  AnnotationTraversal.traverse(compiler,  pString,  false);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  AnnotationTraversal.traverse(compiler,  pString,  false);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	AnnotationTraversal.traverse(compiler,  pString,  false);	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
405	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caverphone.encode(pString);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caverphone.encode(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
406	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caver.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caver.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caver.encode(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	25	None	replace
407	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caver;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caver;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaver(pString);  if(caver!=  null)  {  return  caver;  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone(pString);    if(caverphone    ==    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	25	None	replace
408	[BUG]  [BUGGY]  if(caverphone(pString)  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	7	None	replace
409	[BUG]  [BUGGY]  if(caverphone(pString)  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	7	None	replace
410	[BUG]  [BUGGY]  if(Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(Character.isUpperCase(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	7	None	replace
411	[BUG]  [BUGGY]  if(caverphone(pString)  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
412	[BUG]  [BUGGY]  if(caverphone(pString)  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
413	[BUG]  [BUGGY]  if(caverphone(pString)!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)!=  null)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
414	[BUG]  [BUGGY]  if(pString.length()  ==  0  ||  Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0  ||  Character.isUpperCase(pString.charAt(0)))  {  return  null;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0  ||  Character.isUpperCase(pString.charAt(0)))  {  return  null;  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    null;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	8	None	replace
415	[BUG]  [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
416	[BUG]  [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)? "null "  :  pString.toLowerCase();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  String  pString  =(pString  ==  null)? "null "  :  pString.toLowerCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    String  pString  =(pString  ==  null)? "null "  :  pString.toLowerCase();	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
417	[BUG]  [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
418	[BUG]  [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ", "  +  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ", "  +  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ", "  +  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
419	[BUG]  [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  pString.trim();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  encode(pString);  if(pString!=  null)  {  String  pString  =  pString.trim();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    encode(pString);    if(pString!=  null)  {  String  pString  =  pString.trim();  if(pString  ==  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	13	None	add
420	[BUG]  [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
421	[BUG]  [BUGGY]  if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	33	None	replace
422	[BUG]  [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  return  this.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  return  this.encode(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    if(pString!=  null)  {  return  this.encode(pString);  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
423	[BUG]  [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  this.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  this.encode(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  this.encode(pString);  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
424	[BUG]  [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString;  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
425	[BUG]  [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  super.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.encode(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  super.encode(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.encode(pString);    if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  super.encode(pString);  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	15	None	add
426	[BUG]  [BUGGY]  if(pString.length()  ==  1)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  1)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  1)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
427	[BUG]  [BUGGY]  if(pString.length()  ==  2)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  2)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  2)  {  if(!Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
428	[BUG]  [BUGGY]  if(Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(Character.isDigit(pString.charAt(0)))  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(Character.isDigit(pString.charAt(0)))  {  return  pString;  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	9	None	replace
429	[BUG]  [BUGGY]  MutableCharacter.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  MutableCharacter.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	MutableCharacter.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
430	[BUG]  [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isUpperCase(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
431	[BUG]  [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isUpperCase(pString.toLowerCase()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isUpperCase(pString.toLowerCase()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isUpperCase(pString.toLowerCase()))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
432	[BUG]  [BUGGY]  Character.isLetter(pString.charAt(0))&&!Character.isUpperCase(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isLetter(pString.charAt(0))&&!Character.isUpperCase(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isLetter(pString.charAt(0))&&!Character.isUpperCase(pString.charAt(1)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
433	[BUG]  [BUGGY]  MutableCharacter.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  MutableCharacter.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	MutableCharacter.isUpperCase(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
434	[BUG]  [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isUpperCase(pString.substring(1)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isUpperCase(pString.substring(1)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isUpperCase(pString.substring(1)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	2	None	replace
435	[BUG]  [BUGGY]  return  this.charphone.encode(pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.charphone.encode(pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  this.charphone.encode(pString);	  return    this.encode(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	16	None	replace
436	[BUG]  [BUGGY]  return  pString.encode(this);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  pString.encode(this);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  pString.encode(this);	  return    this.encode(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	16	None	replace
437	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString;  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	10	None	replace
438	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString  + ", "  +  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString  + ", "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString  + ", "  +  pString;  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	10	None	replace
439	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString;  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	10	None	replace
440	[BUG]  [BUGGY]  return  caverphone(pString,  0,  pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  pString);	  return    caverphone(pString,    0);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	24	None	replace
441	[BUG]  [BUGGY]  return  caverphone(pString,  0,  pString.indexOf('.'));  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  0,  pString.indexOf('.'));  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  0,  pString.indexOf('.'));	  return    caverphone(pString,    0);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	24	None	replace
442	[BUG]  [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	38	None	replace
443	[BUG]  [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	38	None	replace
444	[BUG]  [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	38	None	replace
445	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase()  + ", ".toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase()  + ", ".toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString.toLowerCase()  + ", ".toLowerCase());	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	19	None	replace
446	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase()  + ".* ");  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase()  + ".* ");  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString.toLowerCase()  + ".* ");	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	19	None	replace
447	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase()  + ", ".toUpperCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase()  + ", ".toUpperCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString.toLowerCase()  + ", ".toUpperCase());	  return    caverphone(pString.toLowerCase());    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	19	None	replace
448	[BUG]  [BUGGY]  return  caverphone(pString,  true,  pString.toLowerCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  true,  pString.toLowerCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  true,  pString.toLowerCase());	  return    caverphone(pString,    true);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	22	None	replace
449	[BUG]  [BUGGY]  return  caverphone(pString,  true,  pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  true,  pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  true,  pString);	  return    caverphone(pString,    true);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	22	None	replace
450	[BUG]  [BUGGY]  return  caverphone(pString,  true,  pString.length());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  true,  pString.length());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  true,  pString.length());	  return    caverphone(pString,    true);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	22	None	replace
451	[BUG]  [BUGGY]  return  caverphone(pString,  true,  pString.toUpperCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  true,  pString.toUpperCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  true,  pString.toUpperCase());	  return    caverphone(pString,    true);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	22	None	replace
452	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver  ==  null)  {  return  caver.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver  ==  null)  {  return  caver.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone();  if(caver  ==  null)  {  return  caver.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
453	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  caverphone.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
454	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver  ==  null)  {  return  caverphone.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver  ==  null)  {  return  caverphone.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone();  if(caver  ==  null)  {  return  caverphone.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
455	[BUG]  [BUGGY]  Annotation  <  String>  pString  =  getChronology().endsWith( "Caverphone ")?  getCaverphone()  :  null;  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  pString  =  getChronology().endsWith( "Caverphone ")?  getCaverphone()  :  null;  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  pString  =  getChronology().endsWith( "Caverphone ")?  getCaverphone()  :  null;	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
456	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  cavercount.encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  cavercount.encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  cavercount.encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
457	[BUG]  [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  caver!encode(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  caver!encode(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Annotation  <  String>  caver  =  getCaverphone();  if(caver!=  null)  {  return  caver!encode(pString);  }	      if(pString    ==    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone.encode(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	28	None	replace
458	[BUG]  [BUGGY]  [Delete]  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  [Delete]  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	[Delete]	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
459	[BUG]  [BUGGY]  pendingCaverphones()  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  pendingCaverphones()  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	pendingCaverphones()  {  if(pString.length()  ==  0)  {  return  String.valueOf(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
460	[BUG]  [BUGGY]  pendingCaverphones()  {  if(pString!=  null)  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  pendingCaverphones()  {  if(pString!=  null)  {  return  String.valueOf(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	pendingCaverphones()  {  if(pString!=  null)  {  return  String.valueOf(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
461	[BUG]  [BUGGY]  pendingCaverphones()  {  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  pendingCaverphones()  {  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  return  String.valueOf(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	pendingCaverphones()  {  if(pString.length()  ==  0  ||  pString.length()  ==  0)  {  return  String.valueOf(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
462	[BUG]  [BUGGY]  pendingCaverphones()  {  if(pString.length()  ==  0  ||  pString.charAt(0)  ==  '-')  {  return  String.valueOf(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  pendingCaverphones()  {  if(pString.length()  ==  0  ||  pString.charAt(0)  ==  '-')  {  return  String.valueOf(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	pendingCaverphones()  {  if(pString.length()  ==  0  ||  pString.charAt(0)  ==  '-')  {  return  String.valueOf(pString);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
463	[BUG]  [BUGGY]  pendingCaverphones()  {  if(pString!=  null)  {  return  string.substring(0,  pString.length()  -  1);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  pendingCaverphones()  {  if(pString!=  null)  {  return  string.substring(0,  pString.length()  -  1);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	pendingCaverphones()  {  if(pString!=  null)  {  return  string.substring(0,  pString.length()  -  1);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
464	[BUG]  [BUGGY]  pendingCaverphones()  {  if(pString.length()  ==  0)  {  return  string.substring(0,  pString.length()  -  1);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  pendingCaverphones()  {  if(pString.length()  ==  0)  {  return  string.substring(0,  pString.length()  -  1);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	pendingCaverphones()  {  if(pString.length()  ==  0)  {  return  string.substring(0,  pString.length()  -  1);  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
465	[BUG]  [BUGGY]  pendingCaverphones()  {  if(pString!=  null)  {  return  String.valueOf(pString).toLowerCase();  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  pendingCaverphones()  {  if(pString!=  null)  {  return  String.valueOf(pString).toLowerCase();  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	pendingCaverphones()  {  if(pString!=  null)  {  return  String.valueOf(pString).toLowerCase();  }	      if(pString!=    null)    {    if(pString.length()    ==    0)    {    return    String.valueOf(pString);    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	32	None	replace
466	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString  + "., "  +  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString  + "., "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString  + "., "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString    +   ",   "    +    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	41	None	replace
467	[BUG]  [BUGGY]  if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
468	[BUG]  [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	35	None	replace
469	[BUG]  [BUGGY]  return  this.caverphone(pString);  if(pString!=  null)  {  return  this.caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  if(pString!=  null)  {  return  this.caverphone(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    if(pString!=  null)  {  return  this.caverphone(pString);  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	11	None	add
470	[BUG]  [BUGGY]  return  this.caverphone(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  this.caverphone(pString);  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  this.caverphone(pString);  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  this.caverphone(pString);  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    this.caverphone(pString);    if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  this.caverphone(pString);  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	11	None	add
471	[BUG]  [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.equals( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.equals( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(!pString.equals( " ")||  pString.equals( "- "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	27	None	replace
472	[BUG]  [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.equals( "] "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.equals( "] "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(!pString.equals( " ")||  pString.equals( "] "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	27	None	replace
473	[BUG]  [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.equals( "n "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.equals( "n "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(!pString.equals( " ")||  pString.equals( "n "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	27	None	replace
474	[BUG]  [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.equals( ": "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.equals( ": "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(!pString.equals( " ")||  pString.equals( ": "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	27	None	replace
475	[BUG]  [BUGGY]  Parchet.checkArgument(!pString.equals( "* "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(!pString.equals( "* "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(!pString.equals( "* "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	27	None	replace
476	[BUG]  [BUGGY]  allows(pString)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  allows(pString)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	allows(pString)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	27	None	replace
477	[BUG]  [BUGGY]  return(pString  ==  null)?  null  :  pString.toUpperCase();  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return(pString  ==  null)?  null  :  pString.toUpperCase();  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return(pString  ==  null)?  null  :  pString.toUpperCase();	  return    encode(pString);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	14	None	replace
478	[BUG]  [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	37	None	replace
479	[BUG]  [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	37	None	replace
480	[BUG]  [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	37	None	replace
481	[BUG]  [BUGGY]  if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null  ||  pString.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null    ||    pString.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	37	None	replace
482	[BUG]  [BUGGY]  return  caverphone(pString,  null,  pString);  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  pString);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  pString);	  return    caverphone(pString,    null);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	21	None	replace
483	[BUG]  [BUGGY]  return  caverphone(pString,  null,  pString.trim());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  pString.trim());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  pString.trim());	  return    caverphone(pString,    null);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	21	None	replace
484	[BUG]  [BUGGY]  return  caverphone(pString,  null,  pString.toUpperCase());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  pString.toUpperCase());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  pString.toUpperCase());	  return    caverphone(pString,    null);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	21	None	replace
485	[BUG]  [BUGGY]  return  caverphone(pString,  null,  pString.toCharArray());  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString,  null,  pString.toCharArray());  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  caverphone(pString,  null,  pString.toCharArray());	  return    caverphone(pString,    null);    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	21	None	replace
486	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(caverphone(pString.toLowerCase())!=  null)  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(caverphone(pString.toLowerCase())!=  null)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(caverphone(pString.toLowerCase())!=  null)  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	18	None	add
487	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  return  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(pString!=  null)  {  return  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(pString!=  null)  {  return  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	18	None	add
488	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(caverphone(pString.toLowerCase())  ==  null)  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(caverphone(pString.toLowerCase())  ==  null)  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(caverphone(pString.toLowerCase())  ==  null)  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	18	None	add
489	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(caverphone(pString.toLowerCase())!=  null)  {  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(caverphone(pString.toLowerCase())!=  null)  {  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(caverphone(pString.toLowerCase())!=  null)  {  String  caverphone(pString.toLowerCase());  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	18	None	add
490	[BUG]  [BUGGY]  return  caverphone(pString.toLowerCase());  if(caverphone(pString.toLowerCase())!=  null)  {  return  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  caverphone(pString.toLowerCase());  if(caverphone(pString.toLowerCase())!=  null)  {  return  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return    caverphone(pString.toLowerCase());    if(caverphone(pString.toLowerCase())!=  null)  {  return  caverphone(pString.toLowerCase());  }  else  {  return  caverphone(pString.toLowerCase());  }	  	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	18	None	add
491	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + "., "  +  pString;  }  [CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + "., "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + "., "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString    +   ",   "    +    pString;    }    	non-compiled	[CE]  Caverphone  is  not  abstract  and  does  not  override  abstract  method  encode(String)  in  StringEncoder	36	None	replace
492	[BUG]  [BUGGY]  CharSequence  caverphone(pString,  '.');  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharSequence  caverphone(pString,  '.');  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharSequence  caverphone(pString,  '.');	      CharSequence    caverphone(pString);    	non-compiled	[CE]  	5	None	replace
493	[BUG]  [BUGGY]  CharSequence  caverphone(pString,  this);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  CharSequence  caverphone(pString,  this);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	CharSequence  caverphone(pString,  this);	      CharSequence    caverphone(pString);    	non-compiled	[CE]  	5	None	replace
494	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString  + ", "  +  pString;  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString  + ", "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  pString  + ", "  +  pString;  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	31	None	replace
495	[BUG]  [BUGGY]  if(pString!=  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  caverphone(pString);  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString!=  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  caverphone(pString);  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString!=  null)  {  String  pString  =  getCaverphone();  if(pString!=  null)  {  return  caverphone(pString);  }	      if(pString!=    null)    {    String    caverphone    =    getCaverphone();    if(caverphone!=    null)    {    return    caverphone(pString);    }    	non-compiled	[CE]  	31	None	replace
496	[BUG]  [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(!pString.equals( " ")||  pString.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString    ==    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
497	[BUG]  [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.startsWith( ": "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Parchet.checkArgument(!pString.equals( " ")||  pString.startsWith( ": "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Parchet.checkArgument(!pString.equals( " ")||  pString.startsWith( ": "))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString    ==    null)    {    if(!pString.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
498	[BUG]  [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isDigit(pString.toLowerCase()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isDigit(pString.toLowerCase()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isDigit(pString.toLowerCase()))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
499	[BUG]  [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
500	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0))&&!Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0))&&!Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0))&&!Character.isDigit(pString.charAt(0))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
501	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0))&&!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0))&&!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0))&&!Character.isDigit(pString.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
502	[BUG]  [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isDigit(pString.toLowerCase())||!Character.isDigit(pString.toLowerCa  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isDigit(pString.toLowerCase())||!Character.isDigit(pString.toLowerCa  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	MutableString  caverphone(pString.toLowerCase())  {  if(!Character.isDigit(pString.toLowerCase())||!Character.isDigit(pString.toLowerCa	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
503	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0))||  pString.charAt(0)  ==  '-')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0))||  pString.charAt(0)  ==  '-')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0))||  pString.charAt(0)  ==  '-')  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
504	[BUG]  [BUGGY]  Character.isDigit(pString.charAt(0))||  pString.charAt(0)  ==  '/')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  Character.isDigit(pString.charAt(0))||  pString.charAt(0)  ==  '/')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	Character.isDigit(pString.charAt(0))||  pString.charAt(0)  ==  '/')  {  throw  new  IllegalArgumentException( " ");  }	      if(pString.length()    ==    0)    {    if(!Character.isDigit(pString.charAt(0)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
505	[BUG]  [BUGGY]  return  super.encode(pString,  charEncoding);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  return  super.encode(pString,  charEncoding);  [BUGGY]    }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	return  super.encode(pString,  charEncoding);	  return    super.encode(pString);    	non-compiled	[CE]  	17	None	replace
506	[BUG]  [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(cache!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  	34	None	replace
507	[BUG]  [BUGGY]  if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(cache  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString.length()  ==  0)  {  return  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString.length()    ==    0)    {    return    pString;    }    	non-compiled	[CE]  	34	None	replace
508	[BUG]  [BUGGY]  char  c  =  pString.charAt(0);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  char  c  =  pString.charAt(0);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	char  c  =  pString.charAt(0);	      String    caverphone(pString);    	non-compiled	[CE]  	1	None	replace
509	[BUG]  [BUGGY]  char  c  =  pString.charAt(pString.length()  -  1);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  char  c  =  pString.charAt(pString.length()  -  1);  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	char  c  =  pString.charAt(pString.length()  -  1);	      String    caverphone(pString);    	non-compiled	[CE]  	1	None	replace
510	[BUG]  [BUGGY]  String  pString  =  pString.trim().toLowerCase();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  String  pString  =  pString.trim().toLowerCase();  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	String  pString  =  pString.trim().toLowerCase();	      String    caverphone(pString);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
511	[BUG]  [BUGGY]  char  pString  =  pString.trim();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  char  pString  =  pString.trim();  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	char  pString  =  pString.trim();	      String    caverphone(pString);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
512	[BUG]  [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + "= "  +  pString;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + "= "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(caverphone(pString)!=  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + "= "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString    +   "=   "    +    pString;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
513	[BUG]  [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ".= "  +  pString;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ".= "  +  pString;  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString  ==  null)  {  String  pString  =  pString.toLowerCase();  if(pString  ==  null)  {  return  pString  + ".= "  +  pString;  }	      if(pString!=    null)    {    String    pString    =    pString.toLowerCase();    if(pString    ==    null)    {    return    pString    +   "=   "    +    pString;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
514	[BUG]  [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
515	[BUG]  [BUGGY]  if(pString.length()  ==  1)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  1)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  1)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
516	[BUG]  [BUGGY]  if(pString.length()  ==  2)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  2)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  2)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(0));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
517	[BUG]  [BUGGY]  if(pString.length()  ==  1)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  1)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  1)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
518	[BUG]  [BUGGY]  if(pString.length()  ==  2)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  2)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  2)  {  if(!Character.isUpperCase(pString.charAt(0)))  {  return  String.valueOf(pString.charAt(1));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
519	[BUG]  [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  String.valueOf(pString.charAt(0));  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  String.valueOf(pString.charAt(0));  }  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	if(pString.length()  ==  0)  {  if(!Character.isUpperCase(pString.charAt(1)))  {  return  String.valueOf(pString.charAt(0));  }	      if(pString.length()    ==    0)    {    if(!Character.isUpperCase(pString.charAt(0)))    {    return    String.valueOf(pString.charAt(0));    }    	non-compiled	[CE]  	3	None	replace
520	[BUG]  [BUGGY]  char  c  =  pString.toLowerCase();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encode(String  pString)  {    [BUGGY]  char  c  =  pString.toLowerCase();  [BUGGY]    return  caverphone(pString);  }  [CLASS]  Caverphone  [METHOD]  encode  [RETURN_TYPE]  String  String  pString  [VARIABLES]  boolean  String  pString  	projects/Codec1/src/java/org/apache/commons/codec/language/Caverphone.java	0.31622776601683794	168	168	5	replace	char  c  =  pString.toLowerCase();	      String    caverphone(pString.toLowerCase());    	non-compiled	[CE]  	4	None	replace
