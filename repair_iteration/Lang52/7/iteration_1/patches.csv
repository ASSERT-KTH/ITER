bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write('   "'  +  ch  +  1);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  out.write('   "'  +  ch  +  1);  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	out.write('   "'  +  ch  +  1);	  out.write('   "'    +    ch);    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  out.write(''  +  ch);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  out.write(''  +  ch);  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	out.write(''  +  ch);	  out.write('   "'    +    ch);    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  out.write('   "'  +  str);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  out.write('   "'  +  str);  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	out.write('   "'  +  str);	  out.write('   "'    +    escapeSingleQuote);    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write(ch);  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  while(escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write(ch);  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	while(escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write(ch);  }	      if(escapeSingleQuote)    {    out.write('   "');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  while(!escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write(ch);  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  while(!escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write(ch);  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	while(!escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write(ch);  }	      if(escapeSingleQuote)    {    out.write('   "');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  while(!escapeSingleQuote)  {  out.write('   "');  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  while(!escapeSingleQuote)  {  out.write('   "');  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	while(!escapeSingleQuote)  {  out.write('   "');  }	      if(escapeSingleQuote)    {    out.write('   "');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write('   "');  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  while(escapeSingleQuote)  {  out.write('   "');  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	while(escapeSingleQuote)  {  out.write('   "');  }	      if(escapeSingleQuote)    {    out.write('   "');    }    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	if(escapeSingleQuote)  {  out.write('');  }	      out.write('');    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  break;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  break;  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	if(escapeSingleQuote)  {  out.write('');  }  else  {  break;  }	      out.write('');    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  out.write('',  ch);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  out.write('',  ch);  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	out.write('',  ch);	  out.write('   "',    ch);    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  out.write('   "',  ch  +  1);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  out.write('   "',  ch  +  1);  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	out.write('   "',  ch  +  1);	  out.write('   "',    ch);    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  out.write('   "',  char  ch);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  out.write('   "',  char  ch);  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	out.write('   "',  char  ch);	  out.write('   "',    ch);    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write('   "');  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  while(escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write('   "');  }  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	while(escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write('   "');  }	  if(escapeSingleQuote)    {    out.write('   "');    }    else    {    out.write('   "');    }    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  out.write('   "');  }  else  {  out.write('   "');  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  out.write('   "');  }  else  {  out.write('   "');  }  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	out.write('   "');  }  else  {  out.write('   "');  }	  if(escapeSingleQuote)    {    out.write('   "');    }    else    {    out.write('   "');    }    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('   "');  break;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  if(escapeSingleQuote)  {  out.write('   "');  break;  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	if(escapeSingleQuote)  {  out.write('   "');  break;  }	      out.write('   "');    break;    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  break;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  if(escapeSingleQuote)  {  out.write('');  break;  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	if(escapeSingleQuote)  {  out.write('');  break;  }	      out.write('');    break;    	non-compiled	[CE]  	9	None	replace
17	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  if(escapeSingleQuote)  {  out.write('');  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	if(escapeSingleQuote)  {  out.write('');  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      out.write('');    break;    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  break;  }  else  {  out.write('');  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  if(escapeSingleQuote)  {  out.write('');  break;  }  else  {  out.write('');  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	if(escapeSingleQuote)  {  out.write('');  break;  }  else  {  out.write('');  }	      out.write('');    break;    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  Out.write('   "');  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  Out.write('   "');  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	Out.write('   "');	  if(escapeSingleQuote)    {    out.write('   "');    }    else    {    out.write('   "');    }    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  Out.write('');  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  Out.write('');  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	Out.write('');	      if(escapeSingleQuote)    {    out.write('   "');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	2	None	replace
21	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('   "');  break;  }  else  {  out.write(ch);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  if(escapeSingleQuote)  {  out.write('   "');  break;  }  else  {  out.write(ch);  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	if(escapeSingleQuote)  {  out.write('   "');  break;  }  else  {  out.write(ch);  }	      out.write('   "');    break;    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  out.write('   "'  +  escapeSingleQuote  +  1);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  out.write('   "'  +  escapeSingleQuote  +  1);  [BUGGY]    break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	out.write('   "'  +  escapeSingleQuote  +  1);	  out.write('   "'    +    escapeSingleQuote);    	non-compiled	[CE]  	11	None	replace
23	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  break;  }  else  {  out.write(ch);  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  if(escapeSingleQuote)  {  out.write('');  break;  }  else  {  out.write(ch);  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	if(escapeSingleQuote)  {  out.write('');  break;  }  else  {  out.write(ch);  }	      out.write('');    break;    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');    [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }  [BUGGY]    out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }	      out.write('');    	non-compiled	[CE]  	3	None	replace
