bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write(''',  ch  +  1);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''',  ch  +  1);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  ch  +  1);  break;	  out.write(''',    ch);    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
2	[BUG]  [BUGGY]  out.write(''',  ch,  escapeSingleQuote);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''',  ch,  escapeSingleQuote);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  ch,  escapeSingleQuote);  break;	  out.write(''',    ch);    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
3	[BUG]  [BUGGY]  out.write(''',  0xf);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''',  0xf);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  0xf);  break;	  out.write(''',    ch);    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
4	[BUG]  [BUGGY]  if(ch  ||  Character.isWhitespace(escapeSingleQuote))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(ch  ||  Character.isWhitespace(escapeSingleQuote))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(ch  ||  Character.isWhitespace(escapeSingleQuote))  {	  if(escapeSingleQuote    ||    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
5	[BUG]  [BUGGY]  if(Character.isWhitespace(ch)||  escapeSingleQuote  ||  Character.isWhitespace(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(Character.isWhitespace(ch)||  escapeSingleQuote  ||  Character.isWhitespace(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(Character.isWhitespace(ch)||  escapeSingleQuote  ||  Character.isWhitespace(ch))  {	  if(escapeSingleQuote    ||    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
6	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {	  if(escapeSingleQuote    ||    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
7	[BUG]  [BUGGY]  out.write( "u000 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "u000 "  +  hex(ch));  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "u000 "  +  hex(ch));  break;	  out.write(   "u00   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
8	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch)+  1);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "u00 "  +  hex(ch)+  1);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "u00 "  +  hex(ch)+  1);  break;	  out.write(   "u00   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
9	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ ",' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' "  +  hex(ch)+ ",' ");  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+ ",' ");	  out.write(   "'   "    +    hex(ch)+   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
10	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ "' ",  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' "  +  hex(ch)+ "' ",  escapeSingleQuote);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+ "' ",  escapeSingleQuote);	  out.write(   "'   "    +    hex(ch)+   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
11	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ "', ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' "  +  hex(ch)+ "', ");  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+ "', ");	  out.write(   "'   "    +    hex(ch)+   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
12	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( ".s.IFJDCS ").toCharArray();  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS ").toCharArray();	  out.write(   ".s.IFJDCS   ".toCharArray());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
13	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeJavaStyleString)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeJavaStyleString)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeJavaStyleString)  {	  if(escapeSingleQuote    &&    escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
14	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString.equals(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeJavaStyleString.equals(ch))  {	  if(escapeSingleQuote    &&    escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
15	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString.equals( " "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString.equals( " "))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeJavaStyleString.equals( " "))  {	  if(escapeSingleQuote    &&    escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
16	[BUG]  [BUGGY]  out.write(''  +  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''  +  hex(ch)+  1);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''  +  hex(ch)+  1);	  out.write(''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
17	[BUG]  [BUGGY]  out.write(''  +  hex(ch)+ "' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''  +  hex(ch)+ "' ");  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''  +  hex(ch)+ "' ");	  out.write(''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
18	[BUG]  [BUGGY]  out.write(''  +  hex(ch)+ "');  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''  +  hex(ch)+ "');  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''  +  hex(ch)+ "');	  out.write(''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
19	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  Character.isWhitespace(ch)||  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
20	[BUG]  [BUGGY]  if(ch  &&  Character.isWhitespace(escapeSingleQuote)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(ch  &&  Character.isWhitespace(escapeSingleQuote)||  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(ch  &&  Character.isWhitespace(escapeSingleQuote)||  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
21	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote  ||  isJavaStyleString(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote  ||  isJavaStyleString(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote  ||  isJavaStyleString(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
22	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  ==  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  ==  0xf)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  ==  0xf)  {	  if(escapeSingleQuote    ||    escapeSingleQuote    ||    ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
23	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  <  =  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  <  =  0xf)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  <  =  0xf)  {	  if(escapeSingleQuote    ||    escapeSingleQuote    ||    ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
24	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  >=  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  >=  0xf)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  >=  0xf)  {	  if(escapeSingleQuote    ||    escapeSingleQuote    ||    ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
25	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  ||  ch  >  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  ||  ch  >  0xf)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote  ||  ch  >  0xf)  {	  if(escapeSingleQuote    ||    escapeSingleQuote    ||    ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
26	[BUG]  [BUGGY]  out.write( "'' "  +  hex(ch)+ "' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "'' "  +  hex(ch)+ "' ");  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "'' "  +  hex(ch)+ "' ");	  out.write(   "''   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
27	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ ",' ");  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' "  +  hex(ch)+ ",' ");  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+ ",' ");  break;	  out.write(   "'   "    +    hex(ch)+   "'   ");    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
28	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||!Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||!Character.isDigit(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  Character.isWhitespace(ch)||!Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||!Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
29	[BUG]  [BUGGY]  if(Character.isWhitespace(ch)||!Character.isDigit(escapeSingleQuote))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(Character.isWhitespace(ch)||!Character.isDigit(escapeSingleQuote))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(Character.isWhitespace(ch)||!Character.isDigit(escapeSingleQuote))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||!Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
30	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch)||!Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch)||!Character.isDigit(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isDigit(ch)||!Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||!Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
31	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch)||  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch)||  escapeSingleQuote.equals(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch)||  escapeSingleQuote.equals(ch))  {	  if(!escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
32	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  str))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  str))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  str))  {	  if(!escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
33	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(hex(ch)))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(hex(ch)))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote.equals(hex(ch)))  {	  if(!escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
34	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+  2);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' "  +  hex(ch)+  2);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+  2);  break;	  out.write(   "'       "    +    hex(ch)+    1);    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
35	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)&&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)&&  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  Character.isWhitespace(ch)&&  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)&&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
36	[BUG]  [BUGGY]  if(ch  &&  Character.isWhitespace(escapeSingleQuote)&&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(ch  &&  Character.isWhitespace(escapeSingleQuote)&&  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(ch  &&  Character.isWhitespace(escapeSingleQuote)&&  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)&&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
37	[BUG]  [BUGGY]  if(Character.isWhitespace(ch)&&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(Character.isWhitespace(ch)&&  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(Character.isWhitespace(ch)&&  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)&&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
38	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote!=  0)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote!=  0)  {	  if(escapeSingleQuote    &&    escapeSingleQuote    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
39	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  ==  0)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote  ==  0)  {	  if(escapeSingleQuote    &&    escapeSingleQuote    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
40	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  <  =  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  <  =  0)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote  <  =  0)  {	  if(escapeSingleQuote    &&    escapeSingleQuote    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
41	[BUG]  [BUGGY]  out.write( "' ");  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' ");  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' ");  break;	  out.write('');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
42	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( ".s.IFJDCS ".charAt(ch));  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS ".charAt(ch));  break;	  out.write('');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
43	[BUG]  [BUGGY]  Out.write( "'   "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  Out.write( "'   "  +  hex(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write( "'   "  +  hex(ch));	  Out.write(   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
44	[BUG]  [BUGGY]  Out.write( "'   "  +  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  Out.write( "'   "  +  ch);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write( "'   "  +  ch);	  Out.write(   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
45	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote)  {	  if(!escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
46	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch,  sz))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch,  sz))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  Character.isWhitespace(ch,  sz))  {	  if(!escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
47	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isJavaStyle(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  Character.isJavaStyle(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  Character.isJavaStyle(ch))  {	  if(!escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
48	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {	  if(!escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
49	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch)||  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch)||  escapeSingleQuote.equals(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch)||  escapeSingleQuote.equals(ch))  {	  if(escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
50	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(hex(ch)))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(hex(ch)))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote.equals(hex(ch)))  {	  if(escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
51	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  str))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  str))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  str))  {	  if(escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
52	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ",  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( ".s.IFJDCS ",  hex(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS ",  hex(ch));	  out.write(   ".s.IFJDCS   "    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
53	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  str.charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( ".s.IFJDCS "  +  str.charAt(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS "  +  str.charAt(ch));	  out.write(   ".s.IFJDCS   "    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
54	[BUG]  [BUGGY]  out.write( "''   "  +  hex(ch)+  1);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "''   "  +  hex(ch)+  1);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "''   "  +  hex(ch)+  1);  break;	  out.write(   "''   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
55	[BUG]  [BUGGY]  out.write( "''   "  +  hex(ch)+ "' ");  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "''   "  +  hex(ch)+ "' ");  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "''   "  +  hex(ch)+ "' ");  break;	  out.write(   "''   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
56	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isJavaStyle(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  Character.isJavaStyle(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  Character.isJavaStyle(ch))  {	  if(escapeSingleQuote    &&    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
57	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)||  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isJavaStyle(ch)||  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
58	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)||  escapeSingleQuote  {  false)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)||  escapeSingleQuote  {  false)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isJavaStyle(ch)||  escapeSingleQuote  {  false)  {	  if(escapeSingleQuote    &&    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
59	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "u00000 "  +  hex(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "u00000 "  +  hex(ch));	  out.write(   "u00   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
60	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
61	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaIdentifierPart(ch)||!Character.isJavaIdentifierPart(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaIdentifierPart(ch)||!Character.isJavaIdentifierPart(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isJavaIdentifierPart(ch)||!Character.isJavaIdentifierPart(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
62	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch)||  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch)||  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
63	[BUG]  [BUGGY]  Out.write(''',  ch  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  Out.write(''',  ch  +  1);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write(''',  ch  +  1);	  Out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
64	[BUG]  [BUGGY]  Out.write(''',  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  Out.write(''',  hex(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write(''',  hex(ch));	  Out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
65	[BUG]  [BUGGY]  Out.write(''',  char  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  Out.write(''',  char  ch);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write(''',  char  ch);	  Out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
66	[BUG]  [BUGGY]  Out.write(''',  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  Out.write(''',  ch,  escapeSingleQuote);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write(''',  ch,  escapeSingleQuote);	  Out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
67	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "u0000 "  +  hex(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "u0000 "  +  hex(ch));	  out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
68	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ==  0)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  ==  0)  {	  if(escapeSingleQuote    ||    escapeSingleQuote    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
69	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote!=  0)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote!=  0)  {	  if(escapeSingleQuote    ||    escapeSingleQuote    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
70	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >=  0)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  >=  0)  {	  if(escapeSingleQuote    ||    escapeSingleQuote    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
71	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write('''  +  hex(ch)+  1);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write('''  +  hex(ch)+  1);	  out.write('''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
72	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+ "' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write('''  +  hex(ch)+ "' ");  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write('''  +  hex(ch)+ "' ");	  out.write('''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
73	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write('''  +  hex(ch)+  2);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write('''  +  hex(ch)+  2);	  out.write('''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
74	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  1);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write('''  +  hex(ch)+  1);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write('''  +  hex(ch)+  1);  break;	  out.write('''    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
75	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+ "' ");  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write('''  +  hex(ch)+ "' ");  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write('''  +  hex(ch)+ "' ");  break;	  out.write('''    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
76	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  2);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write('''  +  hex(ch)+  2);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write('''  +  hex(ch)+  2);  break;	  out.write('''    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
77	[BUG]  [BUGGY]  Out.write( ".s.IFJDCS ".charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  Out.write( ".s.IFJDCS ".charAt(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write( ".s.IFJDCS ".charAt(ch));	  Out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
78	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(0));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS "  +  charAt(0));	  out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
79	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( ".s.IFJDCS ");  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS ");	  out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
80	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( ".s.IFJDCS ").charAt(0);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS ").charAt(0);	  out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
81	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch)||  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch)||  escapeSingleQuote.equals(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch)||  escapeSingleQuote.equals(ch))  {	  if(escapeSingleQuote    ||    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
82	[BUG]  [BUGGY]  if(ch  ||  escapeSingleQuote.equals(escapeSingleQuote))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(ch  ||  escapeSingleQuote.equals(escapeSingleQuote))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(ch  ||  escapeSingleQuote.equals(escapeSingleQuote))  {	  if(escapeSingleQuote    ||    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
83	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(hex(ch)))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(hex(ch)))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote.equals(hex(ch)))  {	  if(escapeSingleQuote    ||    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
84	[BUG]  [BUGGY]  if(Character.isWhitespace(ch)||  Character.isJavaStyle(escapeSingleQuote))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(Character.isWhitespace(ch)||  Character.isJavaStyle(escapeSingleQuote))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(Character.isWhitespace(ch)||  Character.isJavaStyle(escapeSingleQuote))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
85	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)||  Character.isJavaStyle(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)||  Character.isJavaStyle(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isJavaStyle(ch)||  Character.isJavaStyle(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
86	[BUG]  [BUGGY]  out.write(''',  ch  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''',  ch  +  1);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  ch  +  1);	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
87	[BUG]  [BUGGY]  out.write(''',  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''',  hex(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  hex(ch));	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
88	[BUG]  [BUGGY]  out.write(''',  ch  +  1,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''',  ch  +  1,  sz);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  ch  +  1,  sz);	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
89	[BUG]  [BUGGY]  out.write(''',  0xf);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''',  0xf);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  0xf);	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
90	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals( " "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals( " "))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote.equals( " "))  {	  if(!escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
91	[BUG]  [BUGGY]  Out.write( "'' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  Out.write( "'' ");  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write( "'' ");	  Out.write(   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
92	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isJavaStyle(ch)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(escapeSingleQuote    &&    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
93	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote  &&  isJavaStyleString(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote  &&  isJavaStyleString(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote  &&  isJavaStyleString(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
94	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {	  if(!escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
95	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ "'' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' "  +  hex(ch)+ "'' ");  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+ "'' ");	  out.write(   "'   "    +    hex(ch)+   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
96	[BUG]  [BUGGY]  out.write( "u00 "  +  charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "u00 "  +  charAt(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "u00 "  +  charAt(ch));	  out.write(   ".s.IFJDCS   "    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
97	[BUG]  [BUGGY]  out.write( "u000 "  +  charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "u000 "  +  charAt(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "u000 "  +  charAt(ch));	  out.write(   ".s.IFJDCS   "    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
98	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch)||  hex(ch)!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch)||  hex(ch)!=  0)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch)||  hex(ch)!=  0)  {	  if(escapeSingleQuote    ||    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
99	[BUG]  [BUGGY]  if(str.equals(ch)||  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(str.equals(ch)||  escapeSingleQuote.equals(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(str.equals(ch)||  escapeSingleQuote.equals(ch))  {	  if(escapeSingleQuote    ||    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
100	[BUG]  [BUGGY]  if(ch  &&  escapeSingleQuote.equals(escapeSingleQuote))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(ch  &&  escapeSingleQuote.equals(escapeSingleQuote))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(ch  &&  escapeSingleQuote.equals(escapeSingleQuote))  {	  if(escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
101	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch)||  escapeJavaStyleString.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch)||  escapeJavaStyleString.equals(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch)||  escapeJavaStyleString.equals(ch))  {	  if(escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
102	[BUG]  [BUGGY]  Out.write(''',  hex(ch),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  Out.write(''',  hex(ch),  escapeSingleQuote);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write(''',  hex(ch),  escapeSingleQuote);	  Out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
103	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch)&&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch)&&  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  Character.isWhitespace(ch)&&  escapeSingleQuote)  {	  if(!escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
104	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch)&&  isJavaStyleString(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch)&&  isJavaStyleString(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  Character.isWhitespace(ch)&&  isJavaStyleString(ch))  {	  if(!escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
105	[BUG]  [BUGGY]  if(ch  ||  escapeSingleQuote  ||  ch  >  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(ch  ||  escapeSingleQuote  ||  ch  >  0xf)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(ch  ||  escapeSingleQuote  ||  ch  >  0xf)  {	  if(escapeSingleQuote    ||    escapeSingleQuote    ||    ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
106	[BUG]  [BUGGY]  out.write(''',  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write(''',  hex(ch));  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  hex(ch));  break;	  out.write(''',    ch);    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
107	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch).toCharArray());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch).toCharArray());  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS "  +  hex(ch).toCharArray());	  out.write(   ".s.IFJDCS   ".toCharArray());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
108	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  hex))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  hex))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  hex))  {	  if(!escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
109	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString  >  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString  >  0)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeJavaStyleString  >  0)  {	  if(escapeSingleQuote    &&    escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
110	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ "'' ");  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' "  +  hex(ch)+ "'' ");  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+ "'' ");  break;	  out.write(   "'   "    +    hex(ch)+   "'   ");    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
111	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  >=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  >=  0)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote  >=  0)  {	  if(escapeSingleQuote    &&    escapeSingleQuote    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
112	[BUG]  [BUGGY]  if(ch  &&  Character.isWhitespace(ch)||!Character.isDigit(escapeSingleQuote))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(ch  &&  Character.isWhitespace(ch)||!Character.isDigit(escapeSingleQuote))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(ch  &&  Character.isWhitespace(ch)||!Character.isDigit(escapeSingleQuote))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||!Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
113	[BUG]  [BUGGY]  out.write( "'' "  +  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "'' "  +  hex(ch)+  1);  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "'' "  +  hex(ch)+  1);	  out.write(   "''   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
114	[BUG]  [BUGGY]  if(Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(escapeSingleQuote))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(escapeSingleQuote))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(escapeSingleQuote))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
115	[BUG]  [BUGGY]  if(ch  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(escapeSingleQuote))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(ch  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(escapeSingleQuote))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(ch  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(escapeSingleQuote))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
116	[BUG]  [BUGGY]  out.write( "/.s.IFJDCS "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "/.s.IFJDCS "  +  hex(ch));  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "/.s.IFJDCS "  +  hex(ch));	  out.write(   ".s.IFJDCS   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
117	[BUG]  [BUGGY]  out.write( "/.s.IFJDCS ".toCharArray());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "/.s.IFJDCS ".toCharArray());  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "/.s.IFJDCS ".toCharArray());	  out.write(   ".s.IFJDCS   ".toCharArray());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
118	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  ''))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  ''))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  ''))  {	  if(!escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
119	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  0xf))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  0xf))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  0xf))  {	  if(!escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
120	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isDigit(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
121	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isISOControl(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isISOControl(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isISOControl(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
122	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString,  ch)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString,  ch)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeJavaStyleString,  ch)  {	  if(escapeSingleQuote    &&    escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
123	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >  0xf)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  >  0xf)  {	  if(escapeSingleQuote    ||    escapeSingleQuote    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
124	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  ''))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  ''))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch,  ''))  {	  if(escapeSingleQuote    &&    escapeSingleQuote.equals(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
125	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch,  '''))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch,  '''))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  Character.isWhitespace(ch,  '''))  {	  if(!escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
126	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch,  ''))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch,  ''))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  Character.isWhitespace(ch,  ''))  {	  if(!escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
127	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)&&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch)&&  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isJavaStyle(ch)&&  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
128	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    Character.isJavaStyle(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
129	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||  Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch)||  Character.isDigit(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  Character.isWhitespace(ch)||  Character.isDigit(ch))  {	  if(escapeSingleQuote    ||    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
130	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ "' ",  escapeSingleQuote);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' "  +  hex(ch)+ "' ",  escapeSingleQuote);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+ "' ",  escapeSingleQuote);  break;	  out.write(   "'   "    +    hex(ch)+   "'   ");    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
131	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isDigit(ch)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isDigit(ch)||  escapeSingleQuote)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isDigit(ch)||  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch)||!Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
132	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)/  1);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  out.write( "' "  +  hex(ch)/  1);  break;  [BUGGY]      if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)/  1);  break;	  out.write(   "'       "    +    hex(ch)+    1);    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
133	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote  &&  Character.isWhitespace(ch))  {	  if(!escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
134	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote  &&  ch  >  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote  &&  ch  >  0xf)  {  [BUGGY]      out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote  &&  ch  >  0xf)  {	  if(!escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
