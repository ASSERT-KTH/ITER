bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    out.write( "' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]    out.write( "' ");  [BUGGY]  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	    out.write( "' ");		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
2	[BUG]  [BUGGY]    out.write( "' "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]    out.write( "' "  +  hex(ch));  [BUGGY]  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	    out.write( "' "  +  hex(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
3	[BUG]  [BUGGY]    out.write('');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]    out.write('');  [BUGGY]  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	    out.write('');		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
4	[BUG]  [BUGGY]    out.write( ".s.IFJDCS ".charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]    out.write( ".s.IFJDCS ".charAt(ch));  [BUGGY]  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	    out.write( ".s.IFJDCS ".charAt(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
5	[BUG]  [BUGGY]    out.write( "' "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]    out.write( "' "  +  hex(ch));  break;  [BUGGY]  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	    out.write( "' "  +  hex(ch));  break;		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
6	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  [BUGGY]  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {	if  (escapeSingleQuote)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
7	[BUG]  [BUGGY]  if(!escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]  if(!escapeSingleQuote)  {  [BUGGY]  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote)  {	if  (escapeSingleQuote)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
8	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  [BUGGY]  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {	if  (escapeSingleQuote)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
9	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [BUGGY]  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch))  {	if  (escapeSingleQuote)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
10	[BUG]  [BUGGY]    out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]    out.write(''');  [BUGGY]  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	    out.write(''');		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
11	[BUG]  [BUGGY]    out.write(''');  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]    out.write(''');  break;  [BUGGY]  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	    out.write(''');  break;		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
12	[BUG]  [BUGGY]    Out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  if  (ch  >  0xf)  {  out.write( "\\u00 "  +  hex(ch));  }  else  {  out.write( "\\u000 "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  [BUGGY]    Out.write(''');  [BUGGY]  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	    Out.write(''');		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
