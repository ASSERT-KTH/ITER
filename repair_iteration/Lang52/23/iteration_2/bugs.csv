bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".toCharArray());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( ".s.IFJDCS ".toCharArray());  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS ".toCharArray());	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
2	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ "' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( "' "  +  hex(ch)+ "' ");  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+ "' ");	      out.write(   "'   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
3	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( "u00 "  +  hex(ch));  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "u00 "  +  hex(ch));	      out.write(   "'   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
4	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(ch));  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS "  +  charAt(ch));	      out.write(   ".s.IFJDCS   ".charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
5	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch));  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS "  +  hex(ch));	      out.write(   ".s.IFJDCS   ".charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
6	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ "' ");  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( "' "  +  hex(ch)+ "' ");  break;  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "' "  +  hex(ch)+ "' ");  break;	      out.write(   "'   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
7	[BUG]  [BUGGY]  out.write(''',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write(''',  ch);  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  ch);	      out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
8	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote)  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
9	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
10	[BUG]  [BUGGY]  out.write(''',  ch);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write(''',  ch);  break;  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''',  ch);  break;	      out.write(''');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
11	[BUG]  [BUGGY]  out.write('');  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write('');  break;  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write('');  break;	      out.write(''');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
12	[BUG]  [BUGGY]  Out.write(''',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  Out.write(''',  ch);  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write(''',  ch);	      Out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
13	[BUG]  [BUGGY]  Out.write( "' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  Out.write( "' ");  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write( "' ");	      Out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
14	[BUG]  [BUGGY]  Out.write('');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  Out.write('');  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	Out.write('');	      Out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
15	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
16	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  >  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  >  0xf)  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  ||  ch  >  0xf)  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
17	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch))  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  Character.isWhitespace(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
18	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote)  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
19	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
20	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch))  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isJavaStyle(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
21	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  >  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  >  0)  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote  >  0)  {	  if(escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
22	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {	  if(escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
23	[BUG]  [BUGGY]  out.write( "'' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( "'' ");  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "'' ");	      out.write(   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
24	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  &&  escapeJavaStyleString)  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  escapeJavaStyleString)  {	  if(escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
25	[BUG]  [BUGGY]  out.write( "u000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( "u000 "  +  hex(ch));  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "u000 "  +  hex(ch));	      out.write(   ".s.IFJDCS   ".charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
26	[BUG]  [BUGGY]  out.write('''  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write('''  +  hex(ch));  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write('''  +  hex(ch));	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
27	[BUG]  [BUGGY]  out.write(''  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write(''  +  hex(ch));  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write(''  +  hex(ch));	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
28	[BUG]  [BUGGY]  out.write( "'' "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( "'' "  +  hex(ch));  break;  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "'' "  +  hex(ch));  break;	      out.write(   "'   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
29	[BUG]  [BUGGY]  out.write( "'   "  +  hex(ch)+  1);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( "'   "  +  hex(ch)+  1);  break;  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "'   "  +  hex(ch)+  1);  break;	      out.write(   "'   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
30	[BUG]  [BUGGY]  out.write('''  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write('''  +  hex(ch));  break;  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write('''  +  hex(ch));  break;	      out.write(   "'   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
31	[BUG]  [BUGGY]  out.write( "'' "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( "'' "  +  hex(ch));  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "'' "  +  hex(ch));	      out.write(   "'   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
32	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
33	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( "u00 "  +  hex(ch));  break;	      out.write(   "'   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
34	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(!escapeSingleQuote  &&  Character.isWhitespace(ch))  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
35	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
36	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [BUGGY]    if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	out.write( ".s.IFJDCS ".charAt(0));	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
37	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)&&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)&&  escapeSingleQuote)  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)&&  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
38	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':    [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isDigit(ch))  {  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
