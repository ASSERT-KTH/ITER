bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
2	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write('ufffd');  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write('ufffd');  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write('ufffd');  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
3	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
4	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write(str);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  out.write(str);  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  out.write(str);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
5	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write(str);  }  else  {  out.write(ch);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  out.write(str);  }  else  {  out.write(ch);  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  out.write(str);  }  else  {  out.write(ch);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  [BUGGY]  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");	throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]    out.write(ch);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    out.write(ch);  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    out.write(ch);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
10	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write(ch);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  out.write(ch);  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  out.write(ch);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
11	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write(ch);  }  else  {  out.write(ch);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  out.write(ch);  }  else  {  out.write(ch);  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  out.write(ch);  }  else  {  out.write(ch);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
12	[BUG]  [BUGGY]    out.write('ufffd');  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    out.write('ufffd');  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    out.write('ufffd');		non-compiled	[CE]  illegal  start  of  expression	10	None	add
13	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write('ufffd');  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  out.write('ufffd');  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  out.write('ufffd');  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
14	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write('ufffd');  return;  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  out.write('ufffd');  return;  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  out.write('ufffd');  return;  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
15	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  [BUGGY]    if(escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	    if(escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
