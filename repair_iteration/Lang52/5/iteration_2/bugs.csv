bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write(str);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write(str);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(str);	      out.write(ch);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  out.write(ch,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write(ch,  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(ch,  escapeSingleQuote);	      out.write(ch);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null! ");  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null! ");  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null! ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ",  out);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ",  out);  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ",  out);	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length());  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.length());	      if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  -  1,  str.length());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  -  1,  str.length());  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  -  1,  str.length());	      if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  1,  str.length());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  1,  str.length());  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.length()  +  1,  str.length());	      if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  out.write('ufffd');  }  else  {  out.write('ufffd');  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('ufffd');  }  else  {  out.write('ufffd');  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('ufffd');  }  else  {  out.write('ufffd');  }	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars( "UTF-8 "));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars( "UTF-8 "));  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars( "UTF-8 "));	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString());  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.toString());	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  out.write('0');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('0');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('0');	      out.write('ufffd');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
12	[BUG]  [BUGGY]  out.write('/');  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('/');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('/');	      out.write('ufffd');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  out.write('%');  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('%');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('%');	      out.write('ufffd');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  out.write('ufffd');  }  else  {  out.write(ch);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('ufffd');  }  else  {  out.write(ch);  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('ufffd');  }  else  {  out.write(ch);  }	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ");  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  out.write(str,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write(str,  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length());  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.length());	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Thread.currentThread().setContextClassLoader(escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().setContextClassLoader(escapeSingleQuote);	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Thread.currentThread().setContextClassLoader(out);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().setContextClassLoader(out);	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().reset();	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  out.write('ufffd');  return;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('ufffd');  return;  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('ufffd');  return;	      if(escapeSingleQuote)    {    out.write('ufffd');    return;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.toString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  out.toString();  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  out.toString();	      if(escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.readLine();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  out.readLine();  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  out.readLine();	      if(escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(ch);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
27	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(ch);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
28	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd');  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd');  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write('ufffd');  }	      if(escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  out.write('f');  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('f');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('f');	      if(escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('f');  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('f');  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write('f');  }	      if(escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writing  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writing  must  not  be  null. ");  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writing  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
32	[BUG]  [BUGGY]  out.write('n');  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('n');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('n');	      out.write(ch);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  safely())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  safely())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	safely())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  aughtException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  aughtException( "The  Writer  must  not  be  null. ");  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	aughtException( "The  Writer  must  not  be  null. ");	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(ch);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  out  =  getOutputStream();  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream();	      if(escapeSingleQuote)    {    out.write(ch);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length());  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str.length());	      if(escapeSingleQuote)    {    out.write(ch);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
39	[BUG]  [BUGGY]  out.write('ufffd',  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('ufffd',  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('ufffd',  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(ch);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(ch);  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write(ch);  }	      if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
41	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.getOutputStream();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  out.getOutputStream();  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  out.getOutputStream();	      if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
42	[BUG]  [BUGGY]  Output.write(ch,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Output.write(ch,  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Output.write(ch,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
43	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(str);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(str);  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write(str);  }	      if(escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  OutputEscapes.write(out,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputEscapes.write(out,  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(out,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  safely())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  safely())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	safely())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
46	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
47	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
48	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd');  return;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd');  return;  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write('ufffd');  return;  }	      if(escapeSingleQuote)    {    out.write('ufffd');    return;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  out.write(':');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write(':');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(':');	      out.write('ufffd');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
51	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote;  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote;	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
52	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'ufffd');  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'ufffd');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'ufffd');	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
53	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'ufffd';  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'ufffd';  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'ufffd';	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  :  str;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  :  str;  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  :  str;	      if(escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  :  str);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  :  str);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  :  str);	      if(escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  :  null;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  :  null;  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  :  null;	      if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  : "  <  null> ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  : "  <  null> ");  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out.toString()  : "  <  null> ");	      if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote.charAt(0);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote.charAt(0);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote.charAt(0);	      if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "), "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "), "The  Writer  must  not  be  null. ");  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( " "), "The  Writer  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(' "');  return;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  if(escapeSingleQuote)  {  out.write(' "');  return;  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	if(escapeSingleQuote)  {  out.write(' "');  return;  }	      if(escapeSingleQuote)    {    out.write('ufffd');    return;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
62	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [BUGGY]    }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  out.write('  ');  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write('  ');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('  ');	      out.write(ch);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
65	[BUG]  [BUGGY]  out.append('ufffd');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.append('ufffd');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.append('ufffd');	      out.write('ufffd');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
66	[BUG]  [BUGGY]  out.write(',');  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  out.write(',');  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(',');	      out.write('ufffd');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
67	[BUG]  [BUGGY]  OutputEscapes.write(str,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputEscapes.write(str,  escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  null;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  null;  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  null;	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().report(escapeSingleQuote);	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
70	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.toString();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.toString();  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.toString();	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
