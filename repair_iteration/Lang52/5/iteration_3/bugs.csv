bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  str);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(out,  str);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
2	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  str,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  str,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(out,  str,  escapeSingleQuote);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
3	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  0);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
4	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.length());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(out,  str.length());	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
5	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  aughtException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  if(escapeSingleQuote)  {  aughtException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	if(escapeSingleQuote)  {  aughtException( "The  Writer  must  not  be  null. ");  }	  aughtException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
6	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  aughtException( "The  Writer  must  not  be  null. ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  if(escapeSingleQuote)  {  aughtException( "The  Writer  must  not  be  null. ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	if(escapeSingleQuote)  {  aughtException( "The  Writer  must  not  be  null. ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
7	[BUG]  [BUGGY]  new  IllegalArgumentException( "The  Editor  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  new  IllegalArgumentException( "The  Editor  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	new  IllegalArgumentException( "The  Editor  must  not  be  null. ");	  new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
8	[BUG]  [BUGGY]  new  IllegalArgumentException( "Str  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  new  IllegalArgumentException( "Str  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	new  IllegalArgumentException( "Str  must  not  be  null. ");	  new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
9	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(escapeSingleQuote,  out);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(escapeSingleQuote,  out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().setContextClassLoader(escapeSingleQuote,  out);	  Thread.currentThread().setContextClassLoader(escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
10	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(escapeSingleQuote,  str);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(escapeSingleQuote,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().setContextClassLoader(escapeSingleQuote,  str);	  Thread.currentThread().setContextClassLoader(escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
11	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('n');  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write('n');  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
12	[BUG]  [BUGGY]  out.write('-');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('-');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('-');	  out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
13	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  str.readLine();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  str.readLine();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  str.readLine();	  OutputStream    escapeSingleQuote    =    out.readLine();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
14	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.readFully(str);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  out.readFully(str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  out.readFully(str);	  OutputStream    escapeSingleQuote    =    out.readLine();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
15	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.readFully();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  out.readFully();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  out.readFully();	  OutputStream    escapeSingleQuote    =    out.readLine();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
16	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.length()  +  1);	  OutputStream    os    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(out.length());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(out.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(out.length());	  OutputStream    os    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  4);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  4);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.length()  +  4);	  OutputStream    os    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  2);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.length()  +  2);	  OutputStream    os    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  if(escapeSingleQuote)  {  throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	if(escapeSingleQuote)  {  throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  }	  throw    new    IllegalStateException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
21	[BUG]  [BUGGY]  out.write(':',  str.length());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(':',  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(':',  str.length());	  out.write(':');    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
22	[BUG]  [BUGGY]  out.write(':',  str);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(':',  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(':',  str);	  out.write(':');    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
23	[BUG]  [BUGGY]  OutputStream  ch  =  escapeSingleQuote)  {  out.write(ch);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  ch  =  escapeSingleQuote)  {  out.write(ch);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  ch  =  escapeSingleQuote)  {  out.write(ch);  }	  OutputStream    escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
24	[BUG]  [BUGGY]  OutputStream  ch  =  escapeSingleQuote;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  ch  =  escapeSingleQuote;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  ch  =  escapeSingleQuote;	  OutputStream    escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
25	[BUG]  [BUGGY]  OutputStream  ch  =  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  ch  =  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  ch  =  escapeSingleQuote);	  OutputStream    escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
26	[BUG]  [BUGGY]  OutputStream  ch  =  escapeSingleQuote.toCharArray();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  ch  =  escapeSingleQuote.toCharArray();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  ch  =  escapeSingleQuote.toCharArray();	  OutputStream    escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
27	[BUG]  [BUGGY]  out.write('n',  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('n',  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('n',  escapeSingleQuote);	  out.write('n');    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
28	[BUG]  [BUGGY]  out.write('n',  str.length());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('n',  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('n',  str.length());	  out.write('n');    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
29	[BUG]  [BUGGY]  out.write(','  +  str.length());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(','  +  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(','  +  str.length());	  out.write(',');    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
30	[BUG]  [BUGGY]  out.write(ch,  ',');  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(ch,  ',');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(ch,  ',');	  out.write(',');    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
31	[BUG]  [BUGGY]  out.write('%',  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('%',  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('%',  escapeSingleQuote);	  out.write('%');    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
32	[BUG]  [BUGGY]  out.write('%',  str.length());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('%',  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('%',  str.length());	  out.write('%');    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
33	[BUG]  [BUGGY]  out.write('%',  str.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('%',  str.length()  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('%',  str.length()  -  1);	  out.write('%');    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  out.write(str,  ch);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(str,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(str,  ch);	  out.write(str,    escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
35	[BUG]  [BUGGY]  out.write(str,  escapeSingleQuote,  ch);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(str,  escapeSingleQuote,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(str,  escapeSingleQuote,  ch);	  out.write(str,    escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
36	[BUG]  [BUGGY]  out.write(str,  0,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(str,  0,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(str,  0,  escapeSingleQuote);	  out.write(str,    escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    str);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
38	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    str);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
39	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '/');  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '/');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '/');	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    getOutputStream()    :    'ufffd');    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
40	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  ',');  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  ',');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  ',');	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    getOutputStream()    :    'ufffd');    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
41	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'n');  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'n');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'n');	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    getOutputStream()    :    'ufffd');    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
42	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "),  escapeSingleQuote, "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "),  escapeSingleQuote, "The  Writer  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( " "),  escapeSingleQuote, "The  Writer  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "   "),   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
43	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  +  1);	  OutputStream    out    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
44	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  -  1);	  OutputStream    out    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
45	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(out.length());	  OutputStream    out    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
46	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  2);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  +  2);	  OutputStream    out    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
47	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getOutputStream(out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(out);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
48	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out.getChars());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getOutputStream(out.getChars());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(out.getChars());	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
49	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out.length());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getOutputStream(out.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(out.length());	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
50	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote,  out);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote,  out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().report(escapeSingleQuote,  out);	  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
51	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote,  str);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().report(escapeSingleQuote,  str);	  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
52	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(str,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(str,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().report(str,  escapeSingleQuote);	  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
53	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '/';  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '/';  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '/';	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    getOutputStream()    :    'ufffd';    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
54	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  ',';  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  ',';  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  ',';	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    getOutputStream()    :    'ufffd';    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
55	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'n';  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'n';  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  'n';	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    getOutputStream()    :    'ufffd';    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
56	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  getEscapeSingleQuote();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  getEscapeSingleQuote();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  getEscapeSingleQuote();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
57	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  null;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  null;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
58	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.charAt(0);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  out.charAt(0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  out.charAt(0);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
59	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  out;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  out;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
60	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  +  1);	  OutputStream    err    =    new    OutputStreamWriter(out,    str.length());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
61	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  -  1);	  OutputStream    err    =    new    OutputStreamWriter(out,    str.length());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
62	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  +  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  +  2);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  +  2);	  OutputStream    err    =    new    OutputStreamWriter(out,    str.length());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
63	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.toCharArray());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.toCharArray());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str.toCharArray());	  OutputStream    err    =    new    OutputStreamWriter(out,    str.length());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
64	[BUG]  [BUGGY]  OutputStream  str)  {  out.write(str);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str)  {  out.write(str);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str)  {  out.write(str);  }	  OutputStream    escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
65	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write(str);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write(str);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote)  {  out.write(str);  }	  OutputStream    escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
66	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(str,  escapeSingleQuote);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(str,  escapeSingleQuote);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write(str,  escapeSingleQuote);  }	  OutputStream    escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
67	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars( "UTF-8 "),  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars( "UTF-8 "),  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars( "UTF-8 "),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getChars(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
68	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars('UTF-8'));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars('UTF-8'));  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars('UTF-8'));	  OutputStream    out    =    new    FileOutputStream(str.getChars(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
69	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0));  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0));	  OutputStream    out    =    new    FileOutputStream(str.getChars(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
70	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  null;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  null;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    null;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
71	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('f',  escapeSingleQuote);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('f',  escapeSingleQuote);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write('f',  escapeSingleQuote);  }	  OutputStream    escapeSingleQuote)    {    out.write('f');    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
72	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write('f');  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write('f');  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  escapeSingleQuote)  {  out.write('f');  }	  OutputStream    escapeSingleQuote)    {    out.write('f');    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
73	[BUG]  [BUGGY]  OutputStream  out  =  getEscapeSingleQuote();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getEscapeSingleQuote();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getEscapeSingleQuote();	  OutputStream    escapeSingleQuote)    {    out.write('f');    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
74	[BUG]  [BUGGY]  out.write('ufffd',  'ufffd');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('ufffd',  'ufffd');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('ufffd',  'ufffd');	  out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
75	[BUG]  [BUGGY]  out.write('ufffd',  str.length());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('ufffd',  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('ufffd',  str.length());	  out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
76	[BUG]  [BUGGY]  OutputStream  out  =  str.getOutputStream();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  str.getOutputStream();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  str.getOutputStream();	  OutputStream    escapeSingleQuote    =    out.getOutputStream();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
77	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  str.getOutputStream();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  str.getOutputStream();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  str.getOutputStream();	  OutputStream    escapeSingleQuote    =    out.getOutputStream();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
78	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  : "  <  null> ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  : "  <  null> ");  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  : "  <  null> ");	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :   "    <    null>   ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
79	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out,  str);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(out,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().setContextClassLoader(out,  str);	  Thread.currentThread().setContextClassLoader(out);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
80	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out,  escapeSingleQuote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(out,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().setContextClassLoader(out,  escapeSingleQuote);	  Thread.currentThread().setContextClassLoader(out);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
81	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out,  true);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(out,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().setContextClassLoader(out,  true);	  Thread.currentThread().setContextClassLoader(out);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
82	[BUG]  [BUGGY]  out.write(',');  return;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(',');  return;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(',');  return;	  out.write('ufffd');    return;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
83	[BUG]  [BUGGY]  out.write('0');  return;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('0');  return;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('0');  return;	  out.write('ufffd');    return;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
84	[BUG]  [BUGGY]  out.write(ch);  return;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(ch);  return;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(ch);  return;	  out.write('ufffd');    return;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
85	[BUG]  [BUGGY]  out.write('  ',  str.length());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('  ',  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('  ',  str.length());	  out.write('    ');    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
86	[BUG]  [BUGGY]  out.append('  ');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.append('  ');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.append('  ');	  out.write('    ');    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
87	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.toString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.toString();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    out.toString();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
88	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  out.toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  out.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  out.toString();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    out.toString();    	non-compiled	[CE]  	70	None	replace
89	[BUG]  [BUGGY]  OutputEscapes.write(out,  str);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(out,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(out,  str);	  OutputEscapes.write(out,    escapeSingleQuote);    	non-compiled	[CE]  	44	None	replace
90	[BUG]  [BUGGY]  OutputEscapes.write(out,  str,  escapeSingleQuote);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(out,  str,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(out,  str,  escapeSingleQuote);	  OutputEscapes.write(out,    escapeSingleQuote);    	non-compiled	[CE]  	44	None	replace
91	[BUG]  [BUGGY]  OutputEscapes.write(out,  ch,  escapeSingleQuote);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(out,  ch,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(out,  ch,  escapeSingleQuote);	  OutputEscapes.write(out,    escapeSingleQuote);    	non-compiled	[CE]  	44	None	replace
92	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Writer  must  not  be  null! ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Writer  must  not  be  null! ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalStateException( "The  Writer  must  not  be  null! ");	  Throwables.throw    new    IllegalStateException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	59	None	replace
93	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "The  OutputStream  must  not  be  null. ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "The  OutputStream  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalStateException( "The  OutputStream  must  not  be  null. ");	  Throwables.throw    new    IllegalStateException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	59	None	replace
94	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Editor  must  not  be  null. ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Editor  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalStateException( "The  Editor  must  not  be  null. ");	  Throwables.throw    new    IllegalStateException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	59	None	replace
95	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  str.charAt(0);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  str.charAt(0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  str.charAt(0);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote.charAt(0);    	non-compiled	[CE]  	58	None	replace
96	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  str.charAt(1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  str.charAt(1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  str.charAt(1);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote.charAt(0);    	non-compiled	[CE]  	58	None	replace
97	[BUG]  [BUGGY]  OutputStream  outSingleQuote  =  str.charAt(0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  outSingleQuote  =  str.charAt(0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  outSingleQuote  =  str.charAt(0);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote.charAt(0);    	non-compiled	[CE]  	58	None	replace
98	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str.length());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str.length());	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	26	None	replace
99	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  0);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  0);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	26	None	replace
100	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	26	None	replace
101	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  ch);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  ch);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	26	None	replace
102	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  0);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  0);	  OutputStream    escapeSingleQuote    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	47	None	replace
103	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  ch);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  ch);	  OutputStream    escapeSingleQuote    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	47	None	replace
104	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  false);	  OutputStream    escapeSingleQuote    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	47	None	replace
105	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  true);	  OutputStream    escapeSingleQuote    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	47	None	replace
106	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  ch);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  ch);	  OutputStream    err    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	36	None	replace
107	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  0);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  0);	  OutputStream    err    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	36	None	replace
108	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  false);	  OutputStream    err    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	36	None	replace
109	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  true);	  OutputStream    err    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	36	None	replace
110	[BUG]  [BUGGY]  out.write(ch,  0,  escapeSingleQuote);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(ch,  0,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(ch,  0,  escapeSingleQuote);	  out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	2	None	replace
111	[BUG]  [BUGGY]  out.write(ch,  str);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(ch,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(ch,  str);	  out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	2	None	replace
112	[BUG]  [BUGGY]  out.write(ch,  0);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(ch,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(ch,  0);	  out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	2	None	replace
113	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString(),  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString(),  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.toString(),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.toString());    	non-compiled	[CE]  	10	None	replace
114	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath());	  OutputStream    out    =    new    FileOutputStream(str.toString());    	non-compiled	[CE]  	10	None	replace
115	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes());	  OutputStream    out    =    new    FileOutputStream(str.toString());    	non-compiled	[CE]  	10	None	replace
116	[BUG]  [BUGGY]  out.append(',');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.append(',');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.append(',');	  out.append('ufffd');    	non-compiled	[CE]  	65	None	replace
117	[BUG]  [BUGGY]  out.append('JavaStyleString');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.append('JavaStyleString');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.append('JavaStyleString');	  out.append('ufffd');    	non-compiled	[CE]  	65	None	replace
118	[BUG]  [BUGGY]  out.append('/');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.append('/');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.append('/');	  out.append('ufffd');    	non-compiled	[CE]  	65	None	replace
119	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().release(out);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().release(out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().release(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  	22	None	replace
120	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().set(out,  str);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().set(out,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().set(out,  str);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  	22	None	replace
121	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().set(out);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().set(out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().set(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  	22	None	replace
122	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null! ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null! ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null! ");	  Throwables.throw    new    IllegalArgumentException(   "The    OutputStream    must    not    be    null.   ");    	non-compiled	[CE]  	15	None	replace
123	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ",  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ",  escapeSingleQuote);  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ",  escapeSingleQuote);	  Throwables.throw    new    IllegalArgumentException(   "The    OutputStream    must    not    be    null.   ");    	non-compiled	[CE]  	15	None	replace
124	[BUG]  [BUGGY]  out.write('f',  str.length());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('f',  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('f',  str.length());	  out.write('f');    	non-compiled	[CE]  	29	None	replace
125	[BUG]  [BUGGY]  out.write('f',  str.length()  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('f',  str.length()  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('f',  str.length()  -  1);	  out.write('f');    	non-compiled	[CE]  	29	None	replace
126	[BUG]  [BUGGY]  out.write('f',  escapeSingleQuote);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('f',  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('f',  escapeSingleQuote);	  out.write('f');    	non-compiled	[CE]  	29	None	replace
127	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writing    must    not    be    null.   ");    	non-compiled	[CE]  	31	None	replace
128	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writing  must  be  null. ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writing  must  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writing  must  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writing    must    not    be    null.   ");    	non-compiled	[CE]  	31	None	replace
129	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writing  must  not  be  null! ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writing  must  not  be  null! ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writing  must  not  be  null! ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writing    must    not    be    null.   ");    	non-compiled	[CE]  	31	None	replace
130	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('  ');  return;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('  ');  return;  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write('  ');  return;  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    return;    }    	non-compiled	[CE]  	49	None	replace
131	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  null;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  null;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    str    :    null;    	non-compiled	[CE]  	68	None	replace
132	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.substring(0,  str.length()  -  1):  null;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.substring(0,  str.length()  -  1):  null;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.substring(0,  str.length()  -  1):  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    str    :    null;    	non-compiled	[CE]  	68	None	replace
133	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null! ",  escapeSingleQuote);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null! ",  escapeSingleQuote);  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null! ",  escapeSingleQuote);	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null!   ");    	non-compiled	[CE]  	3	None	replace
134	[BUG]  [BUGGY]  OutputEscapes.write(str,  escapeSingleQuote,  out);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(str,  escapeSingleQuote,  out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(str,  escapeSingleQuote,  out);	  OutputEscapes.write(str,    escapeSingleQuote);    	non-compiled	[CE]  	67	None	replace
135	[BUG]  [BUGGY]  OutputEscapes.write(str,  escapeSingleQuote,  ch);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(str,  escapeSingleQuote,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(str,  escapeSingleQuote,  ch);	  OutputEscapes.write(str,    escapeSingleQuote);    	non-compiled	[CE]  	67	None	replace
136	[BUG]  [BUGGY]  OutputEscapes.write(str,  escapeSingleQuote,  0);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(str,  escapeSingleQuote,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(str,  escapeSingleQuote,  0);	  OutputEscapes.write(str,    escapeSingleQuote);    	non-compiled	[CE]  	67	None	replace
137	[BUG]  [BUGGY]  safe())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  safe())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	safe())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  safely())    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  	34	None	replace
138	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  out,  escapeSingleQuote);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  out,  escapeSingleQuote);  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  out,  escapeSingleQuote);	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ",    out);    	non-compiled	[CE]  	4	None	replace
139	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  escapeSingleQuote);  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  escapeSingleQuote);	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ",    out);    	non-compiled	[CE]  	4	None	replace
140	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  str);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  str);  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  str);	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ",    out);    	non-compiled	[CE]  	4	None	replace
141	[BUG]  [BUGGY]  OutputStream  ch  =  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  ch  =  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  ch  =  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	46	None	replace
142	[BUG]  [BUGGY]  OutputStream  os  =  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	46	None	replace
143	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  non-null. ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  non-null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  non-null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    	non-compiled	[CE]  	16	None	replace
144	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  null! ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  null! ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  null! ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    	non-compiled	[CE]  	16	None	replace
145	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  be  null. ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    	non-compiled	[CE]  	16	None	replace
146	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  1,  str.length());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  1,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  +  1,  str.length());	  OutputStream    out    =    new    FileOutputStream(str.length()    -    1,    str.length());    	non-compiled	[CE]  	6	None	replace
147	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  str.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.length(),  str.length());	  OutputStream    out    =    new    FileOutputStream(str.length()    -    1,    str.length());    	non-compiled	[CE]  	6	None	replace
148	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  *  1,  str.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  *  1,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  *  1,  str.length());	  OutputStream    out    =    new    FileOutputStream(str.length()    -    1,    str.length());    	non-compiled	[CE]  	6	None	replace
149	[BUG]  [BUGGY]  Output.write(str,  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Output.write(str,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Output.write(str,  escapeSingleQuote);	  Output.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	42	None	replace
150	[BUG]  [BUGGY]  Output.write(ch,  out,  escapeSingleQuote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Output.write(ch,  out,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Output.write(ch,  out,  escapeSingleQuote);	  Output.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	42	None	replace
151	[BUG]  [BUGGY]  Output.write(ch,  str,  escapeSingleQuote);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Output.write(ch,  str,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Output.write(ch,  str,  escapeSingleQuote);	  Output.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	42	None	replace
152	[BUG]  [BUGGY]  Output.write(ch,  str);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Output.write(ch,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Output.write(ch,  str);	  Output.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	42	None	replace
153	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  str.toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  str.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  str.toString();	  OutputStream    escapeSingleQuote    =    out.toString();    	non-compiled	[CE]  	24	None	replace
154	[BUG]  [BUGGY]  OutputStream  out  =  str.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  str.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  str.toString();	  OutputStream    escapeSingleQuote    =    out.toString();    	non-compiled	[CE]  	24	None	replace
155	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote.toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote.toString();	  OutputStream    escapeSingleQuote    =    out.toString();    	non-compiled	[CE]  	24	None	replace
156	[BUG]  [BUGGY]  out.write('/',  str.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('/',  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('/',  str.length());	  out.write('/');    	non-compiled	[CE]  	12	None	replace
157	[BUG]  [BUGGY]  out.write('/',  str.length()  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('/',  str.length()  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('/',  str.length()  -  1);	  out.write('/');    	non-compiled	[CE]  	12	None	replace
158	[BUG]  [BUGGY]  out.write('/',  str.length()  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('/',  str.length()  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('/',  str.length()  +  1);	  out.write('/');    	non-compiled	[CE]  	12	None	replace
159	[BUG]  [BUGGY]  out.write('0',  str.length()  -  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('0',  str.length()  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('0',  str.length()  -  1);	  out.write('0');    	non-compiled	[CE]  	11	None	replace
160	[BUG]  [BUGGY]  out.write('0',  str.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('0',  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('0',  str.length());	  out.write('0');    	non-compiled	[CE]  	11	None	replace
161	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	17	None	replace
162	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  0);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	17	None	replace
163	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  ch);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  ch);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	17	None	replace
164	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  str.length());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  str.length());	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	17	None	replace
165	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  out);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  out);	  OutputStream    os    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
166	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0),  out,  escapeSingleQuote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0),  out,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.getChars(0),  out,  escapeSingleQuote);	  OutputStream    os    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
167	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str.length());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str.length());	  OutputStream    os    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
168	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(out.getChars(0),  str,  escapeSingleQuote);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(out.getChars(0),  str,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(out.getChars(0),  str,  escapeSingleQuote);	  OutputStream    os    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
169	[BUG]  [BUGGY]  out.write(str.substring(0,  str.length()  -  1));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(str.substring(0,  str.length()  -  1));  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(str.substring(0,  str.length()  -  1));	  out.write(str);    	non-compiled	[CE]  	1	None	replace
170	[BUG]  [BUGGY]  out.write(' "');  return;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(' "');  return;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(' "');  return;	  if(escapeSingleQuote)    {    out.write('   "');    return;    }    	non-compiled	[CE]  	61	None	replace
171	[BUG]  [BUGGY]  out.write(' "');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(' "');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(' "');	  if(escapeSingleQuote)    {    out.write('   "');    return;    }    	non-compiled	[CE]  	61	None	replace
172	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length(),  str.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length(),  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.length(),  str.length());	  OutputStream    os    =    new    FileOutputStream(str.length()    +    1,    str.length());    	non-compiled	[CE]  	7	None	replace
173	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  1,  out.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  1,  out.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.length()  +  1,  out.length());	  OutputStream    os    =    new    FileOutputStream(str.length()    +    1,    str.length());    	non-compiled	[CE]  	7	None	replace
174	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  1,  str.charAt(0));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  +  1,  str.charAt(0));  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.length()  +  1,  str.charAt(0));	  OutputStream    os    =    new    FileOutputStream(str.length()    +    1,    str.length());    	non-compiled	[CE]  	7	None	replace
175	[BUG]  [BUGGY]  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	new  IllegalStateException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalStateException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	63	None	replace
176	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalStateException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	63	None	replace
177	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote?  getOutputStream()  :  'ufffd');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote?  getOutputStream()  :  'ufffd');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  escapeSingleQuote?  getOutputStream()  :  'ufffd');	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    getOutputStream()    :    'ufffd');    	non-compiled	[CE]  	52	None	replace
178	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null ".);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null ".);  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null ".);	  Throwables.throw    new    IllegalArgumentException(   "The    OutputStream    must    not    be    null.   ");    	non-compiled	[CE]  	15	None	replace
179	[BUG]  [BUGGY]  out.write(':',  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(':',  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(':',  escapeSingleQuote);	  out.write(':');    	non-compiled	[CE]  	50	None	replace
180	[BUG]  [BUGGY]  out.append(':');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.append(':');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.append(':');	  out.write(':');    	non-compiled	[CE]  	50	None	replace
181	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  out);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  out);	  OutputStream    escapeSingleQuote    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	47	None	replace
182	[BUG]  [BUGGY]  if(out  ==  null)  {  aughtException( "The  Writer  must  not  be  null. ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  if(out  ==  null)  {  aughtException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	if(out  ==  null)  {  aughtException( "The  Writer  must  not  be  null. ");  }	  aughtException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	35	None	replace
183	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throw  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ");	  Throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	62	None	replace
184	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "The  Writing  must  not  be  null. ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "The  Writing  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throw  new  IllegalArgumentException( "The  Writing  must  not  be  null. ");	  Throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	62	None	replace
185	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  escapeSingleQuote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(out,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	17	None	replace
186	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  ch);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str,  ch);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	17	None	replace
187	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length()  -  1,  str.length());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length()  -  1,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(out.length()  -  1,  str.length());	  OutputStream    out    =    new    FileOutputStream(str.length()    -    1,    str.length());    	non-compiled	[CE]  	6	None	replace
188	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	26	None	replace
189	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  ch,  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  ch,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  ch,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	26	None	replace
190	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  escapeSingleQuote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	26	None	replace
191	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  out);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str,  escapeSingleQuote,  out);	  OutputStream    err    =    new    OutputStreamWriter(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  	36	None	replace
192	[BUG]  [BUGGY]  out.append('f');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.append('f');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.append('f');	  out.write('f');    	non-compiled	[CE]  	29	None	replace
193	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote.charAt(0);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote.charAt(0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote.charAt(0);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote.charAt(0);    	non-compiled	[CE]  	58	None	replace
194	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write('ufffd');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write('ufffd');  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  escapeSingleQuote)  {  out.write('ufffd');  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  	28	None	replace
195	[BUG]  [BUGGY]  OutputStream  ufffd)  {  out.write('ufffd');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  ufffd)  {  out.write('ufffd');  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  ufffd)  {  out.write('ufffd');  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  	28	None	replace
196	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(escapeJavaStyleString);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(escapeJavaStyleString);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().setContextClassLoader(escapeJavaStyleString);	  Thread.currentThread().setContextClassLoader(escapeSingleQuote);    	non-compiled	[CE]  	20	None	replace
197	[BUG]  [BUGGY]  Thread.currentThread().escapeJavaStyleString(out);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().escapeJavaStyleString(out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().escapeJavaStyleString(out);	  Thread.currentThread().setContextClassLoader(escapeSingleQuote);    	non-compiled	[CE]  	20	None	replace
198	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  -  2);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  -  2);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str.length()  -  2);	  OutputStream    err    =    new    OutputStreamWriter(out,    str.length());    	non-compiled	[CE]  	38	None	replace
199	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Editor  must  be  null. ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Editor  must  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Editor  must  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    	non-compiled	[CE]  	16	None	replace
200	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  NULL. ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  NULL. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  NULL. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    	non-compiled	[CE]  	16	None	replace
201	[BUG]  [BUGGY]  OutputEscapes.write(out,  ch);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(out,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(out,  ch);	  OutputEscapes.write(out,    escapeSingleQuote);    	non-compiled	[CE]  	44	None	replace
202	[BUG]  [BUGGY]  OutputEscapes.write(out,  escapeSingleQuote,  str);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(out,  escapeSingleQuote,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(out,  escapeSingleQuote,  str);	  OutputEscapes.write(out,    escapeSingleQuote);    	non-compiled	[CE]  	44	None	replace
203	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(',');  }  else  {  out.write(ch);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(',');  }  else  {  out.write(ch);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write(',');  }  else  {  out.write(ch);  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	46	None	replace
204	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  str  :  null;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  str  :  null;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote?  str  :  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    str    :    null;    	non-compiled	[CE]  	68	None	replace
205	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out  :  null;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out  :  null;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote?  out  :  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    str    :    null;    	non-compiled	[CE]  	68	None	replace
206	[BUG]  [BUGGY]  OutputStream  outSingleQuote  =  escapeSingleQuote?  str  :  out.toString();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  outSingleQuote  =  escapeSingleQuote?  str  :  out.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  outSingleQuote  =  escapeSingleQuote?  str  :  out.toString();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    out.toString();    	non-compiled	[CE]  	70	None	replace
207	[BUG]  [BUGGY]  OutputStream  outSingleQuote  =  escapeSingleQuote?  out  :  str.toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  outSingleQuote  =  escapeSingleQuote?  out  :  str.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  outSingleQuote  =  escapeSingleQuote?  out  :  str.toString();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    out.toString();    	non-compiled	[CE]  	70	None	replace
208	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  escapeSingleQuote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(out,  escapeSingleQuote);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	48	None	replace
209	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.getOutputStream(str);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote.getOutputStream(str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  escapeSingleQuote.getOutputStream(str);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	48	None	replace
210	[BUG]  [BUGGY]  out  =  getOutputStream(out,  escapeSingleQuote);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out  =  getOutputStream(out,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out  =  getOutputStream(out,  escapeSingleQuote);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	48	None	replace
211	[BUG]  [BUGGY]  out.write('0',  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('0',  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('0',  escapeSingleQuote);	  out.write('0');    	non-compiled	[CE]  	11	None	replace
212	[BUG]  [BUGGY]  out.append('0');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.append('0');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.append('0');	  out.write('0');    	non-compiled	[CE]  	11	None	replace
213	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  writing  must  not  be  null. ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  writing  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  writing  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writing    must    not    be    null.   ");    	non-compiled	[CE]  	31	None	replace
214	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(escapeJavaStyleString);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(escapeJavaStyleString);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().report(escapeJavaStyleString);	  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote);    	non-compiled	[CE]  	69	None	replace
215	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().escapeJavaStyleString(out);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().escapeJavaStyleString(out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().escapeJavaStyleString(out);	  Thread.currentThread().getContextClassLoader().report(escapeSingleQuote);    	non-compiled	[CE]  	69	None	replace
216	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  out;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  out;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  out;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    str;    	non-compiled	[CE]  	54	None	replace
217	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out.toString()  :  null;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out.toString()  :  null;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote?  out.toString()  :  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    str;    	non-compiled	[CE]  	54	None	replace
218	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out.toString()  :  str;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out.toString()  :  str;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote?  out.toString()  :  str;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    str;    	non-compiled	[CE]  	54	None	replace
219	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(out,  str.length());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(out,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(out,  str.length());	  OutputStream    os    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  	5	None	replace
220	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  out);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  out);  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ",  out);	  Throwables.throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ",    out);    	non-compiled	[CE]  	4	None	replace
221	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Writing  must  not  be  null. ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Writing  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalStateException( "The  Writing  must  not  be  null. ");	  Throwables.throw    new    IllegalStateException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	59	None	replace
222	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote);	  OutputStream    os    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
223	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(out.getChars(0),  str),  escapeSingleQuote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(out.getChars(0),  str),  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(out.getChars(0),  str),  escapeSingleQuote);	  OutputStream    os    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
224	[BUG]  [BUGGY]  OutputStream  f  =  escapeSingleQuote)  {  out.write('f');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  f  =  escapeSingleQuote)  {  out.write('f');  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  f  =  escapeSingleQuote)  {  out.write('f');  }	  OutputStream    escapeSingleQuote)    {    out.write('f');    }    	non-compiled	[CE]  	30	None	replace
225	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.toString());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(out.toString());	  OutputStream    out    =    new    FileOutputStream(str.toString());    	non-compiled	[CE]  	10	None	replace
226	[BUG]  [BUGGY]  safeMultiply(out)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  safeMultiply(out)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	safeMultiply(out)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  safely())    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  	45	None	replace
227	[BUG]  [BUGGY]  safeMultiply(out)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  safeMultiply(out)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	safeMultiply(out)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  safely())    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  	45	None	replace
228	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  out.readLine();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  out.readLine();	  OutputStream    escapeSingleQuote    =    out.readLine();    	non-compiled	[CE]  	25	None	replace
229	[BUG]  [BUGGY]  out.write('/');  return;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('/');  return;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('/');  return;	  out.write('ufffd');    return;    	non-compiled	[CE]  	23	None	replace
230	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset(out);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reset(out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().reset(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  	22	None	replace
231	[BUG]  [BUGGY]  Output.write(out,  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Output.write(out,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Output.write(out,  escapeSingleQuote);	  Output.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	42	None	replace
232	[BUG]  [BUGGY]  Output.write(ch,  out);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Output.write(ch,  out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Output.write(ch,  out);	  Output.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	42	None	replace
233	[BUG]  [BUGGY]  OutputStream  sz  =  out.getOutputStream();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  sz  =  out.getOutputStream();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  sz  =  out.getOutputStream();	  OutputStream    escapeSingleQuote    =    out.getOutputStream();    	non-compiled	[CE]  	41	None	replace
234	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write('ufffd');  return;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write('ufffd');  return;  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  escapeSingleQuote)  {  out.write('ufffd');  return;  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    return;    }    	non-compiled	[CE]  	49	None	replace
235	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(ch);  return;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(ch);  return;  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write(ch);  return;  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    return;    }    	non-compiled	[CE]  	49	None	replace
236	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.getChars(0,  str.length()  -  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  out.getChars(0,  str.length()  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  out.getChars(0,  str.length()  -  1);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote;    	non-compiled	[CE]  	51	None	replace
237	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(out.length()  +  1,  str.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(out.length()  +  1,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(out.length()  +  1,  str.length());	  OutputStream    os    =    new    FileOutputStream(str.length()    +    1,    str.length());    	non-compiled	[CE]  	7	None	replace
238	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '.';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '.';  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '.';	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    getOutputStream()    :    'ufffd';    	non-compiled	[CE]  	53	None	replace
239	[BUG]  [BUGGY]  OutputStream  str  =  out.toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  out.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  out.toString();	  OutputStream    escapeSingleQuote    =    out.toString();    	non-compiled	[CE]  	24	None	replace
240	[BUG]  [BUGGY]  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	new  IllegalArgumentException( "The  OutputStream  must  not  be  null. ");	  new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	33	None	replace
241	[BUG]  [BUGGY]  safeMultilineString())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  safeMultilineString())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	safeMultilineString())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  safely())    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  	34	None	replace
242	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  out);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toString()  :  out);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    str);    	non-compiled	[CE]  	55	None	replace
243	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out.toString()  :  str);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out.toString()  :  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote?  out.toString()  :  str);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    str);    	non-compiled	[CE]  	55	None	replace
244	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(' "');  return;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(' "');  return;  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote)  {  out.write(' "');  return;  }	  if(escapeSingleQuote)    {    out.write('   "');    return;    }    	non-compiled	[CE]  	61	None	replace
245	[BUG]  [BUGGY]  out.write('  ',  escapeSingleQuote);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('  ',  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('  ',  escapeSingleQuote);	  out.write('    ');    	non-compiled	[CE]  	64	None	replace
246	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write(ch);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write(ch);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  escapeSingleQuote)  {  out.write(ch);  }	  OutputStream    escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  	43	None	replace
247	[BUG]  [BUGGY]  OutputEscapes.write(ch,  escapeSingleQuote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(ch,  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(ch,  escapeSingleQuote);	  OutputEscapes.write(str,    escapeSingleQuote);    	non-compiled	[CE]  	67	None	replace
248	[BUG]  [BUGGY]  OutputEscapes.write(escapeSingleQuote,  str);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputEscapes.write(escapeSingleQuote,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputEscapes.write(escapeSingleQuote,  str);	  OutputEscapes.write(str,    escapeSingleQuote);    	non-compiled	[CE]  	67	None	replace
249	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getChars( "UTF-8 "));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getChars( "UTF-8 "));  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(out.getChars( "UTF-8 "));	  OutputStream    out    =    new    FileOutputStream(str.getChars(   "UTF-8   "));    	non-compiled	[CE]  	9	None	replace
250	[BUG]  [BUGGY]  out.write('%',  ch);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('%',  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('%',  ch);	  out.write('%');    	non-compiled	[CE]  	13	None	replace
251	[BUG]  [BUGGY]  out.write('/',  escapeSingleQuote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write('/',  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write('/',  escapeSingleQuote);	  out.write('/');    	non-compiled	[CE]  	12	None	replace
252	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getBytes());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getBytes());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.getBytes());	  OutputStream    os    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  	5	None	replace
253	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Writer  must  not  be  null ".);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Writer  must  not  be  null ".);  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalStateException( "The  Writer  must  not  be  null ".);	  Throwables.throw    new    IllegalStateException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	59	None	replace
254	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  *  1,  str.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.length()  *  1,  str.length());  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.length()  *  1,  str.length());	  OutputStream    os    =    new    FileOutputStream(str.length()    +    1,    str.length());    	non-compiled	[CE]  	7	None	replace
255	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote.readLine();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote.readLine();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote.readLine();	  OutputStream    escapeSingleQuote    =    out.readLine();    	non-compiled	[CE]  	25	None	replace
256	[BUG]  [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.substring(0,  str.length()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  err  =  new  OutputStreamWriter(out,  str.substring(0,  str.length()));  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  err  =  new  OutputStreamWriter(out,  str.substring(0,  str.length()));	  OutputStream    err    =    new    OutputStreamWriter(out,    str.length());    	non-compiled	[CE]  	38	None	replace
257	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    str);    	non-compiled	[CE]  	55	None	replace
258	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote)  {  out.write('ufffd');  }  else  {  out.write(ch);  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	46	None	replace
259	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "), "The  Writing  must  not  be  null. ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "), "The  Writing  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( " "), "The  Writing  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    Writing    must    not    be    null.   ");    	non-compiled	[CE]  	31	None	replace
260	[BUG]  [BUGGY]  out.append('n');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.append('n');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.append('n');	  out.write('n');    	non-compiled	[CE]  	32	None	replace
261	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "), "The  OutputStream  must  not  be  null. ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "), "The  OutputStream  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Throwables.throw  new  IllegalArgumentException( " "), "The  OutputStream  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "The    OutputStream    must    not    be    null.   ");    	non-compiled	[CE]  	15	None	replace
262	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader();	  Thread.currentThread().setContextClassLoader(escapeSingleQuote);    	non-compiled	[CE]  	20	None	replace
263	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars( ".UTF-8 "));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars( ".UTF-8 "));  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars( ".UTF-8 "));	  OutputStream    out    =    new    FileOutputStream(str.getChars(   "UTF-8   "));    	non-compiled	[CE]  	9	None	replace
264	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().escape(out);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().escape(out);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Thread.currentThread().getContextClassLoader().escape(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  	22	None	replace
265	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote  +  1);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	26	None	replace
266	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  ch);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  ch);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  	48	None	replace
267	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote);	  OutputStream    escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  	43	None	replace
268	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write('f');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write('f');  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote)  {  out.write('f');  }	  OutputStream    escapeSingleQuote)    {    out.write('f');    }    	non-compiled	[CE]  	30	None	replace
269	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote)?  'f'  :  str.substring(0,  str.length()  -  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote)?  'f'  :  str.substring(0,  str.length()  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  escapeSingleQuote)?  'f'  :  str.substring(0,  str.length()  -  1);	  OutputStream    escapeSingleQuote)    {    out.write('f');    }    	non-compiled	[CE]  	30	None	replace
270	[BUG]  [BUGGY]  Output.write(escapeSingleQuote,  str);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  Output.write(escapeSingleQuote,  str);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	Output.write(escapeSingleQuote,  str);	  Output.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	42	None	replace
271	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote.getOutputStream();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote.getOutputStream();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote.getOutputStream();	  OutputStream    escapeSingleQuote    =    out.getOutputStream();    	non-compiled	[CE]  	41	None	replace
272	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.toByteArray();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  out.toByteArray();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  out.toByteArray();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote;    	non-compiled	[CE]  	51	None	replace
273	[BUG]  [BUGGY]  OutputStream  ch  =  escapeSingleQuote.charAt(0);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  ch  =  escapeSingleQuote.charAt(0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  ch  =  escapeSingleQuote.charAt(0);	  OutputStream    escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  	40	None	replace
274	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote?  str  :  out.toString();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote?  str  :  out.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  out  =  escapeSingleQuote?  str  :  out.toString();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    out.toString();    	non-compiled	[CE]  	70	None	replace
275	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out  :  str.toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out  :  str.toString();  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote?  out  :  str.toString();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    out.toString();    	non-compiled	[CE]  	70	None	replace
276	[BUG]  [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  os  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  escapeSingleQuote);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  os  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  escapeSingleQuote);	  OutputStream    os    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
277	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write('ufffd');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write('ufffd');  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote)  {  out.write('ufffd');  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  	28	None	replace
278	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write('ufffd');  return;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote)  {  out.write('ufffd');  return;  }  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote)  {  out.write('ufffd');  return;  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    return;    }    	non-compiled	[CE]  	49	None	replace
279	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out.toString()  : "  <  null> ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out.toString()  : "  <  null> ");  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote?  out.toString()  : "  <  null> ");	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :   "    <    null>   ");    	non-compiled	[CE]  	57	None	replace
280	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '.');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '.');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  getOutputStream()  :  '.');	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    getOutputStream()    :    'ufffd');    	non-compiled	[CE]  	52	None	replace
281	[BUG]  [BUGGY]  out.write(ch,  'n');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  out.write(ch,  'n');  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	out.write(ch,  'n');	  out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	2	None	replace
282	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote;  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	OutputStream  str  =  escapeSingleQuote?  str.toString()  :  escapeSingleQuote;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out.toString()    :    str;    	non-compiled	[CE]  	54	None	replace
283	[BUG]  [BUGGY]  new  IllegalArgumentException( "The  Writing  must  not  be  null. ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {      [BUGGY]  new  IllegalArgumentException( "The  Writing  must  not  be  null. ");  [BUGGY]      }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);    [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	new  IllegalArgumentException( "The  Writing  must  not  be  null. ");	  new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  	33	None	replace
