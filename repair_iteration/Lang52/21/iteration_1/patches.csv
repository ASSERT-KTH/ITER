bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(ch  <  =  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  0x7f)  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  <  =  0x7f)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
2	[BUG]  [BUGGY]  }  else  if(ch  ==  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  ==  0x7f)  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  ==  0x7f)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
3	[BUG]  [BUGGY]  }  else  if(ch  >=  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  >=  0x7f)  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  >=  0x7f)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
4	[BUG]  [BUGGY]  out.write(''  +  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  out.write(''  +  sz);  [BUGGY]    }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	out.write(''  +  sz);	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
5	[BUG]  [BUGGY]  out.write( "u0   "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  out.write( "u0   "  +  hex(ch));  break;  [BUGGY]    }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	out.write( "u0   "  +  hex(ch));  break;	      out.write(   "u00   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
6	[BUG]  [BUGGY]  }  else  if(ch  <  =  32  ||  ch  >  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  32  ||  ch  >  0x7f)  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  <  =  32  ||  ch  >  0x7f)  {	  }    else    if(ch    <    =    32)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
7	[BUG]  [BUGGY]  }  else  if(ch  ==  32)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  ==  32)  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  ==  32)  {	  }    else    if(ch    <    =    32)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
8	[BUG]  [BUGGY]  }  else  if(ch  >  0xff)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  >  0xff)  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  >  0xff)  {	  }    else    if(ch    >    32)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
9	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  out.write( "u00000 "  +  hex(ch));  break;  [BUGGY]    }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	out.write( "u00000 "  +  hex(ch));  break;	      out.write(   "u000   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
10	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  out.write( "u0000 "  +  hex(ch));  break;  [BUGGY]    }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	out.write( "u0000 "  +  hex(ch));  break;	      out.write(   "u00   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
11	[BUG]  [BUGGY]  }  else  if(ch  <  32  ||  ch  >  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  32  ||  ch  >  0x7f)  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  <  32  ||  ch  >  0x7f)  {	  }    else    if(ch    <    =    32)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
12	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  out.write( "u00000 "  +  hex(ch));  [BUGGY]    }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	out.write( "u00000 "  +  hex(ch));	      out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
13	[BUG]  [BUGGY]  }  else  if(ch  <  =  0x7FF)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  0x7FF)  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  <  =  0x7FF)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
14	[BUG]  [BUGGY]  }  else  if(ch  <  =  0x7F)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  0x7F)  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  <  =  0x7F)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
15	[BUG]  [BUGGY]  }  else  if(ch  ==  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  ==  '')  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  ==  '')  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
16	[BUG]  [BUGGY]  out.write(''  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  out.write(''  +  hex(ch));  [BUGGY]    }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	out.write(''  +  hex(ch));	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
17	[BUG]  [BUGGY]  out.write( "t00   "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  out.write( "t00   "  +  hex(ch));  [BUGGY]    }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	out.write( "t00   "  +  hex(ch));	      out.write(   "t   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
18	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  out.write( "u0000 "  +  hex(ch));  [BUGGY]    }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	out.write( "u0000 "  +  hex(ch));	      out.write(   "u00   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
19	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  out.write( ".s.IFJDCS ".charAt(i));  [BUGGY]    }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	out.write( ".s.IFJDCS ".charAt(i));	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
20	[BUG]  [BUGGY]  }  else  if(ch  <  =  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  '')  {  [BUGGY]    switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  break;  case  '\t':  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	}  else  if(ch  <  =  '')  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
