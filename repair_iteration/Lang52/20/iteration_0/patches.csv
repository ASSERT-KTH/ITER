bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(ch  <  32)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]  }  else  if(ch  <  32)  {  [BUGGY]  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	}  else  if(ch  <  32)  {	}  else  if  (ch  >  0x7f)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
2	[BUG]  [BUGGY]  }  else  if(ch  >  0x7f  ||  ch  <  32)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]  }  else  if(ch  >  0x7f  ||  ch  <  32)  {  [BUGGY]  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	}  else  if(ch  >  0x7f  ||  ch  <  32)  {	}  else  if  (ch  >  0x7f)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
3	[BUG]  [BUGGY]    [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]    [BUGGY]  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	  	}  else  if  (ch  >  0x7f)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
4	[BUG]  [BUGGY]    out.write( "u00 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]    out.write( "u00 "  +  hex(ch));  [BUGGY]  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	    out.write( "u00 "  +  hex(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	add
5	[BUG]  [BUGGY]    out.write( "u0 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]    out.write( "u0 "  +  hex(ch));  [BUGGY]  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	    out.write( "u0 "  +  hex(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	add
6	[BUG]  [BUGGY]    out.write( "u000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]    out.write( "u000 "  +  hex(ch));  [BUGGY]  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	    out.write( "u000 "  +  hex(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	add
7	[BUG]  [BUGGY]    out.write( "u1 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]    out.write( "u1 "  +  hex(ch));  [BUGGY]  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	    out.write( "u1 "  +  hex(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	add
8	[BUG]  [BUGGY]    out.write( "u00 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]    out.write( "u00 "  +  hex(ch));  break;  [BUGGY]  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	    out.write( "u00 "  +  hex(ch));  break;		non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	add
9	[BUG]  [BUGGY]    out.write( ".s.IFJDCS ".charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]    out.write( ".s.IFJDCS ".charAt(i));  [BUGGY]  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	    out.write( ".s.IFJDCS ".charAt(i));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	add
10	[BUG]  [BUGGY]    out.write('');  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]    out.write('');  [BUGGY]  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	    out.write('');		non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	add
11	[BUG]  [BUGGY]  }  else  if(ch  <  1000)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]  }  else  if(ch  <  1000)  {  [BUGGY]  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	}  else  if(ch  <  1000)  {	}  else  if  (ch  >  0x7f)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
12	[BUG]  [BUGGY]  }  else  if(ch  <  100)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]  }  else  if(ch  <  100)  {  [BUGGY]  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	}  else  if(ch  <  100)  {	}  else  if  (ch  >  0x7f)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
13	[BUG]  [BUGGY]  }  else  if(ch  <  =  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]  }  else  if(ch  <  =  0x7f)  {  [BUGGY]  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	}  else  if(ch  <  =  0x7f)  {	}  else  if  (ch  >  0x7f)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
14	[BUG]  [BUGGY]  }  else  if(ch  <  60)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]  }  else  if(ch  <  60)  {  [BUGGY]  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	}  else  if(ch  <  60)  {	}  else  if  (ch  >  0x7f)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
15	[BUG]  [BUGGY]  }  else  if(ch  <  12)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  [BUGGY]  }  else  if(ch  <  12)  {  [BUGGY]  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b':  out.write('\\');  out.write('b');  break;  case  '\n':  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	}  else  if(ch  <  12)  {	}  else  if  (ch  >  0x7f)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
