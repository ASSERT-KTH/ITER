bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  StringEscapeUtils.escapeJavaScript(out,  str);  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  StringEscapeUtils.escapeJavaScript(out,  str);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	StringEscapeUtils.escapeJavaScript(out,  str);	      	non-compiled	[CE]  empty  character  literal	5	None	replace
2	[BUG]  [BUGGY]  if(str  ==  null)  {  out.write(str);  }  else  {  escapeJavaScript(out,  str);  }  [CE]  empty  character  literal  [FE]                  ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  if(str  ==  null)  {  out.write(str);  }  else  {  escapeJavaScript(out,  str);  }  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	if(str  ==  null)  {  out.write(str);  }  else  {  escapeJavaScript(out,  str);  }	      	non-compiled	[CE]  empty  character  literal	5	None	replace
3	[BUG]  [BUGGY]  out.write('ufffd');  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write('ufffd');  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write('ufffd');	      if(str    ==    null)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  empty  character  literal	12	None	replace
4	[BUG]  [BUGGY]  out.write('ufffd',  str);  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write('ufffd',  str);  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write('ufffd',  str);	      if(str    ==    null)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  empty  character  literal	12	None	replace
5	[BUG]  [BUGGY]  out.write( "null ");  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write( "null ");  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write( "null ");	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	9	None	replace
6	[BUG]  [BUGGY]  out.write( "n ");  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write( "n ");  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write( "n ");	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	9	None	replace
7	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath());  [CE]  empty  character  literal  [FE]                  ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath());  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath());	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	9	None	replace
8	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes());  [CE]  empty  character  literal  [FE]                    ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes());  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes());	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	9	None	replace
9	[BUG]  [BUGGY]  out.write('n');  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write('n');  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write('n');	      if(str    ==    null)    {    out.write('n');    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	7	None	replace
10	[BUG]  [BUGGY]  if(str  ==  null)  {  out.write('n');  }  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  if(str  ==  null)  {  out.write('n');  }  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	if(str  ==  null)  {  out.write('n');  }	      if(str    ==    null)    {    out.write('n');    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	7	None	replace
11	[BUG]  [BUGGY]  EscapeJavaStyleString(out,  str,  true);  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  EscapeJavaStyleString(out,  str,  true);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	EscapeJavaStyleString(out,  str,  true);	  EscapeJavaStyleString(out,    str,    false);    	non-compiled	[CE]  empty  character  literal	2	None	replace
12	[BUG]  [BUGGY]  EscapeJavaStyleString(out,  str,  false,  true);  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  EscapeJavaStyleString(out,  str,  false,  true);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	EscapeJavaStyleString(out,  str,  false,  true);	  EscapeJavaStyleString(out,    str,    false);    	non-compiled	[CE]  empty  character  literal	2	None	replace
13	[BUG]  [BUGGY]  EscapeJavaStyleString(out,  str,  null);  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  EscapeJavaStyleString(out,  str,  null);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	EscapeJavaStyleString(out,  str,  null);	  EscapeJavaStyleString(out,    str,    false);    	non-compiled	[CE]  empty  character  literal	2	None	replace
14	[BUG]  [BUGGY]  escapeJavaStyleString(out,  str,  this);  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  escapeJavaStyleString(out,  str,  this);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	escapeJavaStyleString(out,  str,  this);	  escapeJavaStyleString(out,    str,    null);    	non-compiled	[CE]  empty  character  literal	4	None	replace
15	[BUG]  [BUGGY]  escapeJavaStyleString(out,  str,  null,  false);  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  escapeJavaStyleString(out,  str,  null,  false);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	escapeJavaStyleString(out,  str,  null,  false);	  escapeJavaStyleString(out,    str,    null);    	non-compiled	[CE]  empty  character  literal	4	None	replace
16	[BUG]  [BUGGY]  escapeJavaStyleString(out,  str,  null,  true);  [CE]  empty  character  literal  [FE]                  ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  escapeJavaStyleString(out,  str,  null,  true);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	escapeJavaStyleString(out,  str,  null,  true);	  escapeJavaStyleString(out,    str,    null);    	non-compiled	[CE]  empty  character  literal	4	None	replace
17	[BUG]  [BUGGY]  escapeJavaStyleString(out,  str,  null,  0);  [CE]  empty  character  literal  [FE]                    ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  escapeJavaStyleString(out,  str,  null,  0);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	escapeJavaStyleString(out,  str,  null,  0);	  escapeJavaStyleString(out,    str,    null);    	non-compiled	[CE]  empty  character  literal	4	None	replace
18	[BUG]  [BUGGY]  out.write(str,  0,  str.length());  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write(str,  0,  str.length());  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write(str,  0,  str.length());	      out.write(str);    	non-compiled	[CE]  empty  character  literal	6	None	replace
19	[BUG]  [BUGGY]  out.write(str,  false);  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write(str,  false);  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write(str,  false);	      out.write(str);    	non-compiled	[CE]  empty  character  literal	6	None	replace
20	[BUG]  [BUGGY]  out.write(str,  true);  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write(str,  true);  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write(str,  true);	      out.write(str);    	non-compiled	[CE]  empty  character  literal	6	None	replace
21	[BUG]  [BUGGY]  escapeJavaStyleString(out,  str,  false,  true);  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  escapeJavaStyleString(out,  str,  false,  true);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	escapeJavaStyleString(out,  str,  false,  true);	  escapeJavaStyleString(out,    str,    false);    	non-compiled	[CE]  empty  character  literal	1	None	replace
22	[BUG]  [BUGGY]  _escapeJavaStyleString(out,  str,  false);  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  _escapeJavaStyleString(out,  str,  false);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	_escapeJavaStyleString(out,  str,  false);	  escapeJavaStyleString(out,    str,    false);    	non-compiled	[CE]  empty  character  literal	1	None	replace
23	[BUG]  [BUGGY]  escapeJavaStyleString(out,  str,  0);  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  escapeJavaStyleString(out,  str,  0);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	escapeJavaStyleString(out,  str,  0);	  escapeJavaStyleString(out,    str);    	non-compiled	[CE]  empty  character  literal	3	None	replace
24	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  true);  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  true);  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(str,  true);	      OutputStream    out    =    new    FileOutputStream(str);    	non-compiled	[CE]  empty  character  literal	13	None	replace
25	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  false);  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  false);  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(str,  false);	      OutputStream    out    =    new    FileOutputStream(str);    	non-compiled	[CE]  empty  character  literal	13	None	replace
26	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str);  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str);  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str);	      OutputStream    out    =    new    FileOutputStream(str);    	non-compiled	[CE]  empty  character  literal	13	None	replace
27	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  0);  [CE]  empty  character  literal  [FE]                  ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  0);  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(str,  0);	      OutputStream    out    =    new    FileOutputStream(str);    	non-compiled	[CE]  empty  character  literal	13	None	replace
28	[BUG]  [BUGGY]  if(str  ==  null)  {  out.write('ufffd');  out.write('ufffd');  }  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  if(str  ==  null)  {  out.write('ufffd');  out.write('ufffd');  }  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	if(str  ==  null)  {  out.write('ufffd');  out.write('ufffd');  }	      if(str    ==    null)    {    out.write('ufffd');    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  empty  character  literal	11	None	replace
29	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString());  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString());  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(str.toString());	      if(str    ==    null)    {    out.write('ufffd');    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	8	None	replace
30	[BUG]  [BUGGY]  out.write( "# ");  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write( "# ");  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write( "# ");	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    escapeJavaStyleString(out,    str,    false);    }    	non-compiled	[CE]  empty  character  literal	15	None	replace
31	[BUG]  [BUGGY]  out.write('ufffd',  str.length());  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write('ufffd',  str.length());  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write('ufffd',  str.length());	      if(str    ==    null)    {    out.write('ufffd');    out.write('ufffd');    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
32	[BUG]  [BUGGY]  out.write('ufffd');  out.write('ufffd');  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write('ufffd');  out.write('ufffd');  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write('ufffd');  out.write('ufffd');	      if(str    ==    null)    {    out.write('ufffd');    out.write('ufffd');    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
33	[BUG]  [BUGGY]  out.write('-');  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write('-');  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write('-');	      if(str    ==    null)    {    out.write('ufffd');    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  empty  character  literal	11	None	replace
34	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "));  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "));  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "));	      if(str    ==    null)    {    out.write('n');    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	7	None	replace
35	[BUG]  [BUGGY]  out.write( "null ").write(str);  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write( "null ").write(str);  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write( "null ").write(str);	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	9	None	replace
36	[BUG]  [BUGGY]  out.write( "no-string ");  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write( "no-string ");  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write( "no-string ");	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	9	None	replace
37	[BUG]  [BUGGY]  out.write( "no-str ");  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write( "no-str ");  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write( "no-str ");	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    out.write('n');    }    	non-compiled	[CE]  empty  character  literal	14	None	replace
38	[BUG]  [BUGGY]  if(str  ==  null)  {  out.write('ufffd');  out.write(str);  }  else  {  out.write('ufffd');  }  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  if(str  ==  null)  {  out.write('ufffd');  out.write(str);  }  else  {  out.write('ufffd');  }  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	if(str  ==  null)  {  out.write('ufffd');  out.write(str);  }  else  {  out.write('ufffd');  }	      	non-compiled	[CE]  empty  character  literal	5	None	replace
39	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out);  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(out);  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(out);	      OutputStream    out    =    new    FileOutputStream(str);    	non-compiled	[CE]  empty  character  literal	13	None	replace
40	[BUG]  [BUGGY]  out.write( "none ");  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write( "none ");  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write( "none ");	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    escapeJavaStyleString(out,    str,    false);    }    	non-compiled	[CE]  empty  character  literal	15	None	replace
41	[BUG]  [BUGGY]  out.write( "u000 ");  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write( "u000 ");  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write( "u000 ");	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	9	None	replace
42	[BUG]  [BUGGY]  EscapeJavaStyleString(out,  str,  false,  null);  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  EscapeJavaStyleString(out,  str,  false,  null);  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	EscapeJavaStyleString(out,  str,  false,  null);	  EscapeJavaStyleString(out,    str,    false);    	non-compiled	[CE]  empty  character  literal	2	None	replace
43	[BUG]  [BUGGY]  out.write( "- ");  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write( "- ");  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write( "- ");	      if(str    ==    null)    {    out.write(   "n   ");    }    else    {    escapeJavaStyleString(out,    str,    false);    }    	non-compiled	[CE]  empty  character  literal	15	None	replace
44	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getBytes());  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getBytes());  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  out  =  new  FileOutputStream(out.getBytes());	      OutputStream    out    =    new    FileOutputStream(str);    	non-compiled	[CE]  empty  character  literal	13	None	replace
45	[BUG]  [BUGGY]  if(str  ==  null)  {  out.write('n');  }  else  {  escapeJavaScript(out,  str);  }  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  if(str  ==  null)  {  out.write('n');  }  else  {  escapeJavaScript(out,  str);  }  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	if(str  ==  null)  {  out.write('n');  }  else  {  escapeJavaScript(out,  str);  }	      	non-compiled	[CE]  empty  character  literal	5	None	replace
46	[BUG]  [BUGGY]  if(str  ==  null)  {  out.write( "n ");  }  else  {  escapeJavaScript(out,  str);  }  [CE]  empty  character  literal  [FE]                  ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  if(str  ==  null)  {  out.write( "n ");  }  else  {  escapeJavaScript(out,  str);  }  [BUGGY]    }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	if(str  ==  null)  {  out.write( "n ");  }  else  {  escapeJavaScript(out,  str);  }	      	non-compiled	[CE]  empty  character  literal	5	None	replace
47	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine();  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  OutputStream  str  =  out.readLine();  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	OutputStream  str  =  out.readLine();	      if(str!=    null)    {    out.write('n');    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	10	None	replace
48	[BUG]  [BUGGY]  out.write('u');  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    public  static  void  escapeJavaScript(Writer  out,  String  str)  throws  IOException  {    [BUGGY]  out.write('u');  [BUGGY]    escapeJavaStyleString(out,  str,  true);  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaScript  [RETURN_TYPE]  void  Writer  out  String  str  [VARIABLES]  boolean  String  str  Writer  out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	out.write('u');	      if(str    ==    null)    {    out.write('ufffd');    }    else    {    out.write(str);    }    	non-compiled	[CE]  empty  character  literal	8	None	replace
