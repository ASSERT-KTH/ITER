bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(escapeSingleQuotes)  {  writer  =  new  StringWriter(str.length()  *  2);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(escapeSingleQuotes)  {  writer  =  new  StringWriter(str.length()  *  2);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(escapeSingleQuotes)  {  writer  =  new  StringWriter(str.length()  *  2);  }	  StringWriter    writer    =    new    StringWriter(str.length()    /    2);    str    =    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(escapeSingleQuotes)  {  str  =  writer.toString();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(escapeSingleQuotes)  {  str  =  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(escapeSingleQuotes)  {  str  =  writer.toString();  }	  StringWriter    writer    =    new    StringWriter(str.length()    /    2);    str    =    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  true);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  true);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  true);	  return    StringEscapeUtils.escapeJavaStyleString(str,    false);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
4	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  false,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  false,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  false,  escapeSingleQuotes);	  return    StringEscapeUtils.escapeJavaStyleString(str,    false);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
5	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  false);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  false);  }  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  false);  }	  return    StringEscapeUtils.escapeJavaStyleString(str,    false);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
6	[BUG]  [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  true);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  true);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringUtils.escapeJavaStyleString(str,  true);	  return    StringEscapeUtils.escapeJavaStyleString(str,    false);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
7	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMissingException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMissingException( " ");  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMissingException( " ");  }	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
8	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ",  str);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingException( " ",  str);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleMissingException( " ",  str);	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
9	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2;  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2;  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2;	  return(str    ==    null)?    null    :    str.substring(0,    str.length();    	non-compiled	[CE]  ')'  expected	15	None	replace
10	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  +  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  +  2);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  +  2);	  return(str    ==    null)?    null    :    str.substring(0,    str.length();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
11	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  null);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  null);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes,  null);	  escapeJavaStyleString(str,    escapeSingleQuotes,    str);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
12	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  false);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  false);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes,  false);	  escapeJavaStyleString(str,    escapeSingleQuotes,    str);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
13	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
14	[BUG]  [BUGGY]  if(escapeSingleQuotes  >  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  >  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  >  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
15	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
16	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  else  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  writer.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  else  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  writer.printStackTrace();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  else  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  writer.printStackTrace();  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
17	[BUG]  [BUGGY]  escapeSingleQuotes(str.length())  {  if(escapeSingleQuotes)  {  return  null;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeSingleQuotes(str.length())  {  if(escapeSingleQuotes)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeSingleQuotes(str.length())  {  if(escapeSingleQuotes)  {  return  null;  }	  allowEscapeSingleQuotes(str.length())    {    if(escapeSingleQuotes)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
18	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2)  {  if(escapeSingleQuotes)  {  return  null;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2)  {  if(escapeSingleQuotes)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length()  *  2)  {  if(escapeSingleQuotes)  {  return  null;  }	  allowEscapeSingleQuotes(str.length())    {    if(escapeSingleQuotes)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
19	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  str.length()  /  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  str.length()  /  2);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  str.length()  /  2);	  StringWriter    writer    =    new    StringWriter(str.length()    +    str.length()    /    2);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
20	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  /  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  /  2);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  /  2);	  StringWriter    writer    =    new    StringWriter(str.length()    +    str.length()    /    2);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
21	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
22	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
23	[BUG]  [BUGGY]  return  StringUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
25	[BUG]  [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer);	  return    StringUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
26	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }	  return    StringUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
27	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  -  2);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  -  2);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
28	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  2);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  2);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
29	[BUG]  [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  >  0)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
30	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  ==  0)  {  return  null;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  ==  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  ==  0)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
31	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  escapeSingleQuotes);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    +    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	20	None	replace
32	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4  +  escapeSingleQuotes);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4  +  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  4  +  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    +    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	20	None	replace
33	[BUG]  [BUGGY]  return(str!=  null)?  null  :  str.substring(0,  str.length()  +  1,  escapeSingleQuotes);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str!=  null)?  null  :  str.substring(0,  str.length()  +  1,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str!=  null)?  null  :  str.substring(0,  str.length()  +  1,  escapeSingleQuotes);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    +    1,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	23	None	replace
34	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  1);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  1);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    *    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
35	[BUG]  [BUGGY]  Writer  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  Writer  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	Writer  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    -    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	33	None	replace
36	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  str.length()  *  2);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  str.length()  *  2);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes,  str.length()  *  2);	  escapeJavaStyleString(str,    escapeSingleQuotes,    str.length());    	non-compiled	[CE]  ';'  expected	3	None	replace
37	[BUG]  [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes.length());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes.length());  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(writer,  str,  escapeSingleQuotes.length());	  escapeJavaStyleString(str,    escapeSingleQuotes,    str.length());    	non-compiled	[CE]  ';'  expected	3	None	replace
38	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  writer.length());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  writer.length());  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes,  writer.length());	  escapeJavaStyleString(str,    escapeSingleQuotes,    str.length());    	non-compiled	[CE]  ';'  expected	3	None	replace
39	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  str.length()  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  str.length()  +  1);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes,  str.length()  +  1);	  escapeJavaStyleString(str,    escapeSingleQuotes,    str.length());    	non-compiled	[CE]  ';'  expected	3	None	replace
40	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toUpperCase();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.toUpperCase();  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toUpperCase();	  return(str    ==    null)?    null    :    str.toLowerCase();    	non-compiled	[CE]  ';'  expected	11	None	replace
43	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toLowerCase()  +  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.toLowerCase()  +  1;  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toLowerCase()  +  1;	  return(str    ==    null)?    null    :    str.toLowerCase();    	non-compiled	[CE]  ';'  expected	11	None	replace
44	[BUG]  [BUGGY]  return(str!=  null)?  null  :  str.toLowerCase();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str!=  null)?  null  :  str.toLowerCase();  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str!=  null)?  null  :  str.toLowerCase();	  return(str    ==    null)?    null    :    str.toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  Return(str  ==  null)?  null  :  str.toString()  + ", ";  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  Return(str  ==  null)?  null  :  str.toString()  + ", ";  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	Return(str  ==  null)?  null  :  str.toString()  + ", ";	  Return(str    ==    null)?    null    :    str.toString();    	non-compiled	[CE]  not  a  statement	56	None	replace
46	[BUG]  [BUGGY]  Return(str  ==  null)?  null  :  str,  escapeSingleQuotes.toString();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  Return(str  ==  null)?  null  :  str,  escapeSingleQuotes.toString();  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	Return(str  ==  null)?  null  :  str,  escapeSingleQuotes.toString();	  Return(str    ==    null)?    null    :    str.toString();    	non-compiled	[CE]  not  a  statement	56	None	replace
47	[BUG]  [BUGGY]  Return(str  ==  null)?  null  :  str.toString()  + "n ";  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  Return(str  ==  null)?  null  :  str.toString()  + "n ";  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	Return(str  ==  null)?  null  :  str.toString()  + "n ";	  Return(str    ==    null)?    null    :    str.toString();    	non-compiled	[CE]  not  a  statement	56	None	replace
48	[BUG]  [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length());    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
49	[BUG]  [BUGGY]  final  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  final  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	final  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length());    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
50	[BUG]  [BUGGY]  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes,  writer);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes,  writer);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes,  writer);	  aughtExceptionHandler.handleEscaped(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
51	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleEscaped(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
52	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleEscaped(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
53	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleEscaped(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
54	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes,  str);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes,  str);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes,  str);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes,    str);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
55	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length(),  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length(),  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  str.length(),  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes,    str);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
56	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str,  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes,    str);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
57	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + ",  escapeSingleQuotes ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + ",  escapeSingleQuotes ";  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toString()  + ",  escapeSingleQuotes ";	  return(str    ==    null)?    null    :    str.toString()    +   ",   ";    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
58	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(str.length()  >  0)  {  writer  =  writer.toString();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(str.length()  >  0)  {  writer  =  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(str.length()  >  0)  {  writer  =  writer.toString();  }	  StringWriter    writer    =    new    StringWriter(str.length());    str    =    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
59	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
60	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }	  escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
61	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  escapeJavaStyleString(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  escapeJavaStyleString(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  escapeJavaStyleString(str,  escapeSingleQuotes);  }	  escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
62	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  1);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  1);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    0);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
63	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  false);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  false);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  false);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    0);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
64	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  -1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  -1);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  -1);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    0);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
65	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(escapeSingleQuotes)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(escapeSingleQuotes)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(escapeSingleQuotes)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
66	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  4);	  StringWriter    writer    =    new    StringWriter(str.length());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
67	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  3);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  3);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  3);	  StringWriter    writer    =    new    StringWriter(str.length());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
68	[BUG]  [BUGGY]  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes,  writer);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes,  writer);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes,  writer);	  aughtExceptionHandler.handleEscape(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleEscape(str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	10	None	replace
70	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleEscape(str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	10	None	replace
71	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	52	None	replace
72	[BUG]  [BUGGY]  if(escapeSingleQuotes  >  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  >  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  >  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	52	None	replace
73	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	52	None	replace
74	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	52	None	replace
75	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  str.length());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  str.length());  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  str.length());	  StringWriter    writer    =    new    StringWriter(str.length()    +    str.length());    	non-compiled	[CE]  ';'  expected	21	None	replace
76	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length());  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length());	  StringWriter    writer    =    new    StringWriter(str.length()    +    str.length());    	non-compiled	[CE]  ';'  expected	21	None	replace
77	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4  +  str.length());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4  +  str.length());  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  4  +  str.length());	  StringWriter    writer    =    new    StringWriter(str.length()    +    str.length());    	non-compiled	[CE]  ';'  expected	21	None	replace
78	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes,  writer);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes,  writer);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str,  escapeSingleQuotes,  writer);	  allowEscapeSingleQuotes(str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	26	None	replace
79	[BUG]  [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeSingleQuotes(str,  escapeSingleQuotes);	  allowEscapeSingleQuotes(str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	26	None	replace
80	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length()    -    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	8	None	replace
81	[BUG]  [BUGGY]  if(str.length()  >  0)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  >  0)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  >  0)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length());    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
82	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  ==  0)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  ==  0)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length());    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
83	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  1,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  1,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  1,  escapeSingleQuotes);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    *    1,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
84	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length(),  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length(),  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length(),  escapeSingleQuotes);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    *    1,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
85	[BUG]  [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  >  0)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(escapeSingleQuotes.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
86	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  ==  0)  {  return  null;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  ==  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  ==  0)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(escapeSingleQuotes.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
87	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + "null ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + "null ";  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toString()  + "null ";	  return(str    ==    null)?    null    :    str.toString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
88	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingEscape(str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingEscape(str,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleMissingEscape(str,  escapeSingleQuotes);	  if(str    ==    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
89	[BUG]  [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes,  writer);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes,  writer);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(writer,  str,  escapeSingleQuotes,  writer);	  escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
90	[BUG]  [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes,  writer.toString());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes,  writer.toString());  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(writer,  str,  escapeSingleQuotes,  writer.toString());	  escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
91	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	try  {  [Delete]  catch(Throwable  t)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }	  if(escapeSingleQuotes)    {    return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
92	[BUG]  [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	try  {  [Delete]  catch(Exception  e)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }	  if(escapeSingleQuotes)    {    return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
93	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  ==  0)  {  return  null;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  ==  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  ==  0)  {  return  null;  }	  allowEscapeSingleQuotes(str.length())    {    if(escapeSingleQuotes    ||    str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
94	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  <  =  0)  {  return  null;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  <  =  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  <  =  0)  {  return  null;  }	  allowEscapeSingleQuotes(str.length())    {    if(escapeSingleQuotes    ||    str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
95	[BUG]  [BUGGY]  escapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  >  0)  {  return  null;  }	  allowEscapeSingleQuotes(str.length())    {    if(escapeSingleQuotes    ||    str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
96	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  throw  new  IllegalArgumentException( " ");  }	  {    [Delete]    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
97	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  +  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  +  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  +  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
98	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  *  2  +  escapeSingleQuotes,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  *  2  +  escapeSingleQuotes,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  *  2  +  escapeSingleQuotes,  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
99	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4  +  str.length()  *  4  +  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4  +  str.length()  *  4  +  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  4  +  str.length()  *  4  +  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
100	[BUG]  [BUGGY]  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes,  writer);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes,  writer);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes,  writer);	  aughtExceptionHandler.handleMismatch(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
101	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleMismatch(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
102	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleMismatch(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
103	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ",  str);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ",  str);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.throwAsIOException( " ",  str);	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
104	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( ", ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( ", ");  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.throwAsIOException( ", ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
105	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length()  /  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str.length()  /  2);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length()  /  2);	  allowEscapeSingleQuotes(str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
106	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str.length());  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length());	  allowEscapeSingleQuotes(str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
107	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length()  +  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str.length()  +  2);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length()  +  2);	  allowEscapeSingleQuotes(str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
108	[BUG]  [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length()    /    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
109	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleException( " ");  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler.handleException( " ");  }	  aughtExceptionHandler.handleException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
110	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleException( " ");  }  else  {  escapeJavaStyleString(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleException( " ");  }  else  {  escapeJavaStyleString(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler.handleException( " ");  }  else  {  escapeJavaStyleString(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
111	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes),  writer.toString();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes),  writer.toString();  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes),  writer.toString();	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes).toString();    	non-compiled	[CE]  ';'  expected	54	None	replace
112	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer).toString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer).toString();  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer).toString();	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes).toString();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
113	[BUG]  [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes).toString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes).toString();  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes).toString();	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes).toString();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
114	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  -  2,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  -  2,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  -  2,  escapeSingleQuotes);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    *    2,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
115	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  2,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  2,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  /  2,  escapeSingleQuotes);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    *    2,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
116	[BUG]  [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  0);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  0);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    0);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
117	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toLowerCase()  +  escapeSingleQuotes;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.toLowerCase()  +  escapeSingleQuotes;  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toLowerCase()  +  escapeSingleQuotes;	  return(str    ==    null)?    null    :    str.toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
118	[BUG]  [BUGGY]  aughtExceptionHandler.handleException( " ",  str);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleException( " ",  str);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleException( " ",  str);	  aughtExceptionHandler.handleException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
119	[BUG]  [BUGGY]  aughtExceptionHandler.handleException( ", ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleException( ", ");  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleException( ", ");	  aughtExceptionHandler.handleException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
120	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(str!=  null)  {  writer  =  new  StringWriter(str.length()  *  2);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(str!=  null)  {  writer  =  new  StringWriter(str.length()  *  2);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2);  if(str!=  null)  {  writer  =  new  StringWriter(str.length()  *  2);  }	  StringWriter    writer    =    new    StringWriter(str.length());    str    =    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
121	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  >  0)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(escapeSingleQuotes.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
122	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  ==  null)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
123	[BUG]  [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes,  0);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes,  0);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(writer,  str,  escapeSingleQuotes,  0);	  escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
124	[BUG]  [BUGGY]  combinByStyle(str,  escapeSingleQuotes);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  combinByStyle(str,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	combinByStyle(str,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
125	[BUG]  [BUGGY]  allowEscapeSingleQuotes();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes();  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes();	  if(escapeSingleQuotes)    {    return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
126	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleEscape(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
127	[BUG]  [BUGGY]  if(str!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length()    /    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
128	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(writer,  str).toString();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(writer,  str).toString();  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(writer,  str).toString();	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes).toString();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
129	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  /  2  +  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  /  2  +  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  /  2  +  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
130	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes,    str);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
131	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  escapeSingleQuotes,  str);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  escapeSingleQuotes,  str);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  escapeSingleQuotes,  str);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes,    str);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
132	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + ",  escapeSingleQuotes= ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + ",  escapeSingleQuotes= ";  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toString()  + ",  escapeSingleQuotes= ";	  return(str    ==    null)?    null    :    str.toString()    +   ",   ";    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
133	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + ",  null ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + ",  null ";  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toString()  + ",  null ";	  return(str    ==    null)?    null    :    str.toString()    +   ",   ";    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
134	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes)  {  if(str.length()  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes)  {  if(str.length()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes)  {  if(str.length()  >  0)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
135	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  if(str  ==  null)  {  return  null;  }	  >>    [Delete]    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
136	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str,  str.length());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str,  str.length());  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str,  str.length());	  StringWriter    writer    =    new    StringWriter(str.length());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
137	[BUG]  [BUGGY]  return  StringUtils.escapeJavaStyleString(writer,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringUtils.escapeJavaStyleString(writer,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringUtils.escapeJavaStyleString(writer,  escapeSingleQuotes);	  return    StringUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
138	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2  +  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2  +  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length()  *  2  +  escapeSingleQuotes);	  allowEscapeSingleQuotes(str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
139	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  ==  null)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
140	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  null)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes!=  null)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes!=  null)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
141	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2)  {  if(escapeSingleQuotes  ||  str.length()  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2)  {  if(escapeSingleQuotes  ||  str.length()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length()  *  2)  {  if(escapeSingleQuotes  ||  str.length()  >  0)  {  return  null;  }	  allowEscapeSingleQuotes(str.length())    {    if(escapeSingleQuotes    ||    str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
142	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes!=  null)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleMismatch(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
143	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleMismatch(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
144	[BUG]  [BUGGY]  aughtExceptionHandler.handleMismatch(str,  escapeJavaStyleString);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMismatch(str,  escapeJavaStyleString);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleMismatch(str,  escapeJavaStyleString);	  aughtExceptionHandler.handleMismatch(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
145	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  ==  null)  {  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }	  escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
146	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  null)  {  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes!=  null)  {  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes!=  null)  {  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  }	  escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
147	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  6);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  6);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  6);	  StringWriter    writer    =    new    StringWriter(str.length()    +    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
148	[BUG]  [BUGGY]  aughtExceptionHandler.handleEscaped(writer,  str);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleEscaped(writer,  str);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleEscaped(writer,  str);	  if(str.length()    ==    0)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
149	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  ==  null)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length());    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
150	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  null)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes!=  null)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes!=  null)  {  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length());    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
151	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer,  0);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer,  0);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer,  0);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
152	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  str)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes!=  str)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes!=  str)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
153	[BUG]  [BUGGY]  if(str  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  not  a  statement	52	None	replace
154	[BUG]  [BUGGY]  enableEscapeSingleQuotes(str,  escapeSingleQuotes);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  enableEscapeSingleQuotes(str,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	enableEscapeSingleQuotes(str,  escapeSingleQuotes);	  allowEscapeSingleQuotes(str,    escapeSingleQuotes);    	non-compiled	[CE]  not  a  statement	26	None	replace
155	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2  +  escapeSingleQuotes);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2  +  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2  +  escapeSingleQuotes);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    *    2);    	non-compiled	[CE]  not  a  statement	51	None	replace
156	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  *  2  -  1);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  *  2  -  1);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  *  2  -  1);	  StringWriter    writer    =    new    StringWriter(str.length()    +    str.length()    *    2);    	non-compiled	[CE]  not  a  statement	36	None	replace
157	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  not  a  statement	57	None	replace
158	[BUG]  [BUGGY]  if(str  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str  ==  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  not  a  statement	57	None	replace
159	[BUG]  [BUGGY]  if(str!=  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str!=  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str!=  null)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  not  a  statement	57	None	replace
160	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingException(escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleMissingException(escapeSingleQuotes);	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
161	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  else  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  else  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  }  else  {  return  null;  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
162	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str.length()  ==  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  if(str.length()  ==  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  if(str.length()  ==  0)  {  return  null;  }	  ==    [Delete]    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
163	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(1,  str.length());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return(str  ==  null)?  null  :  str.substring(1,  str.length());  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(1,  str.length());	  return(str    ==    null)?    null    :    str.substring(0,    str.length();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
164	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  ==  0)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  ==  0)  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
165	[BUG]  [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length()    -    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
166	[BUG]  [BUGGY]  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  ==  2  ||  escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
167	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  allowEscapeSingleQuotes(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
168	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str,  str.length()  *  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str,  str.length()  *  2);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str,  str.length()  *  2);	  StringWriter    writer    =    new    StringWriter(str.length());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
169	[BUG]  [BUGGY]  if(str.length()  >  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  >  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  >  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
170	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str  ==  null  ||  escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str  ==  null  ||  escapeSingleQuotes)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
171	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  ==  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  ==  0)  {  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }	  aughtExceptionHandler(writer,    str,    escapeSingleQuotes);    return    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
172	[BUG]  [BUGGY]  if(str.length()  *  2  ==  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(str.length()  *  2  ==  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  *  2  ==  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length());    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
173	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  str)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes!=  str)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes!=  str)  {  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleMismatch(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
174	[BUG]  [BUGGY]  >>  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  >>  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	>>	  if(str    ==    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
175	[BUG]  [BUGGY]  return  CharacterEscapeUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  return  CharacterEscapeUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  CharacterEscapeUtils.escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes,    writer);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
176	[BUG]  [BUGGY]  aughtExceptionHandler.handleException(str);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleException(str);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleException(str);	  aughtExceptionHandler.handleException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
177	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes,  escapeSingleQuotes);	  escapeJavaStyleString(str,    escapeSingleQuotes,    str);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
178	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  writer  =  writer.toString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  writer  =  writer.toString();  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2);  writer  =  writer.toString();	  StringWriter    writer    =    new    StringWriter(str.length());    str    =    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
179	[BUG]  [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  *  2)  {  return  null;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  *  2)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  *  2)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(escapeSingleQuotes.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
180	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  *  2)  {  return  null;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  *  2)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  *  2)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(escapeSingleQuotes.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
181	[BUG]  [BUGGY]  >=  [Delete]  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  >=  [Delete]  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	>=  [Delete]	  if(escapeSingleQuotes)    {    return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
182	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  else  {  return  str;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  else  {  return  str;  }  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  else  {  return  str;  }	  return    StringUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
183	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissing(str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissing(str,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleMissing(str,  escapeSingleQuotes);	  if(str.length()    ==    0)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
184	[BUG]  [BUGGY]  Return(str  ==  null)?  null  :  str.toString()  + ", "  +  escapeSingleQuotes);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  Return(str  ==  null)?  null  :  str.toString()  + ", "  +  escapeSingleQuotes);  [BUGGY]      }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	Return(str  ==  null)?  null  :  str.toString()  + ", "  +  escapeSingleQuotes);	  Return(str    ==    null)?    null    :    str.toString();    	non-compiled	[CE]  not  a  statement	56	None	replace
185	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes,  escapeSingleQuotes);  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes,  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes,    str);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
186	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMissingException( " ");  }  else  {  escapeJavaStyleString(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMissingException( " ");  }  else  {  escapeJavaStyleString(str,  escapeSingleQuotes);  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  aughtExceptionHandler.handleMissingException( " ");  }  else  {  escapeJavaStyleString(str,  escapeSingleQuotes);  }	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
187	[BUG]  [BUGGY]  escapeSingleQuotes  =  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes)  {  return  null;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeSingleQuotes  =  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeSingleQuotes  =  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes)  {  return  null;  }	  allowEscapeSingleQuotes(str.length())    {    if(escapeSingleQuotes)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
188	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  *  2  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  *  2  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  *  2  >  0)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
189	[BUG]  [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  *  2  ==  null)  {  return  null;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {      [BUGGY]  escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  *  2  ==  null)  {  return  null;  }  [BUGGY]      return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  *  2  ==  null)  {  return  null;  }	  allowEscapeSingleQuotes(str,    escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
