bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes,  writer);	      escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
2	[BUG]  [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	      escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
3	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  str.length());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  str.length());  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes,  str.length());	      escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length());	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    str    =    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  str  =  writer.toString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  str  =  writer.toString();  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length());  str  =  writer.toString();	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    str    =    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  str  =  writer.toString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  str  =  writer.toString();  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  /  2);  str  =  writer.toString();	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    str    =    writer.toString();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  allowEscapeSingleQuotes(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleEscape(str,  escapeSingleQuotes);	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toLowerCase();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.toLowerCase();  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toLowerCase();	  return    this;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length());  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length());	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  +  1);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  +  1);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  1);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  1);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
15	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length();  [CE]  ')'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length();  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length();	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
16	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(escapeSingleQuotes)  {  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  }	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  writer);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  0);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  0);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes,  0);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + ", ";  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + ", ";  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toString()  + ", ";	  return(str!=    null)?    null    :    str.toString();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length());  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  str.length());	      StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  escapeSingleQuotes);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  +  1,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  +  1,  escapeSingleQuotes);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  +  1,  escapeSingleQuotes);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    -    1,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
24	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  1,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  1,  escapeSingleQuotes);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  1,  escapeSingleQuotes);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    -    1,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
25	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  >  0)  {  return  null;  }  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(str.length()  >  0)  {  return  null;  }	      if(escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
26	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str,  escapeSingleQuotes);	      if(escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  >  0)  {  return  null;  }  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str,  escapeSingleQuotes)  {  if(escapeSingleQuotes.length()  >  0)  {  return  null;  }	      if(escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
28	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  allowEscapeSingleQuotes(str.length()  *  2);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length()  *  2);	      if(escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.throwAsIOException( " ");	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    return    writer.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  aughtExceptionHandler.handleException( " ");  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleException( " ");  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleException( " ");	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    return    writer.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
31	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleMissingException( " ");	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    return    writer.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
32	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  /  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  /  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  /  2);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  /  2);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  *  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  *  2);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  str.length()  *  2);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  /  2);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  2);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  2);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  2);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleMismatch(str,  escapeSingleQuotes);	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    return    writer.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
40	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  [Delete]  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	[Delete]	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    return    writer.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
41	[BUG]  [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringUtils.escapeJavaStyleString(str,  escapeSingleQuotes);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  false);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  false);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  false);	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
43	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  str);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  str);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  str);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  *  2  +  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  *  2  +  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  str.length()  *  2  +  escapeSingleQuotes);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  if(str  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  if(str  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler.handleEscaped(str,  escapeSingleQuotes);	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + "n ";  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.toString()  + "n ";  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.toString()  + "n ";	  return(str!=    null)?    null    :    str.toString();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes)  {  return  null;  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes)  {  return  null;  }  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes)  {  return  null;  }	      if(escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
49	[BUG]  [BUGGY]  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  >  0)  {  return  null;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  >  0)  {  return  null;  }  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	allowEscapeSingleQuotes(str.length())  {  if(escapeSingleQuotes  ||  str.length()  >  0)  {  return  null;  }	      if(escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
50	[BUG]  [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  str);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  escapeJavaStyleString(str,  escapeSingleQuotes,  str);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	escapeJavaStyleString(str,  escapeSingleQuotes,  str);	      escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler(writer,  str,  escapeSingleQuotes);	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2,  escapeSingleQuotes);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2,  escapeSingleQuotes);  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return(str  ==  null)?  null  :  str.substring(0,  str.length()  *  2,  escapeSingleQuotes);	  return(str    ==    null)?    null    :    str.substring(0,    str.length()    -    1,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes).toString();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes).toString();  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	return  StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuotes).toString();	  return    StringEscapeUtils.escapeJavaStyleString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
55	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  str.length()  *  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  str.length()  *  2);  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  str.length()  *  2);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    str.length()    *    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
56	[BUG]  [BUGGY]  Return(str  ==  null)?  null  :  str.toString();  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  Return(str  ==  null)?  null  :  str.toString();  [BUGGY]    }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	Return(str  ==  null)?  null  :  str.toString();	  return(str!=    null)?    null    :    str.toString();    	non-compiled	[CE]  not  a  statement	8	None	replace
57	[BUG]  [BUGGY]  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  return  writer.toString();	      if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    return    writer.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  >>  [Delete]  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  >>  [Delete]  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	>>  [Delete]	      if(escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
59	[BUG]  [BUGGY]  ==  [Delete]  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  ==  [Delete]  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	==  [Delete]	      if(escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
60	[BUG]  [BUGGY]  {  [Delete]  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  {  [Delete]  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	{  [Delete]	      if(escapeSingleQuotes)    {    if(str.length()    >    0)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
61	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {    [BUGGY]  if(str.length()  ==  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]    return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  boolean  escapeSingleQuotes  StringWriter  writer  String  str  IOException  ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	if(str.length()  ==  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  ';'  expected	2	None	replace
