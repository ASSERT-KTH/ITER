bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
2	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
3	[BUG]  [BUGGY]  if(!escapeSingleQuote  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(!escapeSingleQuote  ||  escapeSingleQuote)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(!escapeSingleQuote  ||  escapeSingleQuote)  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  ==  0xf)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(ch  ==  0xf)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
5	[BUG]  [BUGGY]  if(ch  <  =  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  <  =  0xf)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(ch  <  =  0xf)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
6	[BUG]  [BUGGY]  if(ch  <  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  <  0xf)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(ch  <  0xf)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
7	[BUG]  [BUGGY]  if(ch  >=  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  >=  0xf)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(ch  >=  0xf)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
8	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(ch));  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	out.write( ".s.IFJDCS "  +  charAt(ch));	      out.write(   ".s.IFJDCS   ".charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
9	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	out.write( ".s.IFJDCS "  +  hex(ch));	      out.write(   ".s.IFJDCS   ".charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
10	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u0000 "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	out.write( "u0000 "  +  hex(ch));	      out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
11	[BUG]  [BUGGY]  Out.write( "u00 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  Out.write( "u00 "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	Out.write( "u00 "  +  hex(ch));	      Out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
12	[BUG]  [BUGGY]  if(!escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(!escapeSingleQuote)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(!escapeSingleQuote)  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
13	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u00000 "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	out.write( "u00000 "  +  hex(ch));	      out.write(   "u00   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
14	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	out.write( "u00 "  +  hex(ch));  break;	      out.write(   "u000   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
15	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u0000 "  +  hex(ch));  break;  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	out.write( "u0000 "  +  hex(ch));  break;	      out.write(   "u000   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
16	[BUG]  [BUGGY]  out.write( "u00 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u00 ");  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	out.write( "u00 ");	      out.write(   "u000   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
17	[BUG]  [BUGGY]  out.write( "u0000 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u0000 ");  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	out.write( "u0000 ");	      out.write(   "u000   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
18	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote)  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
19	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeJavaStyleString)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  ||  escapeJavaStyleString)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(escapeSingleQuote  ||  escapeJavaStyleString)  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
20	[BUG]  [BUGGY]  if(ch  ==  ''')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  ==  ''')  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(ch  ==  ''')  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
21	[BUG]  [BUGGY]  if(ch  >  0xf  &&!escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  >  0xf  &&!escapeSingleQuote)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(ch  >  0xf  &&!escapeSingleQuote)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
22	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty())  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(escapeSingleQuote  &&  out.isEmpty())  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
23	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
24	[BUG]  [BUGGY]  if(ch  >  0xf  &&  hexValues[ch]!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  >  0xf  &&  hexValues[ch]!=  null)  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(ch  >  0xf  &&  hexValues[ch]!=  null)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
25	[BUG]  [BUGGY]  Out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  Out.write( "u0000 "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	Out.write( "u0000 "  +  hex(ch));	      Out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
26	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  ch  <  =  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  &&  ch  <  =  '')  {  [BUGGY]    case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	if(escapeSingleQuote  &&  ch  <  =  '')  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
