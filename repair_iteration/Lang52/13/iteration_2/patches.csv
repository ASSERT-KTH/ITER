bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write(ch,  ',');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(ch,  ',');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  ',');	  out.write(',');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
2	[BUG]  [BUGGY]  out.write(',',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(',',  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(',',  escapeSingleQuote);	  out.write(',');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
3	[BUG]  [BUGGY]  out.write(',',  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(',',  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(',',  str.length());	  out.write(',');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
4	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length(),  str.length());	  OutputStream    out    =    new    FileOutputStream(str.length()    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
5	[BUG]  [BUGGY]  While(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  While(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	While(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
7	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Thread.currentThread().setContextClassLoader(escapeSingleQuote);	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
8	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  str  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  str  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  str  ==  null)  {	  if(escapeSingleQuote    ||    out!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
9	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out  ==  null)  {	  if(escapeSingleQuote    ||    out!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
10	[BUG]  [BUGGY]  if(out  ||  escapeSingleQuote!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ||  escapeSingleQuote!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ||  escapeSingleQuote!=  null)  {	  if(escapeSingleQuote    ||    out!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
11	[BUG]  [BUGGY]  Out.write('.',  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write('.',  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write('.',  str,  escapeSingleQuote);	  Out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
12	[BUG]  [BUGGY]  Out.write(ch,  'ufffd',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write(ch,  'ufffd',  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write(ch,  'ufffd',  escapeSingleQuote);	  Out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
13	[BUG]  [BUGGY]  Out.write(str,  'ufffd',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write(str,  'ufffd',  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write(str,  'ufffd',  escapeSingleQuote);	  Out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
14	[BUG]  [BUGGY]  Out.write(',',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write(',',  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write(',',  escapeSingleQuote);	  Out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
15	[BUG]  [BUGGY]  out.write(str,  'ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(str,  'ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(str,  'ufffd');	  out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
16	[BUG]  [BUGGY]  out.write(str,  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(str,  ch,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(str,  ch,  escapeSingleQuote);	  out.write(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
17	[BUG]  [BUGGY]  out.write(str,  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(str,  escapeSingleQuote,  ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(str,  escapeSingleQuote,  ch);	  out.write(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
18	[BUG]  [BUGGY]  out.write(ch,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(ch,  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  str,  escapeSingleQuote);	  out.write(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
19	[BUG]  [BUGGY]  out.write(str,  escapeSingleQuote,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(str,  escapeSingleQuote,  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(str,  escapeSingleQuote,  str.length());	  out.write(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
20	[BUG]  [BUGGY]  if(out!=  null  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out!=  null  ||  str.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out!=  null  ||  str.length()  ==  0)  {	  if(out!=    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
21	[BUG]  [BUGGY]  out.write('ufffd',  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str);	  if(escapeSingleQuote)    {    out.write('ufffd',    str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
22	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd',  str);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd',  str);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote)  {  out.write('ufffd',  str);  }	  if(escapeSingleQuote)    {    out.write('ufffd',    str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
23	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote;	  if(escapeSingleQuote)    {    out.write('ufffd',    str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
24	[BUG]  [BUGGY]  out.write(StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuote));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuote));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(StringEscapeUtils.escapeJavaStyleString(str,  escapeSingleQuote));	  out.write(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
25	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(out,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(out,  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote.outputStream(out,  str,  escapeSingleQuote);	  OutputStream    out    =    escapeSingleQuote.outputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
26	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(out,  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote.outputStream(out,  str);	  OutputStream    out    =    escapeSingleQuote.outputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
27	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(str,  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(str,  ch,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote.outputStream(str,  ch,  escapeSingleQuote);	  OutputStream    out    =    escapeSingleQuote.outputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
28	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(str,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(str,  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote.outputStream(str,  str,  escapeSingleQuote);	  OutputStream    out    =    escapeSingleQuote.outputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
29	[BUG]  [BUGGY]  out.write('.',  str.charAt(escapeSingleQuote));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('.',  str.charAt(escapeSingleQuote));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('.',  str.charAt(escapeSingleQuote));	  out.write('ufffd',    str.charAt(escapeSingleQuote));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
30	[BUG]  [BUGGY]  out.write(',',  str.charAt(escapeSingleQuote));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(',',  str.charAt(escapeSingleQuote));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(',',  str.charAt(escapeSingleQuote));	  out.write('ufffd',    str.charAt(escapeSingleQuote));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
31	[BUG]  [BUGGY]  out.write(ch,  str.charAt(escapeSingleQuote));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(ch,  str.charAt(escapeSingleQuote));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  str.charAt(escapeSingleQuote));	  out.write('ufffd',    str.charAt(escapeSingleQuote));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
32	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(str.length()  -  1)!=  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  &&  out.charAt(str.length()  -  1)!=  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  &&  out.charAt(str.length()  -  1)!=  '/')  {	  if(escapeSingleQuote    ||    out.charAt(str.length()    -    1)!=    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
33	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  str.charAt(str.length()  -  1)!=  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  str.charAt(str.length()  -  1)!=  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  str.charAt(str.length()  -  1)!=  '/')  {	  if(escapeSingleQuote    ||    out.charAt(str.length()    -    1)!=    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
34	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.charAt(str.length())!=  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  out.charAt(str.length())!=  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out.charAt(str.length())!=  '/')  {	  if(escapeSingleQuote    ||    out.charAt(str.length()    -    1)!=    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
35	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  *  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  *  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  *  1);	  OutputStream    out    =    new    FileOutputStream(str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
36	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath(),  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath(),  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.getPath(),  str);	  OutputStream    out    =    new    FileOutputStream(out.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
37	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.toString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.toString());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.toString());	  OutputStream    out    =    new    FileOutputStream(out.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
38	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath(),  str,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getPath(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
39	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote,  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote,  str.length());	  OutputStream    out    =    new    FileOutputStream(str.getPath(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
40	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath(),  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath(),  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.getPath(),  str,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getPath(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
41	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getPath(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getPath(),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str.getPath(),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getPath(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
42	[BUG]  [BUGGY]  if(str  ==  null  ||  out  ==  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  out  ==  null  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  out  ==  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    str    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
43	[BUG]  [BUGGY]  if(out  ==  null  ||  out  ==  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  out  ==  null  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  out  ==  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    str    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
44	[BUG]  [BUGGY]  if(out  ==  null  ||  str  ==  null  ||  out.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  str  ==  null  ||  out.length()!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  str  ==  null  ||  out.length()!=  0)  {	  if(out    ==    null    ||    str    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
45	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(ch);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote)  {  out.write(ch);  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
46	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(ch,  'ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(ch,  'ufffd');  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote)  {  out.write(ch,  'ufffd');  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
47	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote.outputStream();	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
48	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  escapeSingleQuote  ||  out.length()  ==  0)  {	  if(escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
49	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  str.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  str.length()  ==  0)  {	  if(escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
50	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  &&  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  &&  out.length()  ==  0)  {	  if(escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
51	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  out.length()  >  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(!escapeSingleQuote  &&  out.length()  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(!escapeSingleQuote  &&  out.length()  >  0)  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
52	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  out.charAt(str.length()  -  1)!=  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(!escapeSingleQuote  &&  out.charAt(str.length()  -  1)!=  'n')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(!escapeSingleQuote  &&  out.charAt(str.length()  -  1)!=  'n')  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
53	[BUG]  [BUGGY]  out.write('F',  str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('F',  str.length()  -  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('F',  str.length()  -  1);	  out.write('ufffd',    str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
54	[BUG]  [BUGGY]  out.write('.',  str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('.',  str.length()  -  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('.',  str.length()  -  1);	  out.write('ufffd',    str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
55	[BUG]  [BUGGY]  out.write('f',  str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('f',  str.length()  -  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('f',  str.length()  -  1);	  out.write('ufffd',    str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
56	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  str  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  str  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  str  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote    ||    out    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
57	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  &&  out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  &&  out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote    ||    out    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
58	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote    ||    out    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
59	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out,  str.length());	  OutputStream    out    =    getOutputStream(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
60	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath(),  str.length());	  OutputStream    out    =    new    FileOutputStream(str.getPath()    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
61	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote)throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote)throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote)throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");	  if(out    ==    null    ||    escapeSingleQuote),    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
62	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote)throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote)throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote)throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  if(out    ==    null    ||    escapeSingleQuote),    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
63	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote),  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote),  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote),  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  if(out    ==    null    ||    escapeSingleQuote),    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
64	[BUG]  [BUGGY]  safeEscapeSingleQuote();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeEscapeSingleQuote();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscapeSingleQuote();	  safeEscapeSingleQuote()    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
65	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  escapeSingleQuote;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  escapeSingleQuote;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  escapeSingleQuote;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
66	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.toCharArray();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.toCharArray();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
67	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.charAt(0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.charAt(0);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
68	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  str.length()  ==  0)  {	  if(out    ==    null    ||    str.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
69	[BUG]  [BUGGY]  if(str  ==  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    str.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
70	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  str.length()!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  str.length()!=  0)  {	  if(out    ==    null    ||    str.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
71	[BUG]  [BUGGY]  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
72	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
73	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
74	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString(),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.toString(),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.toString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
75	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getAbsolutePath(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getAbsolutePath(),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getAbsolutePath(),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getAbsolutePath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
76	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out,  str,  escapeSingleQuote);	  OutputStream    out    =    getOutputStream(out,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
77	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.charAt(0));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out,  str.charAt(0));	  OutputStream    out    =    getOutputStream(out,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
78	[BUG]  [BUGGY]  safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
79	[BUG]  [BUGGY]  safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
80	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  new  FileOutputStream(str.getPath());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  new  FileOutputStream(str.getPath());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  new  FileOutputStream(str.getPath());	  if(escapeSingleQuote)    {    out.write(str,    escapeSingleQuote);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
81	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.readLine();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  out.readLine();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  out.readLine();	  if(escapeSingleQuote)    {    out.write(str,    escapeSingleQuote);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
82	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  new  FileOutputStream(str,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  new  FileOutputStream(str,  0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  new  FileOutputStream(str,  0);	  if(escapeSingleQuote)    {    out.write(str,    escapeSingleQuote);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
83	[BUG]  [BUGGY]  Output.write(ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Output.write(ch,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Output.write(ch,  escapeSingleQuote);	  if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
84	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(0)  ==  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  &&  out.charAt(0)  ==  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  &&  out.charAt(0)  ==  '/')  {	  if(escapeSingleQuote    ||    out.charAt(0)    ==    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
85	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  str.charAt(0)  ==  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  str.charAt(0)  ==  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  str.charAt(0)  ==  '/')  {	  if(escapeSingleQuote    ||    out.charAt(0)    ==    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
86	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {	  if(escapeSingleQuote    ||    out.charAt(0)    ==    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
87	[BUG]  [BUGGY]  while(!escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  while(!escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	while(!escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	  while(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
88	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  while(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	while(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  while(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
89	[BUG]  [BUGGY]  while(str.equals(escapeSingleQuote))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  while(str.equals(escapeSingleQuote))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	while(str.equals(escapeSingleQuote))  {  throw  new  IllegalArgumentException( " ");  }	  while(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
90	[BUG]  [BUGGY]  if(str  ==  null  ||  str  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  str  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  str  ==  null)  {	  if(str    ==    null    ||    out    ==    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
91	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length(),  str,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.length(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
92	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote,  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote,  str.length());	  OutputStream    out    =    new    FileOutputStream(str.length(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
93	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote,  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote,  str.charAt(0));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote,  str.charAt(0));	  OutputStream    out    =    new    FileOutputStream(str.length(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
94	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length(),  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length(),  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.length(),  str,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.length(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
95	[BUG]  [BUGGY]  out  =  getOutputStream(out,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out  =  getOutputStream(out,  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out  =  getOutputStream(out,  str,  escapeSingleQuote);	  OutputStream    out    =    getOutputStream(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
96	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.toCharArray());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.toCharArray());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out,  str.toCharArray());	  OutputStream    out    =    getOutputStream(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
97	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(str,  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(str,  out);	  OutputStream    out    =    getOutputStream(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
98	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes(),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes(),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getBytes());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
99	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes(),  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes(),  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes(),  str);	  OutputStream    out    =    new    FileOutputStream(str.getBytes());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
100	[BUG]  [BUGGY]  out.write(ch,  0,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(ch,  0,  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  0,  str.length());	  out.write(ch,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
101	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getBytes(   "UTF-8   "));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
102	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  str);	  OutputStream    out    =    new    FileOutputStream(str.getBytes(   "UTF-8   "));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
103	[BUG]  [BUGGY]  if(escapeSingleQuote  ==  null  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ==  null  ||  str.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ==  null  ||  str.length()  ==  0)  {	  if(str    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
104	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
105	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  str.length());	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
106	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  ch);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
107	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote,  0);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
108	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.length()!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  str.length()!=  0)  {	  if(out    ==    null    ||    escapeSingleQuote    ||    out.length()!=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
109	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.length()  >=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.length()  >=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  out.length()  >=  0)  {	  if(out    ==    null    ||    escapeSingleQuote    ||    out.length()!=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
110	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote.length()  ==  0)  {	  if(escapeSingleQuote    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
111	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {	  if(escapeSingleQuote    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
112	[BUG]  [BUGGY]  if(escapeSingleQuote  ==  null  ||  out.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ==  null  ||  out.length()!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ==  null  ||  out.length()!=  0)  {	  if(escapeSingleQuote    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
113	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str.length());	  OutputStream    out    =    new    FileOutputStream(out.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
114	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getBytes());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getBytes());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.getBytes());	  OutputStream    out    =    new    FileOutputStream(out.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
115	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length(),  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length(),  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.length(),  str);	  OutputStream    out    =    new    FileOutputStream(out.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
116	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  str.charAt(0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  str.charAt(0);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
117	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  out.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  out.charAt(0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  out.charAt(0);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
118	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  str.charAt(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  str.charAt(1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  str.charAt(1);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
119	[BUG]  [BUGGY]  safeEscape(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeEscape(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscape(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	  safeEscape(str,    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
120	[BUG]  [BUGGY]  SafeEscape(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  SafeEscape(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	SafeEscape(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	  safeEscape(str,    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
121	[BUG]  [BUGGY]  safeEscape(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeEscape(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscape(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ".);  }	  safeEscape(str,    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
122	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.getChars());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  str.getChars());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out,  str.getChars());	  OutputStream    out    =    getOutputStream(out.getChars());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
123	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out.getChars(),  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out.getChars(),  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out.getChars(),  str);	  OutputStream    out    =    getOutputStream(out.getChars());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
124	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str.getChars());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(str.getChars());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(str.getChars());	  OutputStream    out    =    getOutputStream(out.getChars());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
125	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out.getChars(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out.getChars(0));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out.getChars(0));	  OutputStream    out    =    getOutputStream(out.getChars());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
126	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  str.length());	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
127	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(str,  escapeSingleQuote,  ch);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
128	[BUG]  [BUGGY]  out.write('.',  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('.',  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('.',  str.length());	  out.write('ufffd',    str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
129	[BUG]  [BUGGY]  out.write(str.charAt(0),  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(str.charAt(0),  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(str.charAt(0),  str.length());	  out.write('ufffd',    str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
130	[BUG]  [BUGGY]  out.write('/',  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('/',  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('/',  str.length());	  out.write('/');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
131	[BUG]  [BUGGY]  out.write(ch,  '/');  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(ch,  '/');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  '/');	  out.write('/');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
132	[BUG]  [BUGGY]  out.write('/',  str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('/',  str.length()  -  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('/',  str.length()  -  1);	  out.write('/');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
133	[BUG]  [BUGGY]  if(out  ==  null  ||  out.length()  >=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  out.length()  >=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  out.length()  >=  0)  {	  if(out    ==    null    ||    out.length()!=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
134	[BUG]  [BUGGY]  out.write('.',  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('.',  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('.',  str,  escapeSingleQuote);	  out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
135	[BUG]  [BUGGY]  out.write('ufffd',  str.toString());  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str.toString());  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.toString());  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    out.toString());    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
136	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str.toString());  out.write('ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str.toString());  out.write('ufffd');  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write('ufffd',  str.toString());  out.write('ufffd');  }	  if(escapeSingleQuote)    {    out.write('ufffd',    out.toString());    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
137	[BUG]  [BUGGY]  out.write('ufffd',  str.toString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str.toString());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.toString());	  if(escapeSingleQuote)    {    out.write('ufffd',    out.toString());    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
138	[BUG]  [BUGGY]  out  =  getOutputStream(str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out  =  getOutputStream(str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out  =  getOutputStream(str,  escapeSingleQuote);	  OutputStream    out    =    getOutputStream(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
139	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  &&  out.isEmpty())  {	  if(escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
140	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  out.isEmpty())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  escapeSingleQuote  ||  out.isEmpty())  {	  if(escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
141	[BUG]  [BUGGY]  if(out.isEmpty()  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out.isEmpty()  ||  escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out.isEmpty()  ||  escapeSingleQuote)  {	  if(escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
142	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  str.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  str.isEmpty())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  str.isEmpty())  {	  if(escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
143	[BUG]  [BUGGY]  out.write('ufffd',  str.length()  -  1);  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str.length()  -  1);  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.length()  -  1);  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    str.length()    -    1);    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
144	[BUG]  [BUGGY]  out.write('ufffd',  str.length());  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str.length());  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.length());  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    str.length()    -    1);    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
145	[BUG]  [BUGGY]  Out.write('ufffd',  str.length()  -  1);  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write('ufffd',  str.length()  -  1);  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write('ufffd',  str.length()  -  1);  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    str.length()    -    1);    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
146	[BUG]  [BUGGY]  out.write('ufffd',  str.charAt(0));  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str.charAt(0));  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.charAt(0));  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    str.charAt(0));    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
147	[BUG]  [BUGGY]  out.write('ufffd',  str.charAt(1));  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str.charAt(1));  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.charAt(1));  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    str.charAt(0));    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
148	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str.charAt(1));  out.write('ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str.charAt(1));  out.write('ufffd');  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write('ufffd',  str.charAt(1));  out.write('ufffd');  }	  if(escapeSingleQuote)    {    out.write('ufffd',    str.charAt(0));    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
149	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  out.getPath());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  out.getPath());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str,  out.getPath());	  OutputStream    out    =    new    FileOutputStream(out,    str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
150	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.toString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.toString());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str.toString());	  OutputStream    out    =    new    FileOutputStream(out,    str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
151	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getPath()  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getPath()  +  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str.getPath()  +  1);	  OutputStream    out    =    new    FileOutputStream(out,    str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
152	[BUG]  [BUGGY]  if(escapeSingleQuote  ==  null  ||  str  ==  null  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ==  null  ||  str  ==  null  ||  escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ==  null  ||  str  ==  null  ||  escapeSingleQuote)  {	  if(out    ==    null    ||    str    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
153	[BUG]  [BUGGY]  if(str  ==  null  ||  out  ==  null  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  out  ==  null  ||  escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  out  ==  null  ||  escapeSingleQuote)  {	  if(out    ==    null    ||    str    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
154	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  str.length()  ==  0)  {	  if(out    ==    null    ||    escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
155	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
156	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote,  ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote,  ch);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
157	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote,  str.length());	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
158	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  str,  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  str,  escapeSingleQuote,  ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  str,  escapeSingleQuote,  ch);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
159	[BUG]  [BUGGY]  out.write('ufffd',  'ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  'ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  'ufffd');	  out.write('ufffd');    out.write('ufffd');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
160	[BUG]  [BUGGY]  out.write(ch,  'n');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(ch,  'n');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  'n');	  out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
161	[BUG]  [BUGGY]  out.write('n',  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('n',  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('n',  str.length());	  out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
162	[BUG]  [BUGGY]  out.write('n',  str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('n',  str.length()  -  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('n',  str.length()  -  1);	  out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
163	[BUG]  [BUGGY]  safeEscapeSingleQuote(out))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeEscapeSingleQuote(out))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscapeSingleQuote(out))  {  throw  new  IllegalArgumentException( " ");  }	  safeEscapeSingleQuote())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
164	[BUG]  [BUGGY]  if(out!=  null  ||  str  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out!=  null  ||  str  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out!=  null  ||  str  ==  null)  {	  if(out    ==    null    ||    str!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
165	[BUG]  [BUGGY]  if(escapeJavaStyleString  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeJavaStyleString  ||  escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeJavaStyleString  ||  escapeSingleQuote)  {	  if(escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
166	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeJavaStyleString)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  escapeJavaStyleString)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  escapeJavaStyleString)  {	  if(escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
167	[BUG]  [BUGGY]  if(!escapeJavaStyleString)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(!escapeJavaStyleString)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(!escapeJavaStyleString)  {	  if(escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
168	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.substring(0,  str.length()  -  1):  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.substring(0,  str.length()  -  1):  null;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.substring(0,  str.length()  -  1):  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    str    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
169	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  null;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    str    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
170	[BUG]  [BUGGY]  out.write(str,  0,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(str,  0,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(str,  0,  escapeSingleQuote);	  out.write(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
171	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out,  ch);	  OutputStream    out    =    getOutputStream(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
172	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  &&  out!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  &&  out!=  null)  {	  if(escapeSingleQuote    ||    out!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
173	[BUG]  [BUGGY]  escapeSingleQuote(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  escapeSingleQuote(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	escapeSingleQuote(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
174	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  out.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
175	[BUG]  [BUGGY]  out.write('ufffd',  str.length()  +  1);  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str.length()  +  1);  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.length()  +  1);  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    str.length()    -    1);    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
176	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
177	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0),  0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0),  0);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
178	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getChars(0),  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getChars(0),  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.getChars(0),  str,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
179	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out.getLines());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out.getLines());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out.getLines());	  OutputStream    out    =    getOutputStream(out.getChars());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
180	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out.toString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out.toString());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out.toString());	  OutputStream    out    =    getOutputStream(out.getChars());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
181	[BUG]  [BUGGY]  out.write('-',  str.charAt(escapeSingleQuote));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('-',  str.charAt(escapeSingleQuote));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('-',  str.charAt(escapeSingleQuote));	  out.write('ufffd',    str.charAt(escapeSingleQuote));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
182	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length()  -  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.length()  -  1);	  OutputStream    out    =    new    FileOutputStream(out.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
183	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.write(ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.write(ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.write(ch);	  if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
184	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str,  escapeSingleQuote);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str,  escapeSingleQuote);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write('ufffd',  str,  escapeSingleQuote);  }	  if(escapeSingleQuote)    {    out.write('ufffd',    str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
185	[BUG]  [BUGGY]  if(out  ==  null  ||  out  ==  null  ||  str  ==  null  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  out  ==  null  ||  str  ==  null  ||  escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  out  ==  null  ||  str  ==  null  ||  escapeSingleQuote)  {	  if(out    ==    null    ||    str    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
186	[BUG]  [BUGGY]  if(out  ==  null  ||  str!=  null  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  str!=  null  ||  escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  str!=  null  ||  escapeSingleQuote)  {	  if(out    ==    null    ||    str    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
187	[BUG]  [BUGGY]  if(out!=  null  ||  str  ==  null  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out!=  null  ||  str  ==  null  ||  escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out!=  null  ||  str  ==  null  ||  escapeSingleQuote)  {	  if(out    ==    null    ||    str    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
188	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote?  getOutputStream(out):  getOutputStream(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote?  getOutputStream(out):  getOutputStream(str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote?  getOutputStream(out):  getOutputStream(str);	  OutputStream    out    =    getOutputStream(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
189	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote?  getOutputStream(out,  str):  getOutputStream(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote?  getOutputStream(out,  str):  getOutputStream(str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote?  getOutputStream(out,  str):  getOutputStream(str);	  OutputStream    out    =    getOutputStream(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
190	[BUG]  [BUGGY]  OutputStream  outSingleQuote  =  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  outSingleQuote  =  str.charAt(0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  outSingleQuote  =  str.charAt(0);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
191	[BUG]  [BUGGY]  out.write('uff');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('uff');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('uff');	  out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
192	[BUG]  [BUGGY]  if(out  ==  null  ||  out  ==  null  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  out  ==  null  ||  str.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  out  ==  null  ||  str.length()  ==  0)  {	  if(out    ==    null    ||    str    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
193	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length(),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.length(),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.length(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
194	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote,  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote,  str);	  OutputStream    out    =    new    FileOutputStream(str.length(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
195	[BUG]  [BUGGY]  if(out  ||  escapeSingleQuote.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ||  escapeSingleQuote.isEmpty())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ||  escapeSingleQuote.isEmpty())  {	  if(escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
196	[BUG]  [BUGGY]  if(out,  escapeSingleQuote  ||  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out,  escapeSingleQuote  ||  out.isEmpty())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out,  escapeSingleQuote  ||  out.isEmpty())  {	  if(escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
197	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(ch,  escapeSingleQuote);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote)  {  out.write(ch,  escapeSingleQuote);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write(ch,  escapeSingleQuote);  }	  if(escapeSingleQuote)    {    out.write(str,    escapeSingleQuote);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
198	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getAbsolutePath());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getAbsolutePath());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.getAbsolutePath());	  OutputStream    out    =    new    FileOutputStream(str.getAbsolutePath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
199	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getAbsolutePath());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getAbsolutePath());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str.getAbsolutePath());	  OutputStream    out    =    new    FileOutputStream(str.getAbsolutePath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
200	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {	  if(escapeSingleQuote    ||    out.charAt(0)    ==    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
201	[BUG]  [BUGGY]  if(out!=  null  ||  escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out!=  null  ||  escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out!=  null  ||  escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {	  if(escapeSingleQuote    ||    out.charAt(0)    ==    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
202	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getBytes());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getBytes());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str.getBytes());	  OutputStream    out    =    new    FileOutputStream(str.getBytes());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
203	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes(escapeSingleQuote));  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes(escapeSingleQuote));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes(escapeSingleQuote));	  OutputStream    out    =    new    FileOutputStream(str.getBytes());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
204	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out,  ch,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out,  ch,  escapeSingleQuote);	  OutputStream    out    =    getOutputStream(out,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
205	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {	  if(escapeSingleQuote    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
206	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "),  out);	  OutputStream    out    =    new    FileOutputStream(str.getBytes(   "UTF-8   "));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
207	[BUG]  [BUGGY]  out.write('%',  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('%',  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('%',  str.length());	  out.write('ufffd',    str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
208	[BUG]  [BUGGY]  out.write(ch,  0,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(ch,  0,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  0,  escapeSingleQuote);	  out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
209	[BUG]  [BUGGY]  out.write(ch,  escapeSingleQuote,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(ch,  escapeSingleQuote,  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  escapeSingleQuote,  str);	  out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
210	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write('ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote)  {  out.write('ufffd');  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote)  {  out.write('ufffd');  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
211	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write(',');  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote)  {  out.write(',');  }	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
212	[BUG]  [BUGGY]  if(escapeJavaStyleString  ||  out  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeJavaStyleString  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeJavaStyleString  ||  out  ==  null)  {	  if(escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
213	[BUG]  [BUGGY]  if(escapeJavaStyleString  ||  out!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeJavaStyleString  ||  out!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeJavaStyleString  ||  out!=  null)  {	  if(escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
214	[BUG]  [BUGGY]  if(escapeJavaStyleString  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeJavaStyleString  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeJavaStyleString  ||  out.length()  ==  0)  {	  if(escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
215	[BUG]  [BUGGY]  if(out  ==  null  ||  out!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  out!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  out!=  null)  {	  if(out    ==    null    ||    str!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
216	[BUG]  [BUGGY]  safeEscape(out,  str)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeEscape(out,  str)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscape(out,  str)  {  throw  new  IllegalArgumentException( " ");  }	  safeEscape(str,    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
217	[BUG]  [BUGGY]  InputStream  out  =  getOutputStream(out,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  InputStream  out  =  getOutputStream(out,  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	InputStream  out  =  getOutputStream(out,  str,  escapeSingleQuote);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
218	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath(),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.getPath(),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(out.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
219	[BUG]  [BUGGY]  out.write('n',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('n',  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('n',  escapeSingleQuote);	  out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
220	[BUG]  [BUGGY]  out.write('n',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('n',  ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('n',  ch);	  out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
221	[BUG]  [BUGGY]  out.write('n',  'ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('n',  'ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('n',  'ufffd');	  out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
222	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str.length();	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
223	[BUG]  [BUGGY]  Out.write(':',  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write(':',  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write(':',  str,  escapeSingleQuote);	  Out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
224	[BUG]  [BUGGY]  out.write(',',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(',',  ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(',',  ch);	  out.write(',');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
225	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath()  /  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath()  /  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath()  /  1);	  OutputStream    out    =    new    FileOutputStream(str.getPath()    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
226	[BUG]  [BUGGY]  out.write(StringEscapeUtils.escapeJavaStyleString(str),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(StringEscapeUtils.escapeJavaStyleString(str),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(StringEscapeUtils.escapeJavaStyleString(str),  escapeSingleQuote);	  out.write(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
227	[BUG]  [BUGGY]  OutputStream  out  =  str.outputStream(escapeSingleQuote,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  str.outputStream(escapeSingleQuote,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  str.outputStream(escapeSingleQuote,  escapeSingleQuote);	  OutputStream    out    =    escapeSingleQuote.outputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
228	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.toURI());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.toURI());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str.toURI());	  OutputStream    out    =    new    FileOutputStream(out,    str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
229	[BUG]  [BUGGY]  if(out!=  null  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out!=  null  ||  escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out!=  null  ||  escapeSingleQuote)  {	  if(str    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
230	[BUG]  [BUGGY]  out.write('/',  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('/',  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('/',  str);	  out.write('/');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
231	[BUG]  [BUGGY]  out.write(',',  str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(',',  str.length()  -  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(',',  str.length()  -  1);	  out.write('ufffd',    str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
232	[BUG]  [BUGGY]  out.write('f',  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('f',  str.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('f',  str.length());	  out.write('ufffd',    str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
233	[BUG]  [BUGGY]  if(out  ==  null  ||  out  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  out  ==  null)  {	  if(str    ==    null    ||    out    ==    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
234	[BUG]  [BUGGY]  escapeSingleQuote(out,  str)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  escapeSingleQuote(out,  str)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	escapeSingleQuote(out,  str)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
235	[BUG]  [BUGGY]  escapeSingleQuote(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  escapeSingleQuote(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	escapeSingleQuote(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
236	[BUG]  [BUGGY]  escapeSingleQuote(out,  str)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  escapeSingleQuote(out,  str)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	escapeSingleQuote(out,  str)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
237	[BUG]  [BUGGY]  escapeSingleQuote(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  escapeSingleQuote(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	escapeSingleQuote(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
238	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote)return;  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote)return;  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote)return;  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");	  if(out    ==    null    ||    escapeSingleQuote),    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
239	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote)return;  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote)return;  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote)return;  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  if(out    ==    null    ||    escapeSingleQuote),    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
240	[BUG]  [BUGGY]  escapeSingleQuote  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  escapeSingleQuote  =  false;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	escapeSingleQuote  =  false;	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
241	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toCharArray()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toCharArray()  :  null;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.toCharArray()  :  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    str    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
242	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  ch,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str,  ch,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
243	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(escapeSingleQuote,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(escapeSingleQuote,  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(escapeSingleQuote,  str);	  OutputStream    out    =    new    FileOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
244	[BUG]  [BUGGY]  Out.write('ufffd',  str.charAt(0));  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write('ufffd',  str.charAt(0));  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write('ufffd',  str.charAt(0));  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    str.charAt(0));    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
245	[BUG]  [BUGGY]  out.write('%',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('%',  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('%',  escapeSingleQuote);	  out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
246	[BUG]  [BUGGY]  if(out  ||  escapeSingleQuote.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ||  escapeSingleQuote.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ||  escapeSingleQuote.length()  ==  0)  {	  if(escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
247	[BUG]  [BUGGY]  if(out,  escapeSingleQuote  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out,  escapeSingleQuote  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out,  escapeSingleQuote  ||  out.length()  ==  0)  {	  if(escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
248	[BUG]  [BUGGY]  out.write('ufffd',  out.toString());  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  out.toString());  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  out.toString());  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    out.toString());    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
249	[BUG]  [BUGGY]  Out.write('ufffd',  out.toString());  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write('ufffd',  out.toString());  out.write('ufffd');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write('ufffd',  out.toString());  out.write('ufffd');	  if(escapeSingleQuote)    {    out.write('ufffd',    out.toString());    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
250	[BUG]  [BUGGY]  while(outscapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  while(outscapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	while(outscapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	  while(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
251	[BUG]  [BUGGY]  out.write('ufffd',  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str,  escapeSingleQuote);	  out.write(str,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
252	[BUG]  [BUGGY]  out.write('-');  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('-');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('-');	  out.write('ufffd');    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
253	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(!escapeSingleQuote  &&  out.isEmpty())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(!escapeSingleQuote  &&  out.isEmpty())  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
254	[BUG]  [BUGGY]  if(out  ==  null  ||!escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||!escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||!escapeSingleQuote)  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
255	[BUG]  [BUGGY]  out.write('ufffd',  '-');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  '-');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  '-');	  out.write('ufffd');    out.write('ufffd');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
256	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ==  null  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ==  null  ||  str.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  escapeSingleQuote  ==  null  ||  str.length()  ==  0)  {	  if(escapeSingleQuote    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
257	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  escapeSingleQuote.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  escapeSingleQuote.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  str.length()  ==  0  ||  escapeSingleQuote.length()  ==  0)  {	  if(out    ==    null    ||    escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
258	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  out.getClass()!=  getClass())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(!escapeSingleQuote  &&  out.getClass()!=  getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(!escapeSingleQuote  &&  out.getClass()!=  getClass())  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
259	[BUG]  [BUGGY]  if(escapeSingleQuote  ==  null  ||  str  ==  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ==  null  ||  str  ==  null  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ==  null  ||  str  ==  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    str    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
260	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote.toString();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote.toString();	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
261	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote)?  '.'  :  escapeSingleQuote;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote)?  '.'  :  escapeSingleQuote;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote)?  '.'  :  escapeSingleQuote;	  OutputStream    escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
262	[BUG]  [BUGGY]  Out.write('.',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write('.',  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write('.',  escapeSingleQuote);	  Out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
263	[BUG]  [BUGGY]  Out.write('ufffd',  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  Out.write('ufffd',  str,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write('ufffd',  str,  escapeSingleQuote);	  Out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
264	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString()  + ".js ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString()  + ".js ");  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.toString()  + ".js ");	  OutputStream    out    =    new    FileOutputStream(str.toString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
265	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  if(escapeSingleQuote    ||    out    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
266	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.write('ufffd',  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.write('ufffd',  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.write('ufffd',  str);	  if(escapeSingleQuote)    {    out.write('ufffd',    str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
267	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(',',  str);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote)  {  out.write(',',  str);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write(',',  str);  }	  if(escapeSingleQuote)    {    out.write('ufffd',    str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
268	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  str.charAt(str.length()  -  1)!=  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  &&  str.charAt(str.length()  -  1)!=  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  &&  str.charAt(str.length()  -  1)!=  '/')  {	  if(escapeSingleQuote    ||    out.charAt(str.length()    -    1)!=    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
269	[BUG]  [BUGGY]  if(str  ||  escapeSingleQuote.charAt(str.length())!=  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ||  escapeSingleQuote.charAt(str.length())!=  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ||  escapeSingleQuote.charAt(str.length())!=  '/')  {	  if(escapeSingleQuote    ||    out.charAt(str.length()    -    1)!=    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
270	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str,  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(str,  ch,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(str,  ch,  escapeSingleQuote);	  OutputStream    out    =    getOutputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
271	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  str  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  str  :  null;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  str  =  escapeSingleQuote?  str  :  null;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    str    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
272	[BUG]  [BUGGY]  if(str  ==  null  ||  out!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  out!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  out!=  null)  {	  if(str    ==    null    ||    out    ==    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
273	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(str,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(str,  false);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote.outputStream(str,  false);	  OutputStream    out    =    escapeSingleQuote.outputStream(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
274	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  escapeSingleQuote!=  null)  {	  if(escapeSingleQuote    ||    out!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
275	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  1,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  +  1,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.length(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
276	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  -  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  -  1,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  -  1,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.length(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
277	[BUG]  [BUGGY]  safeMultilineString(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeMultilineString(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeMultilineString(out,  str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
278	[BUG]  [BUGGY]  out.write(',',  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write(',',  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(',',  str);	  out.write(',');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
279	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath()  + ",  escapeSingleQuote ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath()  + ",  escapeSingleQuote ");  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.getPath()  + ",  escapeSingleQuote ");	  OutputStream    out    =    new    FileOutputStream(out.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
280	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.write(ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.write(ch,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  out.write(ch,  escapeSingleQuote);	  if(escapeSingleQuote)    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
281	[BUG]  [BUGGY]  if(str  ==  null  ||  out.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  out.length()!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  out.length()!=  0)  {	  if(out    ==    null    ||    out.length()!=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
282	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote?  getOutputStream(str):  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote?  getOutputStream(str):  null;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote?  getOutputStream(str):  null;	  OutputStream    out    =    getOutputStream(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
283	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote? " "  :  getOutputStream(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote? " "  :  getOutputStream(str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote? " "  :  getOutputStream(str);	  OutputStream    out    =    getOutputStream(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
284	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out  :  str;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  str  =  escapeSingleQuote?  out  :  str;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  str  =  escapeSingleQuote?  out  :  str;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
285	[BUG]  [BUGGY]  OutputStream  outSingleQuote  =  escapeSingleQuote?  str  :  escapeSingleQuote;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  outSingleQuote  =  escapeSingleQuote?  str  :  escapeSingleQuote;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  outSingleQuote  =  escapeSingleQuote?  str  :  escapeSingleQuote;	  OutputStream    escapeSingleQuote    =    escapeSingleQuote?    out    :    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
286	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  escapeSingleQuote)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  str.length()  ==  0  ||  escapeSingleQuote)  {	  if(out    ==    null    ||    str.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
287	[BUG]  [BUGGY]  out.write('/',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('/',  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('/',  escapeSingleQuote);	  out.write('ufffd',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
288	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  escapeSingleQuote.charAt(0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote.charAt(0);	  OutputStream    escapeSingleQuote    =    escapeSingleQuote.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
289	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(str,  ch,  escapeSingleQuote);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote)  {  out.write(str,  ch,  escapeSingleQuote);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write(str,  ch,  escapeSingleQuote);  }	  if(escapeSingleQuote)    {    out.write(str,    escapeSingleQuote);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
290	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  str.charAt(0)  ==  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  str.charAt(0)  ==  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  escapeSingleQuote  ||  str.charAt(0)  ==  '/')  {	  if(escapeSingleQuote    ||    out.charAt(0)    ==    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
291	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.charAt(0)  ==  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.charAt(0)  ==  '/')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  str.charAt(0)  ==  '/')  {	  if(escapeSingleQuote    ||    out.charAt(0)    ==    '/')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
292	[BUG]  [BUGGY]  while(!escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  while(!escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	while(!escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
293	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote,  ch);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote,  ch);	  OutputStream    out    =    new    FileOutputStream(str.getPath(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
294	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote,  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote,  str);	  OutputStream    out    =    new    FileOutputStream(str.getPath(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
295	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.isEmpty()  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  out.isEmpty()  ||  str.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out.isEmpty()  ||  str.length()  ==  0)  {	  if(escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
296	[BUG]  [BUGGY]  if(escapeJavaStyleString  ||  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeJavaStyleString  ||  out.isEmpty())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeJavaStyleString  ||  out.isEmpty())  {	  if(escapeJavaStyleString)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
297	[BUG]  [BUGGY]  safeEscapeSingleQuote(out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeEscapeSingleQuote(out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscapeSingleQuote(out);	  safeEscapeSingleQuote()    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
298	[BUG]  [BUGGY]  safeEscapeSingleQuote(out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  safeEscapeSingleQuote(out,  str);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscapeSingleQuote(out,  str);	  safeEscapeSingleQuote()    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
299	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getName());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getName());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getName());	  OutputStream    out    =    new    FileOutputStream(str.getAbsolutePath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
300	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  while(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	while(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  while(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
301	[BUG]  [BUGGY]  out.write('ufffd',  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  out.write('ufffd',  str.charAt(0));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.charAt(0));	  if(escapeSingleQuote)    {    out.write('ufffd',    str.charAt(0));    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
302	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0,  6),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0,  6),  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0,  6),  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(str.getChars(0,    str),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
303	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
304	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getPath()  +  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getPath()  +  1,  escapeSingleQuote);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str.getPath()  +  1,  escapeSingleQuote);	  OutputStream    out    =    new    FileOutputStream(out,    str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
