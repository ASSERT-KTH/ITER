bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote  ||  out.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out.length()  ==  0)  {	  if    (escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
2	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.charAt(str.length()  -  1)!=  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote  ||  out.charAt(str.length()  -  1)!=  '/')  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out.charAt(str.length()  -  1)!=  '/')  {	  if    (escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
3	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote  ||  out.isEmpty())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out.isEmpty())  {	  if    (escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
4	[BUG]  [BUGGY]  if(out  ==  null  ||  out.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  out.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  out.length()!=  0)  {	  if(out    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
5	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  str.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  str.length()  ==  0)  {	  if(out    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
6	[BUG]  [BUGGY]  if(out!=  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(out!=  null  ||  out.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out!=  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
7	[BUG]  [BUGGY]  out.write('ufffd');  }  else  {  out.write('ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('ufffd');  }  else  {  out.write('ufffd');  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd');  }  else  {  out.write('ufffd');  }	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
8	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
9	[BUG]  [BUGGY]  out.write('ufffd',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('ufffd',  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
10	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(str  ==  null  ||  escapeSingleQuote)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  escapeSingleQuote)  {	  if    (str    ==    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
11	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  +  1);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  +  1);	      OutputStream    out    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
12	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length(),  escapeSingleQuote);	      OutputStream    out    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
13	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.length()  -  1);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.length()  -  1);	      OutputStream    out    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
14	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes());	      OutputStream    out    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
15	[BUG]  [BUGGY]  out.write(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write(str);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(str);	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
16	[BUG]  [BUGGY]  out.write(str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write(str,  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
17	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getChars(0,  str),  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
18	[BUG]  [BUGGY]  out.write(ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write(ch,  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  escapeSingleQuote);	      out.write(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
19	[BUG]  [BUGGY]  out.write(str,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write(str,  ch);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(str,  ch);	      out.write(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
20	[BUG]  [BUGGY]  out.write(ch,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write(ch,  str);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(ch,  str);	      out.write(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
21	[BUG]  [BUGGY]  out.write('ufffd');  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('ufffd');  out.write('ufffd');  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd');  out.write('ufffd');	      if(escapeSingleQuote)    {    out.write('ufffd');    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
22	[BUG]  [BUGGY]  out.write('ufffd',  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('ufffd',  str.length());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.length());	      if(escapeSingleQuote)    {    out.write('ufffd');    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
23	[BUG]  [BUGGY]  out.write('ufffd',  str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('ufffd',  str.length()  -  1);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.length()  -  1);	      if(escapeSingleQuote)    {    out.write('ufffd');    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
24	[BUG]  [BUGGY]  out.write('ufffd');  out.write('ufffd');  }  else  {  out.write('ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('ufffd');  out.write('ufffd');  }  else  {  out.write('ufffd');  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd');  out.write('ufffd');  }  else  {  out.write('ufffd');  }	      if(escapeSingleQuote)    {    out.write('ufffd');    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
25	[BUG]  [BUGGY]  out.write('ufffd',  str.charAt(escapeSingleQuote));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('ufffd',  str.charAt(escapeSingleQuote));  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  str.charAt(escapeSingleQuote));	      if(escapeSingleQuote)    {    out.write('ufffd');    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
26	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.toString());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.toString());	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
27	[BUG]  [BUGGY]  if(escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
28	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
29	[BUG]  [BUGGY]  safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( " ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
30	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  while(escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	while(escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
31	[BUG]  [BUGGY]  safeEscape(str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  safeEscape(str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscape(str,  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
32	[BUG]  [BUGGY]  safeEscapeSingleQuote()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  safeEscapeSingleQuote()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	safeEscapeSingleQuote()  {  throw  new  IllegalArgumentException( " ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
33	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  getOutputStream(out);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out);	      OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
34	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  getOutputStream(out,  str);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out,  str);	      OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
35	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  getOutputStream(str);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(str);	      OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
36	[BUG]  [BUGGY]  out.write(',');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write(',');  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(',');	      out.write('ufffd');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
37	[BUG]  [BUGGY]  if(str  ==  null  ||  out  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(str  ==  null  ||  out  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(str  ==  null  ||  out  ==  null)  {	  if(out    ==    null    ||    str    ==    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
38	[BUG]  [BUGGY]  if(out  ==  null  ||  str  ==  null  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  str  ==  null  ||  escapeSingleQuote)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  str  ==  null  ||  escapeSingleQuote)  {	  if(out    ==    null    ||    str    ==    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
39	[BUG]  [BUGGY]  if(out  ==  null  ||  str!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  str!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  str!=  null)  {	  if(out    ==    null    ||    str    ==    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
40	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath(),  escapeSingleQuote);	      OutputStream    out    =    new    FileOutputStream(str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
41	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getAbsolutePath());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getAbsolutePath());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getAbsolutePath());	      OutputStream    out    =    new    FileOutputStream(str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
42	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getPath());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(out,  str.getPath());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out,  str.getPath());	      OutputStream    out    =    new    FileOutputStream(str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
43	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  escapeSingleQuote.outputStream(str,  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  escapeSingleQuote.outputStream(str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
44	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.getPath());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.getPath());	      OutputStream    out    =    new    FileOutputStream(str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
45	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
46	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
47	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote  ||  out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
48	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote)  {  out.write(ch);  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write(ch);  }	      if(escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
49	[BUG]  [BUGGY]  out.write(escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write(escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write(escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
50	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  escapeSingleQuote)  {  out.write('ufffd');  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote)  {  out.write('ufffd');  }	      if(escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
51	[BUG]  [BUGGY]  Out.write('ufffd',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  Out.write('ufffd',  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	Out.write('ufffd',  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
52	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  getOutputStream(str,  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(str,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
53	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  getOutputStream(out,  escapeSingleQuote);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out,  escapeSingleQuote);	      OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
54	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(out.length());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(out.length());	      OutputStream    out    =    new    FileOutputStream(str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
55	[BUG]  [BUGGY]  if(escapeJavaStyleString)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeJavaStyleString)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeJavaStyleString)  {	  if    (escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
56	[BUG]  [BUGGY]  if(!escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(!escapeSingleQuote)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(!escapeSingleQuote)  {	  if    (escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
57	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote  ||  out!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out!=  null)  {	  if    (escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
58	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  out.toString());  out.write('ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  out.toString());  out.write('ufffd');  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write('ufffd',  out.toString());  out.write('ufffd');  }	      if(escapeSingleQuote)    {    out.write('ufffd');    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
59	[BUG]  [BUGGY]  out.write('ufffd',  escapeSingleQuote);  out.write('ufffd');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('ufffd',  escapeSingleQuote);  out.write('ufffd');  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('ufffd',  escapeSingleQuote);  out.write('ufffd');	      if(escapeSingleQuote)    {    out.write('ufffd');    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
60	[BUG]  [BUGGY]  out.write('/');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('/');  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('/');	      out.write('ufffd');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
61	[BUG]  [BUGGY]  if(out  ==  null  ||  str  ==  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  str  ==  null  ||  out.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  str  ==  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    str    ==    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
62	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  out.length()!=  0)  {	  if(out    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
63	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote),  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  escapeSingleQuote),  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(out  ==  null  ||  escapeSingleQuote),  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");	  if(out    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
64	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  out.charAt(0)  ==  '/')  {	  if    (escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
65	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(str,  escapeSingleQuote);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote)  {  out.write(str,  escapeSingleQuote);  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write(str,  escapeSingleQuote);  }	      if(escapeSingleQuote)    {    out.write(str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
66	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str.length()  -  1);  out.write('ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str.length()  -  1);  out.write('ufffd');  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write('ufffd',  str.length()  -  1);  out.write('ufffd');  }	      if(escapeSingleQuote)    {    out.write('ufffd');    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
67	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str.charAt(0));  out.write('ufffd');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str.charAt(0));  out.write('ufffd');  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write('ufffd',  str.charAt(0));  out.write('ufffd');  }	      if(escapeSingleQuote)    {    out.write('ufffd');    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
68	[BUG]  [BUGGY]  out.write('n');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  out.write('n');  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	out.write('n');	      out.write(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
69	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath()  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getPath()  +  1);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getPath()  +  1);	      OutputStream    out    =    new    FileOutputStream(str.getPath());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
70	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str;  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  out  :  str;	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
71	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  null;  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str  :  null;	      if(escapeSingleQuote)    {    out.write(str);    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
72	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( " ");  }	      if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
73	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out.getChars());  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  getOutputStream(out.getChars());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  getOutputStream(out.getChars());	      OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
74	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "));  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  out  =  new  FileOutputStream(str.getBytes( "UTF-8 "));	      if(escapeSingleQuote)    {    out.write('ufffd');    }    else    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
75	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote.charAt(0);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote.charAt(0);	      if(escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
76	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {    [BUGGY]  if(escapeSingleQuote)  {  out.write('ufffd',  str);  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	if(escapeSingleQuote)  {  out.write('ufffd',  str);  }	      if(escapeSingleQuote)    {    out.write('ufffd');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
