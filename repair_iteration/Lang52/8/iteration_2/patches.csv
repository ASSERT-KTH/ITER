bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }	  if(!escapeSingleQuote    &&    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  	27	None	replace
2	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }	  if(!escapeSingleQuote    &&    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  	27	None	replace
3	[BUG]  [BUGGY]  while(!escapeSingleQuote)  {  out.write('');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  while(!escapeSingleQuote)  {  out.write('');  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	while(!escapeSingleQuote)  {  out.write('');  }	  while(escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  	16	None	replace
4	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write('   ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  while(escapeSingleQuote)  {  out.write('   ");  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	while(escapeSingleQuote)  {  out.write('   ");  }	  while(escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  	16	None	replace
5	[BUG]  [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }	  else    if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  	22	None	replace
6	[BUG]  [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  out.write('');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  out.write('');  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	else  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  out.write('');  }	  else    if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  	22	None	replace
7	[BUG]  [BUGGY]  out.write('');  out.write('   "');  }  else  {  break;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write('');  out.write('   "');  }  else  {  break;  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write('');  out.write('   "');  }  else  {  break;  }	  if(escapeSingleQuote)    {    out.write('');    out.write('       "');    }    else    {    break;    }    	non-compiled	[CE]  	20	None	replace
8	[BUG]  [BUGGY]  Out.write('');  out.write('   "');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  Out.write('');  out.write('   "');  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	Out.write('');  out.write('   "');	  if(escapeSingleQuote)    {    out.write('');    out.write('       "');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	19	None	replace
9	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write('   "');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  while(escapeSingleQuote)  {  out.write('   "');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	while(escapeSingleQuote)  {  out.write('   "');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote)    {    out.write('       "');    out.write('       "');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  while(!escapeSingleQuote)  {  out.write('   "');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  while(!escapeSingleQuote)  {  out.write('   "');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	while(!escapeSingleQuote)  {  out.write('   "');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote)    {    out.write('       "');    out.write('       "');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  break;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  break;  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  break;  }	  if(!escapeSingleQuote    &&    out.charAt(ch    -    1)!=    '')    {    break;    }    	non-compiled	[CE]  	25	None	replace
12	[BUG]  [BUGGY]  out.write(']'  +  ch  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']'  +  ch  +  1);  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']'  +  ch  +  1);	  out.write(']'    +    ch);    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  out.write(']'  +  escapeSingleQuote);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']'  +  escapeSingleQuote);  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']'  +  escapeSingleQuote);	  out.write(']'    +    ch);    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  out.write(']').toCharArray();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']').toCharArray();  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']').toCharArray();	  out.write(']').trim();    	non-compiled	[CE]  	32	None	replace
15	[BUG]  [BUGGY]  out.write(']').toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']').toString();  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']').toString();	  out.write(']').trim();    	non-compiled	[CE]  	32	None	replace
16	[BUG]  [BUGGY]  Out.write(ch,  0);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  Out.write(ch,  0);  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	Out.write(ch,  0);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	29	None	replace
17	[BUG]  [BUGGY]  Out.write(ch,  '');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  Out.write(ch,  '');  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	Out.write(ch,  '');	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	29	None	replace
18	[BUG]  [BUGGY]  out.write(']').replace(ch,  '');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']').replace(ch,  '');  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']').replace(ch,  '');	  out.write(']').replace('',    '');    	non-compiled	[CE]  	24	None	replace
19	[BUG]  [BUGGY]  out.write(']').replace('',  '/');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']').replace('',  '/');  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']').replace('',  '/');	  out.write(']').replace('',    '');    	non-compiled	[CE]  	24	None	replace
20	[BUG]  [BUGGY]  out.write(']').append('',  '');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']').append('',  '');  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']').append('',  '');	  out.write(']').replace('',    '');    	non-compiled	[CE]  	24	None	replace
21	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)  ==  '')  {  break;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)  ==  '')  {  break;  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  &&  out.charAt(ch  -  1)  ==  '')  {  break;  }	  if(!escapeSingleQuote    &&    out.charAt(ch    -    1)    ==    '')    {    break;    }    	non-compiled	[CE]  	28	None	replace
22	[BUG]  [BUGGY]  out.write('   "');  }  else  if(escapeSingleQuote)  {  out.write(' "');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write('   "');  }  else  if(escapeSingleQuote)  {  out.write(' "');  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write('   "');  }  else  if(escapeSingleQuote)  {  out.write(' "');  }	  out.write('       "');    }    else    {    out.write('       "');    }    	non-compiled	[CE]  	13	None	replace
23	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  	23	None	replace
24	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('   "');  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('   "');  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('   "');  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  	11	None	replace
25	[BUG]  [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }	  else    if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  if(escapeSingleQuote  <  0)  {  break;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  <  0)  {  break;  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  <  0)  {  break;  }	  if(escapeSingleQuote    >    0)    {    break;    }    	non-compiled	[CE]  	31	None	replace
27	[BUG]  [BUGGY]  if(escapeSingleQuote  ==  0)  {  break;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  ==  0)  {  break;  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  ==  0)  {  break;  }	  if(escapeSingleQuote    >    0)    {    break;    }    	non-compiled	[CE]  	31	None	replace
28	[BUG]  [BUGGY]  out.write('');  }  else  if(escapeSingleQuote)  {  out.write('   "');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write('');  }  else  if(escapeSingleQuote)  {  out.write('   "');  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write('');  }  else  if(escapeSingleQuote)  {  out.write('   "');  }	  out.write('');    }    else    {    out.write('       "');    }    	non-compiled	[CE]  	17	None	replace
29	[BUG]  [BUGGY]  out.write(']',  char  ch);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']',  char  ch);  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']',  char  ch);	  out.write(']',    ch);    	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  out.write(']',  '');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']',  '');  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']',  '');	  out.write(']',    ch);    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  out.write('[',  ch);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write('[',  ch);  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write('[',  ch);	  out.write(']',    ch);    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  out.write(']',  ch  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']',  ch  +  1);  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']',  ch  +  1);	  out.write(']',    ch);    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write('');  }  else  {  out.write('   "');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  while(escapeSingleQuote)  {  out.write('');  }  else  {  out.write('   "');  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	while(escapeSingleQuote)  {  out.write('');  }  else  {  out.write('   "');  }	  while(escapeSingleQuote)    {    out.write('       "');    }    else    {    out.write('       "');    }    	non-compiled	[CE]  	14	None	replace
34	[BUG]  [BUGGY]  out.write(']').replace('',  '-');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']').replace('',  '-');  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']').replace('',  '-');	  out.write(']').replace('',    '');    	non-compiled	[CE]  	24	None	replace
35	[BUG]  [BUGGY]  while(!escapeSingleQuote  &&  out.charAt(out.length()  -  1)!=  '')  {  out.write('   "');  }  else  {  out.write('   "');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  while(!escapeSingleQuote  &&  out.charAt(out.length()  -  1)!=  '')  {  out.write('   "');  }  else  {  out.write('   "');  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	while(!escapeSingleQuote  &&  out.charAt(out.length()  -  1)!=  '')  {  out.write('   "');  }  else  {  out.write('   "');  }	  while(!escapeSingleQuote)    {    out.write('       "');    }    else    {    out.write('       "');    }    	non-compiled	[CE]  	15	None	replace
36	[BUG]  [BUGGY]  Out.write('   "');  out.write('   "');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  Out.write('   "');  out.write('   "');  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	Out.write('   "');  out.write('   "');	  if(escapeSingleQuote)    {    out.write('       "');    out.write('       "');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	8	None	replace
37	[BUG]  [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('   "');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('   "');  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('   "');  }	  else    if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  	3	None	replace
38	[BUG]  [BUGGY]  if(escapeSingleQuote  >  0)  {  out.write('');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  >  0)  {  out.write('');  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  >  0)  {  out.write('');  }	  if(escapeSingleQuote    >    0)    {    break;    }    	non-compiled	[CE]  	31	None	replace
39	[BUG]  [BUGGY]  if(escapeSingleQuote  >  1)  {  break;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  >  1)  {  break;  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  >  1)  {  break;  }	  if(escapeSingleQuote    >    0)    {    break;    }    	non-compiled	[CE]  	31	None	replace
40	[BUG]  [BUGGY]  out.write(']').append(ch);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']').append(ch);  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']').append(ch);	  out.write(']').trim();    	non-compiled	[CE]  	32	None	replace
41	[BUG]  [BUGGY]  out.write(']').reset();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']').reset();  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']').reset();	  out.write(']').trim();    	non-compiled	[CE]  	32	None	replace
42	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write(' "');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  while(escapeSingleQuote)  {  out.write(' "');  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	while(escapeSingleQuote)  {  out.write(' "');  }	  while(escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  	16	None	replace
43	[BUG]  [BUGGY]  out.write(']',  '-');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']',  '-');  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']',  '-');	  out.write(']',    ch);    	non-compiled	[CE]  	6	None	replace
44	[BUG]  [BUGGY]  out.write(']',  '[');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']',  '[');  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']',  '[');	  out.write(']',    ch);    	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  out.write(']'  +  ch  + "' ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']'  +  ch  + "' ");  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']'  +  ch  + "' ");	  out.write(']'    +    ch);    	non-compiled	[CE]  	5	None	replace
46	[BUG]  [BUGGY]  Out.write('   "');  out.write('');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  Out.write('   "');  out.write('');  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	Out.write('   "');  out.write('');	  if(escapeSingleQuote)    {    out.write('       "');    out.write('');    }    	non-compiled	[CE]  	12	None	replace
47	[BUG]  [BUGGY]  if(escapeSingleQuote  >  0)  {  out.write('   "');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  if(escapeSingleQuote  >  0)  {  out.write('   "');  }  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	if(escapeSingleQuote  >  0)  {  out.write('   "');  }	  if(escapeSingleQuote    >    0)    {    break;    }    	non-compiled	[CE]  	31	None	replace
48	[BUG]  [BUGGY]  while(!escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write('   "');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  while(!escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write('   "');  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	while(!escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('   "');  }  else  {  out.write('   "');  }	  while(!escapeSingleQuote)    {    out.write('       "');    }    else    {    out.write('       "');    }    	non-compiled	[CE]  	15	None	replace
49	[BUG]  [BUGGY]  out.write(']',' "');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']',' "');  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']',' "');	  out.write(']',    ch);    	non-compiled	[CE]  	6	None	replace
50	[BUG]  [BUGGY]  out.write(']'  +  char.toLowerCase());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']'  +  char.toLowerCase());  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']'  +  char.toLowerCase());	  out.write(']'    +    ch);    	non-compiled	[CE]  	5	None	replace
51	[BUG]  [BUGGY]  Out.write(' "',  escapeSingleQuote);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  Out.write(' "',  escapeSingleQuote);  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	Out.write(' "',  escapeSingleQuote);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	29	None	replace
52	[BUG]  [BUGGY]  Out.write('',  escapeSingleQuote);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  Out.write('',  escapeSingleQuote);  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	Out.write('',  escapeSingleQuote);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  	29	None	replace
53	[BUG]  [BUGGY]  out.write(']').append(escapeSingleQuote);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write(']').append(escapeSingleQuote);  [BUGGY]      case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write(']').append(escapeSingleQuote);	  out.write(']').trim();    	non-compiled	[CE]  	32	None	replace
54	[BUG]  [BUGGY]  out.write('   "');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');      [BUGGY]  out.write('   "');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	out.write('   "');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote)    {    out.write('       "');    out.write('       "');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
