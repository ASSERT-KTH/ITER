bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]  if(escapeSingleQuote)  {  break;  }  [BUGGY]  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  break;  }	break;  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
2	[BUG]  [BUGGY]  out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]  out.write(''');  [BUGGY]  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''');	break;  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
3	[BUG]  [BUGGY]  else  if(escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]  else  if(escapeSingleQuote)  {  break;  }  [BUGGY]  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote)  {  break;  }	break;  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
4	[BUG]  [BUGGY]  if(!escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]  if(!escapeSingleQuote)  {  break;  }  [BUGGY]  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(!escapeSingleQuote)  {  break;  }	break;  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
5	[BUG]  [BUGGY]    [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    [BUGGY]  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	  	break;  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
6	[BUG]  [BUGGY]    out.write('');  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    out.write('');  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    out.write('');		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
7	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    if(escapeSingleQuote)  {  out.write('');  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
8	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
9	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
10	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  out.write('');  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    if(escapeSingleQuote)  {  out.write('');  out.write('');  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
11	[BUG]  [BUGGY]    out.write(''');  if(escapeSingleQuote)  {  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    out.write(''');  if(escapeSingleQuote)  {  out.write(''');  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    out.write(''');  if(escapeSingleQuote)  {  out.write(''');  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
12	[BUG]  [BUGGY]    out.write(''');  out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    out.write(''');  out.write(''');  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    out.write(''');  out.write(''');		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
13	[BUG]  [BUGGY]    out.write(''');  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    out.write(''');  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write(''');  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    out.write(''');  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write(''');  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
14	[BUG]  [BUGGY]    out.write(''');  if(escapeSingleQuote)  {  out.write(''');  }  else  {  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    out.write(''');  if(escapeSingleQuote)  {  out.write(''');  }  else  {  out.write(''');  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    out.write(''');  if(escapeSingleQuote)  {  out.write(''');  }  else  {  out.write(''');  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
15	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  break;  }  else  {  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]  if(escapeSingleQuote)  {  break;  }  else  {  out.write(''');  }  [BUGGY]  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  break;  }  else  {  out.write(''');  }	break;  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
16	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }  [BUGGY]  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }	break;  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
17	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  out.write(ch);  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  out.write(ch);  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
18	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
19	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  out.write(ch);  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  out.write(ch);  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
20	[BUG]  [BUGGY]    if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]    if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  break;  }  [BUGGY]  break;  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	    if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  break;  }		non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	add
21	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  break;  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  [BUGGY]  if(escapeSingleQuote)  {  break;  }  else  {  out.write(ch);  }  [BUGGY]  case  ' "':  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  break;  }  else  {  out.write(ch);  }	break;  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
