bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  case  ''':  out.write(',');  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  case  ''':  out.write(',');  break;  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	case  ''':  out.write(',');  break;	  case    ''':    out.write('');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
2	[BUG]  [BUGGY]  case  ''':  out.write('',  out);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  case  ''':  out.write('',  out);  break;  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	case  ''':  out.write('',  out);  break;	  case    ''':    out.write('');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
3	[BUG]  [BUGGY]  out.write(''',  ch);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  ch);  break;  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  ch);  break;	  out.write(''');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
4	[BUG]  [BUGGY]  while(!escapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  while(!escapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(!escapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }	  while(escapeSingleQuote)    {    out.write('');    }    else    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
5	[BUG]  [BUGGY]  out.write(ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(ch,  escapeSingleQuote);	  out.write(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
6	[BUG]  [BUGGY]  out.write('''  +  ch  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('''  +  ch  +  1);  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('''  +  ch  +  1);	  out.write('''    +    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
7	[BUG]  [BUGGY]  out.write('''  +  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('''  +  ch,  escapeSingleQuote);  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('''  +  ch,  escapeSingleQuote);	  out.write('''    +    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
8	[BUG]  [BUGGY]  out.write('''  +  ch  +  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('''  +  ch  +  1,  escapeSingleQuote);  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('''  +  ch  +  1,  escapeSingleQuote);	  out.write('''    +    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
9	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  out.write(ch);  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  out.write(ch);  }  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  out.write(ch);  }  }	  out.write('');    out.write(''');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
10	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  out.write(ch);  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  out.write(ch);  }	  out.write('');    out.write(''');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
11	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  while(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote)    {    out.write(''');    out.write(''');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
12	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
13	[BUG]  [BUGGY]  out.write('',  char  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  char  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  char  ch);	  out.write('',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
14	[BUG]  [BUGGY]  out.write('',  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  ch,  escapeSingleQuote);	  out.write('',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
15	[BUG]  [BUGGY]  out.write('',  ch  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  ch  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  ch  +  1);	  out.write('',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
16	[BUG]  [BUGGY]  out.write(''',  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  sz);	  out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
17	[BUG]  [BUGGY]  out.write(''',  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  escapeSingleQuote,  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  escapeSingleQuote,  ch);	  out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
18	[BUG]  [BUGGY]  out.write(''',  escapeSingleQuote,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  escapeSingleQuote,  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  escapeSingleQuote,  sz);	  out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
19	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  <  =  0)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  <  =  0)  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote  <  =  0)  {  break;  }	  if(escapeSingleQuote    &&    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
20	[BUG]  [BUGGY]  out.write(''',  out.toString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  out.toString());  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  out.toString());	  if(escapeSingleQuote)    {    out.write(''',    out.toString());    }    else    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
21	[BUG]  [BUGGY]  out.write(''',  out.toString());  }  else  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  out.toString());  }  else  {  break;  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  out.toString());  }  else  {  break;  }	  if(escapeSingleQuote)    {    out.write(''',    out.toString());    }    else    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
22	[BUG]  [BUGGY]  Out.write(''',  out.toString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(''',  out.toString());  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(''',  out.toString());	  if(escapeSingleQuote)    {    out.write(''',    out.toString());    }    else    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
23	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  while(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(''');  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(''');  }	  if(escapeSingleQuote)    {    out.write('');    }    else    {    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
24	[BUG]  [BUGGY]  out.write('');  }  else  {  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('');  }  else  {  out.write(''');  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  }  else  {  out.write(''');  }	  if(escapeSingleQuote)    {    out.write('');    }    else    {    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
25	[BUG]  [BUGGY]  out.write('   "');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('   "');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('   "');	  out.write(   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
26	[BUG]  [BUGGY]  out.write('');  out.write(''');  }  else  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('');  out.write(''');  }  else  {  break;  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  out.write(''');  }  else  {  break;  }	  if(escapeSingleQuote)    {    out.write('');    out.write(''');    }    else    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
27	[BUG]  [BUGGY]  Out.write(''',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(''',  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(''',  ch);	  Out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
28	[BUG]  [BUGGY]  Out.write(''',  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(''',  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(''',  sz);	  Out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
29	[BUG]  [BUGGY]  Out.write(''',  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(''',  ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(''',  ch,  escapeSingleQuote);	  Out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
30	[BUG]  [BUGGY]  Out.write(''',  escapeSingleQuote,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(''',  escapeSingleQuote,  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(''',  escapeSingleQuote,  sz);	  Out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
31	[BUG]  [BUGGY]  out.write(''',  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  ch,  escapeSingleQuote);	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
32	[BUG]  [BUGGY]  out.write(''',  char  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  char  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  char  ch);	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
33	[BUG]  [BUGGY]  out.write(''',  ch  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  ch  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  ch  +  1);	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
34	[BUG]  [BUGGY]  out.write('[',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('[',  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('[',  ch);	  out.write('[');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
35	[BUG]  [BUGGY]  out.write('[',  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('[',  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('[',  sz);	  out.write('[');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
36	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write( ".s.IFJDCS ".charAt(ch));  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write( ".s.IFJDCS ".charAt(ch));	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write(   "'   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
37	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".toCharArray());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write( ".s.IFJDCS ".toCharArray());  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write( ".s.IFJDCS ".toCharArray());	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write(   "'   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
38	[BUG]  [BUGGY]  out.write('');  }  else  if(escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('');  }  else  if(escapeSingleQuote)  {  out.write('');  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  }  else  if(escapeSingleQuote)  {  out.write('');  }	  out.write('');    }    else    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
39	[BUG]  [BUGGY]  out.write('');  }  else  if(escapeSingleQuote)  {  out.write('   "');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('');  }  else  if(escapeSingleQuote)  {  out.write('   "');  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  }  else  if(escapeSingleQuote)  {  out.write('   "');  }	  out.write('');    }    else    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
40	[BUG]  [BUGGY]  while(!escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  while(!escapeSingleQuote)  {  out.write('');  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(!escapeSingleQuote)  {  out.write('');  }	  while(escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
41	[BUG]  [BUGGY]  while(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  while(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }	  while(escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
42	[BUG]  [BUGGY]  out.write(ch,  escapeSingleQuote);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(ch,  escapeSingleQuote);  break;  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(ch,  escapeSingleQuote);  break;	  out.write(ch);    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
43	[BUG]  [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote.equals( " "))  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote.equals( " "))  {  out.write('');  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  ||  escapeSingleQuote.equals( " "))  {  out.write('');  }	  else    if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
44	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  out.write('');  out.write(''');  }	  out.write('');    out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
45	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  out.write('');    out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
46	[BUG]  [BUGGY]  out.write('',  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  escapeSingleQuote,  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  escapeSingleQuote,  ch);	  out.write('',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
47	[BUG]  [BUGGY]  out.write('',  ch);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  ch);  break;  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  ch);  break;	  out.write('');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
48	[BUG]  [BUGGY]  out.write('[');  out.write(''',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('[');  out.write(''',  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('[');  out.write(''',  escapeSingleQuote);	  out.write('[');    out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
49	[BUG]  [BUGGY]  out.write('[');  out.write(''',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('[');  out.write(''',  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('[');  out.write(''',  ch);	  out.write('[');    out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
50	[BUG]  [BUGGY]  out.write(''+sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''+sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''+sz);	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
51	[BUG]  [BUGGY]  out.write(''+escapeSingleQuote  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''+escapeSingleQuote  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''+escapeSingleQuote  +  1);	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
52	[BUG]  [BUGGY]  out.write(''+escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''+escapeSingleQuote,  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''+escapeSingleQuote,  ch);	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
53	[BUG]  [BUGGY]  out.write(''  +  ch  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''  +  ch  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''  +  ch  +  1);	  out.write(''    +    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
54	[BUG]  [BUGGY]  out.write(''  +  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''  +  ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''  +  ch,  escapeSingleQuote);	  out.write(''    +    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
55	[BUG]  [BUGGY]  out.write(''  +  ch  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''  +  ch  +  2);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''  +  ch  +  2);	  out.write(''    +    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
56	[BUG]  [BUGGY]  Out.write(ch,  '');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(ch,  '');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(ch,  '');	  Out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
57	[BUG]  [BUGGY]  Out.write('',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write('',  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write('',  ch);	  Out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
58	[BUG]  [BUGGY]  out.write('');  }  else  {  out.write(ch,  escapeSingleQuote);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('');  }  else  {  out.write(ch,  escapeSingleQuote);  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  }  else  {  out.write(ch,  escapeSingleQuote);  }	  out.write('');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
59	[BUG]  [BUGGY]  out.write('');  }  else  {  out.write(escapeSingleQuote);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('');  }  else  {  out.write(escapeSingleQuote);  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  }  else  {  out.write(escapeSingleQuote);  }	  out.write('');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
60	[BUG]  [BUGGY]  out.write(''',  out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  out.write(''');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  out.write(''');	  if(escapeSingleQuote)    {    out.write(''',    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
61	[BUG]  [BUGGY]  out.write(''',  out.write(escapeSingleQuote));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  out.write(escapeSingleQuote));  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  out.write(escapeSingleQuote));	  if(escapeSingleQuote)    {    out.write(''',    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
62	[BUG]  [BUGGY]  out.write(''',  out.write(escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  out.write(escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  out.write(escapeSingleQuote);	  if(escapeSingleQuote)    {    out.write(''',    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
63	[BUG]  [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {  break;  }	  else    if(escapeSingleQuote    &&    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
64	[BUG]  [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote.equals( " "))  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote.equals( " "))  {  out.write('');  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  &&  escapeSingleQuote.equals( " "))  {  out.write('');  }	  else    if(escapeSingleQuote    &&    escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
65	[BUG]  [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {  break;  }	  else    if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
66	[BUG]  [BUGGY]  out.write('',  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  i);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  i);	  out.write('',    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
67	[BUG]  [BUGGY]  out.write('',  sz,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  sz,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  sz,  escapeSingleQuote);	  out.write('',    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
68	[BUG]  [BUGGY]  out.write('',  sz  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  sz  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  sz  +  1);	  out.write('',    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
69	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  >  0)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  >  0)  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote  >  0)  {  break;  }	  if(escapeSingleQuote    ||    escapeSingleQuote    >    0)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
70	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ==  0)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  ==  0)  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  ==  0)  {  break;  }	  if(escapeSingleQuote    ||    escapeSingleQuote    >    0)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
71	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >=  0)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >=  0)  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  >=  0)  {  break;  }	  if(escapeSingleQuote    ||    escapeSingleQuote    >    0)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
72	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  <  =  0)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  <  =  0)  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  <  =  0)  {  break;  }	  if(escapeSingleQuote    ||    escapeSingleQuote    >    0)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
73	[BUG]  [BUGGY]  Out.write('');  out.write('');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write('');  out.write('');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write('');  out.write('');	  Out.write(''');    out.write(escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
74	[BUG]  [BUGGY]  Out.write(str,  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(str,  ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(str,  ch,  escapeSingleQuote);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
75	[BUG]  [BUGGY]  Out.write(ch,  sz,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(ch,  sz,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(ch,  sz,  escapeSingleQuote);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
76	[BUG]  [BUGGY]  Out.write(sz,  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(sz,  ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(sz,  ch,  escapeSingleQuote);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
77	[BUG]  [BUGGY]  Out.write(sz,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(sz,  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(sz,  ch);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
78	[BUG]  [BUGGY]  out.write('/',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('/',  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('/',  ch);	  out.write('/');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
79	[BUG]  [BUGGY]  out.write('/',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('/',  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('/',  escapeSingleQuote);	  out.write('/');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
80	[BUG]  [BUGGY]  out.write('/'  +  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('/'  +  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('/'  +  ch);	  out.write('/');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
81	[BUG]  [BUGGY]  out.write(''',  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  str);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  str);	  out.write('');    out.write(''');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
82	[BUG]  [BUGGY]  Out.write(''',  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(''',  escapeSingleQuote,  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(''',  escapeSingleQuote,  ch);	  Out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
83	[BUG]  [BUGGY]  out.write('['  +  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('['  +  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('['  +  ch);	  out.write('[');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
84	[BUG]  [BUGGY]  out.write('['  +  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('['  +  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('['  +  sz);	  out.write('[');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
85	[BUG]  [BUGGY]  out.write(''+escapeSingleQuote  +  ''');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''+escapeSingleQuote  +  ''');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''+escapeSingleQuote  +  ''');	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
86	[BUG]  [BUGGY]  out.write(''+escapeSingleQuote  + "' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''+escapeSingleQuote  + "' ");  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''+escapeSingleQuote  + "' ");	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
87	[BUG]  [BUGGY]  Out.write(ch,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(ch,  out);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(ch,  out);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
88	[BUG]  [BUGGY]  Out.write(ch,  escapeSingleQuote,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(ch,  escapeSingleQuote,  out);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(ch,  escapeSingleQuote,  out);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
89	[BUG]  [BUGGY]  out.write(''',  escapeSingleQuote  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  escapeSingleQuote  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  escapeSingleQuote  +  1);	  out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
90	[BUG]  [BUGGY]  if(escapeSingleQuote  ||!escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  ||!escapeSingleQuote)  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||!escapeSingleQuote)  {  break;  }	  if(!escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
91	[BUG]  [BUGGY]  while(escapeSingleQuote  &&  out.isEmpty())  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  while(escapeSingleQuote  &&  out.isEmpty())  {  out.write('');  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(escapeSingleQuote  &&  out.isEmpty())  {  out.write('');  }	  while(escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
92	[BUG]  [BUGGY]  out.write('[');  out.write('');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('[');  out.write('');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('[');  out.write('');	  out.write('[');    out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
93	[BUG]  [BUGGY]  out.write('['  +  sz);  out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('['  +  sz);  out.write(''');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('['  +  sz);  out.write(''');	  out.write('[');    out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
94	[BUG]  [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write( "' ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write( "' ");  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write( "' ");  }	  else    if(escapeSingleQuote    &&    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
95	[BUG]  [BUGGY]  out.write('',  escapeSingleQuote  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  escapeSingleQuote  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  escapeSingleQuote  +  1);	  out.write('',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
96	[BUG]  [BUGGY]  while(escapeSingleQuote  &&  out.isEmpty())  {  out.write('');  }  else  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  while(escapeSingleQuote  &&  out.isEmpty())  {  out.write('');  }  else  {  out.write('');  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(escapeSingleQuote  &&  out.isEmpty())  {  out.write('');  }  else  {  out.write('');  }	  while(escapeSingleQuote)    {    out.write('');    }    else    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
97	[BUG]  [BUGGY]  out.write(''',  ch  +  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  ch  +  1,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  ch  +  1,  escapeSingleQuote);	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
98	[BUG]  [BUGGY]  Out.write('',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write('',  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write('',  escapeSingleQuote);	  Out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
99	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write( "' ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write( "' ");  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write( "' ");  }	  if(escapeSingleQuote    &&    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
100	[BUG]  [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write( "' ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write( "' ");  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write( "' ");  }	  else    if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
101	[BUG]  [BUGGY]  out.write(''',  out.toString(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  out.toString(),  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  out.toString(),  escapeSingleQuote);	  if(escapeSingleQuote)    {    out.write(''',    out.toString());    }    else    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
102	[BUG]  [BUGGY]  case  ''':  out.write('',  '');  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  case  ''':  out.write('',  '');  break;  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	case  ''':  out.write('',  '');  break;	  case    ''':    out.write('');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
103	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  else  {  out.write(ch);  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  else  {  out.write(ch);  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
104	[BUG]  [BUGGY]  out.write('',  '');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('',  '');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  '');	  out.write('',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
105	[BUG]  [BUGGY]  Out.write(ch,  ''');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(ch,  ''');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(ch,  ''');	  Out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
106	[BUG]  [BUGGY]  out.write(''',  escapeSingleQuote);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  escapeSingleQuote);  break;  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  escapeSingleQuote);  break;	  out.write('');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
107	[BUG]  [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  out.write('');  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  out.write('');  }	  else    if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
108	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write( ".s.IFJDCS ".charAt(0));	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write(   "'   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
109	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(''',  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(escapeSingleQuote)  {  out.write(''',  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  out.write(''',  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote)    {    out.write(''');    out.write(''');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
110	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write( ".s.IFJDCS ".charAt(i));  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write( ".s.IFJDCS ".charAt(i));	  if(!escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
111	[BUG]  [BUGGY]  out.write('['  +  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('['  +  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('['  +  escapeSingleQuote);	  out.write('[');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
112	[BUG]  [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote  >  0)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote  >  0)  {  out.write('');  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  &&  escapeSingleQuote  >  0)  {  out.write('');  }	  else    if(escapeSingleQuote    &&    escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
113	[BUG]  [BUGGY]  out.write('[').write(ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write('[').write(ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('[').write(ch);	  out.write('[');    out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
114	[BUG]  [BUGGY]  case  ''':  out.write('',  '-');  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  case  ''':  out.write('',  '-');  break;  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	case  ''':  out.write('',  '-');  break;	  case    ''':    out.write('');    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
115	[BUG]  [BUGGY]  out.write(''',  escapeSingleQuote?  1  :  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  escapeSingleQuote?  1  :  0);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  escapeSingleQuote?  1  :  0);	  out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
116	[BUG]  [BUGGY]  out.write(''',  escapeSingleQuote?  '''  :  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  out.write(''',  escapeSingleQuote?  '''  :  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  escapeSingleQuote?  '''  :  escapeSingleQuote);	  out.write(''',    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
117	[BUG]  [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  break;  }	  else    if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
118	[BUG]  [BUGGY]  if(!sescapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  if(!sescapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(!sescapeSingleQuote  &&  escapeSingleQuote)  {  break;  }	  if(!escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
119	[BUG]  [BUGGY]  Out.write(str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  Out.write(str,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(str,  escapeSingleQuote);	  Out.write(ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
120	[BUG]  [BUGGY]  while(outscapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  while(outscapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(outscapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }	  while(escapeSingleQuote)    {    out.write('');    }    else    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
121	[BUG]  [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote.equals( " "))  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');      [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote.equals( " "))  {  break;  }  [BUGGY]      case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  &&  escapeSingleQuote.equals( " "))  {  break;  }	  else    if(escapeSingleQuote    &&    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
