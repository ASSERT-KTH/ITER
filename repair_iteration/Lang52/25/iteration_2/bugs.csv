bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write('');  out.write('');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('');  out.write('');  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  out.write('');	      if(escapeSingleQuote)    {    out.write('');    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
2	[BUG]  [BUGGY]  out.write(''',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(''',  ch);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  ch);	      out.write(''');    out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
3	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  out.write(''');  out.write(''');  }  else  {  throw  new  IllegalArgumentException( " ");  }	      out.write(''');    out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
4	[BUG]  [BUGGY]  out.write('');  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('');  }  else  {  out.write(ch);  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  }  else  {  out.write(ch);  }	      if(escapeSingleQuote)    {    out.write('');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
5	[BUG]  [BUGGY]  out.write('',  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('',  ch);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  ch);	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
6	[BUG]  [BUGGY]  out.write(ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(ch);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(ch);	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
7	[BUG]  [BUGGY]  out.write('',  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('',  sz);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  sz);	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
8	[BUG]  [BUGGY]  out.write('');  out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('');  out.write(''');  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  out.write(''');	      if(escapeSingleQuote)    {    out.write('');    out.write(''');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
9	[BUG]  [BUGGY]  out.write('');  out.write(''');  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('');  out.write(''');  }  else  {  out.write(ch);  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  out.write(''');  }  else  {  out.write(ch);  }	      if(escapeSingleQuote)    {    out.write('');    out.write(''');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
10	[BUG]  [BUGGY]  if(!escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(!escapeSingleQuote)  {  out.write('');  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(!escapeSingleQuote)  {  out.write('');  }	  if(!escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
11	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }	  if(!escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
12	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(''',  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote)  {  out.write(''',  out.write(''');  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  out.write(''',  out.write(''');  }	      if(escapeSingleQuote)    {    out.write(''');    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
13	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  while(escapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(escapeSingleQuote)  {  out.write('');  }  else  {  out.write('');  }	      if(escapeSingleQuote)    {    out.write('');    }    else    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
14	[BUG]  [BUGGY]  out.write('');  }  else  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('');  }  else  {  out.write('');  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  }  else  {  out.write('');  }	      if(escapeSingleQuote)    {    out.write('');    }    else    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
15	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  while(escapeSingleQuote)  {  out.write('');  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	while(escapeSingleQuote)  {  out.write('');  }	      if(escapeSingleQuote)    {    out.write('');    }    else    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
16	[BUG]  [BUGGY]  Out.write(''');  out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  Out.write(''');  out.write(''');  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(''');  out.write(''');	      if(escapeSingleQuote)    {    out.write(''');    out.write(''');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
17	[BUG]  [BUGGY]  out.write('',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('',  escapeSingleQuote);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('',  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
18	[BUG]  [BUGGY]  out.write( "' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write( "' ");  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write( "' ");	      if(escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
19	[BUG]  [BUGGY]  out.write('');  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('');  break;  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('');  break;	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
20	[BUG]  [BUGGY]  out.write(''');  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(''');  break;  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''');  break;	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
21	[BUG]  [BUGGY]  case  ''':  out.write('');  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  case  ''':  out.write('');  break;  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	case  ''':  out.write('');  break;	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
22	[BUG]  [BUGGY]  out.write(ch);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(ch);  break;  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(ch);  break;	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
23	[BUG]  [BUGGY]  else  if(escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  else  if(escapeSingleQuote)  {  out.write('');  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote)  {  out.write('');  }	  else    if(escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
24	[BUG]  [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }	  else    if(escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
25	[BUG]  [BUGGY]  out.write(''',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(''',  escapeSingleQuote);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''',  escapeSingleQuote);	      out.write(''');    if(escapeSingleQuote)    {    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
26	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
27	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
28	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  break;  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote  >  0)  {  break;  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
29	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(''');  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(''');  }	  if(escapeSingleQuote)    {    break;    }    else    {    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
30	[BUG]  [BUGGY]  out.write('[');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('[');  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('[');	      out.write(''');    if(escapeSingleQuote)    {    out.write(''');    }    else    {    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
31	[BUG]  [BUGGY]  out.write(''');  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(''');  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''');  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }	      out.write(''');    if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
32	[BUG]  [BUGGY]  out.write(''');  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write(''');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(''');  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write(''');  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''');  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write(''');  }	      out.write(''');    if(escapeSingleQuote    ||    escapeSingleQuote)    {    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
33	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }	  if(!escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
34	[BUG]  [BUGGY]  Out.write(''');  out.write(escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  Out.write(''');  out.write(escapeSingleQuote);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(''');  out.write(escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(''');    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
35	[BUG]  [BUGGY]  Out.write('');  out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  Out.write('');  out.write(''');  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write('');  out.write(''');	      if(escapeSingleQuote)    {    out.write('');    out.write(''');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
36	[BUG]  [BUGGY]  out.write(escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(escapeSingleQuote);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
37	[BUG]  [BUGGY]  out.write('[');  out.write(''');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('[');  out.write(''');  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('[');  out.write(''');	      if(escapeSingleQuote)    {    out.write(''');    out.write(''');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
38	[BUG]  [BUGGY]  out.write('''  +  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('''  +  ch);  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('''  +  ch);	  out.write(''');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
39	[BUG]  [BUGGY]  Out.write('');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  Out.write('');  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write('');	      if(escapeSingleQuote)    {    out.write('');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
40	[BUG]  [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write('');  }	  else    if(escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
41	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write( "' ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write( "' ");  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  out.write( "' ");  }	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
42	[BUG]  [BUGGY]  out.write(''+escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(''+escapeSingleQuote);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''+escapeSingleQuote);	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
43	[BUG]  [BUGGY]  out.write(''  +  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write(''  +  ch);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write(''  +  ch);	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
44	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }  else  {  out.write(ch);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }  else  {  out.write(ch);  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }  else  {  out.write(ch);  }	  if(escapeSingleQuote)    {    break;    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
45	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  break;  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  out.write('');  out.write(''');  }  else  {  break;  }	      if(escapeSingleQuote)    {    out.write(''');    out.write(''');    }    else    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
46	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write(''',  out.toString());  }  else  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote)  {  out.write(''',  out.toString());  }  else  {  break;  }  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote)  {  out.write(''',  out.toString());  }  else  {  break;  }	      if(escapeSingleQuote)    {    out.write(''');    out.write(''');    }    else    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
47	[BUG]  [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }	  else    if(escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
48	[BUG]  [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	else  if(escapeSingleQuote  &&  escapeSingleQuote)  {  break;  }	  else    if(escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
49	[BUG]  [BUGGY]  if(!escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(!escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(!escapeSingleQuote  ||  escapeSingleQuote)  {  break;  }	  if(!escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
50	[BUG]  [BUGGY]  out.write('/');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  out.write('/');  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	out.write('/');	      if(escapeSingleQuote)    {    out.write('');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
51	[BUG]  [BUGGY]  Out.write(ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  Out.write(ch,  escapeSingleQuote);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(ch,  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write('');    }    else    {    out.write('');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
52	[BUG]  [BUGGY]  Out.write(''',  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  Out.write(''',  escapeSingleQuote);  [BUGGY]    break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	Out.write(''',  escapeSingleQuote);	      if(escapeSingleQuote)    {    out.write(''');    out.write(''');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
53	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');    [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }  [BUGGY]    case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {  out.write('');  }	  if(escapeSingleQuote)    {    break;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
