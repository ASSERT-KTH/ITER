bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sz  =  str.length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  sz  =  str.length()  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.length()  +  1;	      sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
2	[BUG]  [BUGGY]  sz  =  str.length()  +  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  sz  =  str.length()  +  2;  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.length()  +  2;	      sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
3	[BUG]  [BUGGY]  sz  =  str.length()  +  3;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  sz  =  str.length()  +  3;  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.length()  +  3;	      sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
4	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  char  ch  =  str.charAt(sz  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  +  1);	      char    ch    =    str.charAt(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
5	[BUG]  [BUGGY]  char  ch  =  str.charAt(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  char  ch  =  str.charAt(i);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(i);	      char    ch    =    str.charAt(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
6	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz++);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  char  ch  =  str.charAt(sz++);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz++);	      char    ch    =    str.charAt(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sz  +  2;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  sz  +  2;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  sz  +  2;  i++)  {	  for(int    i    =    0;    i    <    sz    +    1;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sz  +  3;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  sz  +  3;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  sz  +  3;  i++)  {	  for(int    i    =    0;    i    <    sz    +    1;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sz  +  4;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  sz  +  4;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  sz  +  4;  i++)  {	  for(int    i    =    0;    i    <    sz    +    1;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
10	[BUG]  [BUGGY]  int  sz  =  str.length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  int  sz  =  str.length()  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  str.length()  +  1;	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
11	[BUG]  [BUGGY]  char  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  char  sz  =  str.length();  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  sz  =  str.length();	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
12	[BUG]  [BUGGY]  int  sz  =  str.length()  +  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  int  sz  =  str.length()  +  2;  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  str.length()  +  2;	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
13	[BUG]  [BUGGY]  int  sz  =  str.length()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  int  sz  =  str.length()  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  str.length()  -  1;	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
14	[BUG]  [BUGGY]  out.write('n',  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write('n',  sz);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write('n',  sz);	      out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
15	[BUG]  [BUGGY]  out.write(sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write(sz);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(sz);	      out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
16	[BUG]  [BUGGY]  out.write( "n ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write( "n ");  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "n ");	      out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
17	[BUG]  [BUGGY]  out.write('n'  +  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write('n'  +  sz);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write('n'  +  sz);	      out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sz.length();  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  sz.length();  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  sz.length();  i++)  {	  for(int    i    =    0;    i    <    sz.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sz.length  -  1;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  sz.length  -  1;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  sz.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    sz.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  sz.length;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  1;  i  <  sz.length;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  1;  i  <  sz.length;  i++)  {	  for(int    i    =    0;    i    <    sz.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
21	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write( "u0000 "  +  hex(ch));  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "u0000 "  +  hex(ch));	      out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
22	[BUG]  [BUGGY]  char  ch  =  str.charAt(0),  sz;  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  char  ch  =  str.charAt(0),  sz;  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(0),  sz;	      char    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length();  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  str.length();  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length();  i++)  {	  for(int    i    =    0;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz);  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz);  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length,  sz);  i++)  {	  for(int    i    =    0;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  str.length;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  1;  i  <  str.length;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  1;  i  <  str.length;  i++)  {	  for(int    i    =    0;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length-1;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  str.length-1;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length-1;  i++)  {	  for(int    i    =    0;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
27	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  char  ch  =  str.charAt(0,  sz);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(0,  sz);	      char    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
28	[BUG]  [BUGGY]  out.write( "000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write( "000 "  +  hex(ch));  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "000 "  +  hex(ch));	      out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length,  sz;  i++)  {	  for(int    i    =    0;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
30	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  str.length();  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  For(int  i  =  0;  i  <  str.length();  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	For(int  i  =  0;  i  <  str.length();  i++)  {	  for(int    i    =    0;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
31	[BUG]  [BUGGY]  int  sz  =  out.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  int  sz  =  out.length();  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  out.length();	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
32	[BUG]  [BUGGY]  sz  =  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  sz  =  str.charAt(0);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.charAt(0);	      sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
33	[BUG]  [BUGGY]  out.write( "utf-8 "  +  hex(sz));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write( "utf-8 "  +  hex(sz));  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "utf-8 "  +  hex(sz));	      out.write(   "u   "    +    hex(sz));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.size();  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  for(int  i  =  0;  i  <  str.size();  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.size();  i++)  {	  for(int    i    =    0;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
35	[BUG]  [BUGGY]  out.write(str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write(str.charAt(0));  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(str.charAt(0));	      out.write('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
36	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  int  sz  =  str.lastIndexOf('.');  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  str.lastIndexOf('.');	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
37	[BUG]  [BUGGY]  out.write( "utf-8 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write( "utf-8 "  +  hex(ch));  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "utf-8 "  +  hex(ch));	      out.write(   "u   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
38	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  char  ch  =  str.charAt(sz  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  -  1);	      char    ch    =    str.charAt(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
39	[BUG]  [BUGGY]  String  ch  =  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  String  ch  =  str.charAt(0);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	String  ch  =  str.charAt(0);	      char    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
40	[BUG]  [BUGGY]  char  ch  =  str.charAt(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  char  ch  =  str.charAt(1);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(1);	      char    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
41	[BUG]  [BUGGY]  out.write( "00 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  out.write( "00 "  +  hex(ch));  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "00 "  +  hex(ch));	      out.write(   "u00   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
42	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();    [BUGGY]  sz  =  str.lastIndexOf('.');  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.lastIndexOf('.');	      sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
