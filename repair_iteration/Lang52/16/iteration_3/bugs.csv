bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  -  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  -  1,  escapeSingleQuote);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  -  1,  escapeSingleQuote);	  char    ch    =    str.charAt(sz    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
2	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  -  2);	  char    ch    =    str.charAt(sz    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
3	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  -  1  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  -  1  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  -  1  +  1);	  char    ch    =    str.charAt(sz    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
4	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.lastIndexOf('.',  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.lastIndexOf('.',  0);	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
5	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  32);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.lastIndexOf('.',  32);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.lastIndexOf('.',  32);	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
6	[BUG]  [BUGGY]  sz  =  str.indexOf('.',  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.indexOf('.',  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.indexOf('.',  sz);	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
7	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.lastIndexOf('.',  i);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.lastIndexOf('.',  i);	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
8	[BUG]  [BUGGY]  out.write(sz,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(sz,  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(sz,  0);	  out.write(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
9	[BUG]  [BUGGY]  out.write(sz  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(sz  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(sz  +  1);	  out.write(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
10	[BUG]  [BUGGY]  out.write(sz,  0,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(sz,  0,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(sz,  0,  sz);	  out.write(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
11	[BUG]  [BUGGY]  sz  =  str.charAt(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.charAt(i);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.charAt(i);	  sz    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
12	[BUG]  [BUGGY]  sz  =  str.charAt(0,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.charAt(0,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.charAt(0,  sz);	  sz    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
13	[BUG]  [BUGGY]  sz  =  str.charAt(sz.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.charAt(sz.length()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.charAt(sz.length()  -  1);	  sz    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
14	[BUG]  [BUGGY]  char  ch  =  str.charAt(i  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(i  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(i  +  1);	  char    ch    =    str.charAt(i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
15	[BUG]  [BUGGY]  char  ch  =  str.charAt(i,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(i,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(i,  sz);	  char    ch    =    str.charAt(i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length-2;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length-2;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length-2;  i++)  {	  for(int    i    =    0;    i    <    str.length-1;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length-3;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length-3;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length-3;  i++)  {	  for(int    i    =    0;    i    <    str.length-1;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
18	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  str.length()  -  1;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  For(int  i  =  0;  i  <  str.length()  -  1;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	For(int  i  =  0;  i  <  str.length()  -  1;  i++)  {	  For(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
19	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  str.length()  -  2;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  For(int  i  =  0;  i  <  str.length()  -  2;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	For(int  i  =  0;  i  <  str.length()  -  2;  i++)  {	  For(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
20	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  str.length()  +  2;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  For(int  i  =  0;  i  <  str.length()  +  2;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	For(int  i  =  0;  i  <  str.length()  +  2;  i++)  {	  For(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
21	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  str.length()  +  1;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  For(int  i  =  0;  i  <  str.length()  +  1;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	For(int  i  =  0;  i  <  str.length()  +  1;  i++)  {	  For(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
22	[BUG]  [BUGGY]  out.write('n',  sz  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write('n',  sz  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write('n',  sz  +  1);	  out.write('n',    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
23	[BUG]  [BUGGY]  out.write('n',  sz  +  1,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write('n',  sz  +  1,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write('n',  sz  +  1,  sz);	  out.write('n',    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
24	[BUG]  [BUGGY]  out.write(sz,  'n');  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(sz,  'n');  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(sz,  'n');	  out.write('n',    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length(),  sz;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length(),  sz;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length(),  sz;  i++)  {	  for(int    i    =    0;    i    <    str.length,    sz;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz  +  1;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz  +  1;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length,  sz  +  1;  i++)  {	  for(int    i    =    0;    i    <    str.length,    sz;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0,  sz  =  str.length();  i  <  sz;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0,  sz  =  str.length();  i  <  sz;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0,  sz  =  str.length();  i  <  sz;  i++)  {	  for(int    i    =    0;    i    <    str.length,    sz;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  1,  sz;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  1,  sz;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length()  +  1,  sz;  i++)  {	  for(int    i    =    0;    i    <    str.length,    sz;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
29	[BUG]  [BUGGY]  Integer  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  Integer  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	Integer  sz  =  str.length();	  int    sz    =    str.length()    -    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
30	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  32);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  int  sz  =  str.lastIndexOf('.',  32);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  str.lastIndexOf('.',  32);	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
31	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  16);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  int  sz  =  str.lastIndexOf('.',  16);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  str.lastIndexOf('.',  16);	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
32	[BUG]  [BUGGY]  char  sz  =  str.lastIndexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  sz  =  str.lastIndexOf('.');  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  sz  =  str.lastIndexOf('.');	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
33	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  12);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  int  sz  =  str.lastIndexOf('.',  12);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  str.lastIndexOf('.',  12);	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
34	[BUG]  [BUGGY]  out.write( "00 "  +  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "00 "  +  hex(ch)+  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "00 "  +  hex(ch)+  1);	  out.write(   "00   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
35	[BUG]  [BUGGY]  out.write('n'  +  sz  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write('n'  +  sz  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write('n'  +  sz  +  1);	  out.write('n'    +    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
36	[BUG]  [BUGGY]  out.write('n'  +  sz,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write('n'  +  sz,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write('n'  +  sz,  sz);	  out.write('n'    +    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
37	[BUG]  [BUGGY]  out.write('n'  +  sz,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write('n'  +  sz,  ch);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write('n'  +  sz,  ch);	  out.write('n'    +    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
38	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz++,  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz++,  i);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz++,  i);	  char    ch    =    str.charAt(sz++);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
39	[BUG]  [BUGGY]  char  ch  =  str.charAt(i++);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(i++);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(i++);	  char    ch    =    str.charAt(sz++);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
40	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz++,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz++,  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz++,  0);	  char    ch    =    str.charAt(sz++);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
41	[BUG]  [BUGGY]  char  ch  =  str.charAt(0),  sz  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(0),  sz  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(0),  sz  +  1;	  char    ch    =    str.charAt(0),    sz;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
42	[BUG]  [BUGGY]  char  ch  =  str.charAt(i),  sz;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(i),  sz;  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(i),  sz;	  char    ch    =    str.charAt(0),    sz;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
43	[BUG]  [BUGGY]  out.write( "u00 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "u00 ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "u00 ");	  out.write(   "n   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
44	[BUG]  [BUGGY]  out.write( "u000 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "u000 ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "u000 ");	  out.write(   "n   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
45	[BUG]  [BUGGY]  StaxUtils.copyStructure(out,  str.length());  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtils.copyStructure(out,  str.length());  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtils.copyStructure(out,  str.length());  sz  =  str.length();	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
46	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length());  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtils.writeStructure(out,  str.length());  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtils.writeStructure(out,  str.length());  sz  =  str.length();	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
47	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtils.writeStructure(out,  str.length(),  sz);	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.size()  -  1;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.size()  -  1;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.size()  -  1;  i++)  {	  for(int    i    =    0;    i    <    str.size();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.size()  -  2;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.size()  -  2;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.size()  -  2;  i++)  {	  for(int    i    =    0;    i    <    str.size();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
50	[BUG]  [BUGGY]  out.write(str.charAt(0),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(str.charAt(0),  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(str.charAt(0),  sz);	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
51	[BUG]  [BUGGY]  out.write(str.charAt(0),  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(str.charAt(0),  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(str.charAt(0),  0);	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
52	[BUG]  [BUGGY]  out.write(str.substring(0,  sz));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(str.substring(0,  sz));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(str.substring(0,  sz));	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
53	[BUG]  [BUGGY]  out.write(str.charAt(0),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(str.charAt(0),  escapeSingleQuote);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(str.charAt(0),  escapeSingleQuote);	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
54	[BUG]  [BUGGY]  String  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  String  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	String  sz  =  str.length();	  char    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
55	[BUG]  [BUGGY]  Character  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  Character  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	Character  sz  =  str.length();	  char    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
56	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  +  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  +  1,  escapeSingleQuote);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  +  1,  escapeSingleQuote);	  char    ch    =    str.charAt(sz    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
57	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  +  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  +  3);	  char    ch    =    str.charAt(sz    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
58	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  +  2);	  char    ch    =    str.charAt(sz    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
59	[BUG]  [BUGGY]  char  sz  =  out.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  sz  =  out.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  sz  =  out.length();	  int    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
60	[BUG]  [BUGGY]  int  sz  =  out.length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  int  sz  =  out.length()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  out.length()  +  1;	  int    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
61	[BUG]  [BUGGY]  int  sz  =  out.length()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  int  sz  =  out.length()  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  out.length()  -  1;	  int    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length(),  sz);  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length(),  sz);  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length(),  sz);  i++)  {	  for(int    i    =    0;    i    <    str.length,    sz);    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz  +  1);  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz  +  1);  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length,  sz  +  1);  i++)  {	  for(int    i    =    0;    i    <    str.length,    sz);    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz,  sz);  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length,  sz,  sz);  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length,  sz,  sz);  i++)  {	  for(int    i    =    0;    i    <    str.length,    sz);    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  1,  sz);  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  1,  sz);  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length()  +  1,  sz);  i++)  {	  for(int    i    =    0;    i    <    str.length,    sz);    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
66	[BUG]  [BUGGY]  StaxUtils.checkState(str.length()  >  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtils.checkState(str.length()  >  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtils.checkState(str.length()  >  0);	  sz    =    str.length()    +    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
67	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  sz  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(0,  sz  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(0,  sz  +  1);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
68	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  sz  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(0,  sz  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(0,  sz  -  1);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
69	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  sz  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(0,  sz  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(0,  sz  +  2);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
70	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz,  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz,  0);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
71	[BUG]  [BUGGY]  char  ch  =  str.charAt(2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(2);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(2);	  char    ch    =    str.charAt(1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0,  sz.length;  i  <  sz.length;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0,  sz.length;  i  <  sz.length;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0,  sz.length;  i  <  sz.length;  i++)  {	  for(int    i    =    1;    i    <    sz.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  sz.length;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  2;  i  <  sz.length;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  2;  i  <  sz.length;  i++)  {	  for(int    i    =    1;    i    <    sz.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  str.length();  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  1;  i  <  str.length();  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  1;  i  <  str.length();  i++)  {	  for(int    i    =    1;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0,  sz  =  1;  i  <  str.length;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0,  sz  =  1;  i  <  str.length;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0,  sz  =  1;  i  <  str.length;  i++)  {	  for(int    i    =    1;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  str.length;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  2;  i  <  str.length;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  2;  i  <  str.length;  i++)  {	  for(int    i    =    1;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
77	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtils.writeStructure(out,  str.length());  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtils.writeStructure(out,  str.length());	  sz    =    str.length()    +    3;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
78	[BUG]  [BUGGY]  out.write( "utf-8 "  +  hex(ch),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "utf-8 "  +  hex(ch),  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "utf-8 "  +  hex(ch),  sz);	  out.write(   "utf-8   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length()  -  1;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length()  -  1;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length()  -  2;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length()  -  2;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length()  -  2;  i++)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  2;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  2;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length()  +  2;  i++)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  1;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  1;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sz.length  -  2;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  sz.length  -  2;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  sz.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    sz.length    -    1;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0,  sz  =  str.length();  i  <  sz.length();  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0,  sz  =  str.length();  i  <  sz.length();  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0,  sz  =  str.length();  i  <  sz.length();  i++)  {	  for(int    i    =    0;    i    <    sz.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  str.length();  i  <  sz.length();  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0,  len  =  str.length();  i  <  sz.length();  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0,  len  =  str.length();  i  <  sz.length();  i++)  {	  for(int    i    =    0;    i    <    sz.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
86	[BUG]  [BUGGY]  out.write( "000 "  +  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "000 "  +  hex(ch)+  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "000 "  +  hex(ch)+  1);	  out.write(   "000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
87	[BUG]  [BUGGY]  out.write( "000 "  +  hex(ch),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "000 "  +  hex(ch),  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "000 "  +  hex(ch),  sz);	  out.write(   "000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
88	[BUG]  [BUGGY]  out.write( "0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "0000 "  +  hex(ch));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "0000 "  +  hex(ch));	  out.write(   "000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
89	[BUG]  [BUGGY]  StaxUtil.checkState(str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtil.checkState(str.length());  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtil.checkState(str.length());	  sz    =    str.length()    +    3;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
90	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  ==  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtil.checkState(str.length()  ==  3);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtil.checkState(str.length()  ==  3);	  sz    =    str.length()    +    3;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
91	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  }  );  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtil.checkState(str.length()  }  );  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtil.checkState(str.length()  }  );	  sz    =    str.length()    +    3;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
92	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  str.length()  +  sz;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  For(int  i  =  0;  i  <  str.length()  +  sz;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	For(int  i  =  0;  i  <  str.length()  +  sz;  i++)  {	  For(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sz.length  -  3;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  sz.length  -  3;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  sz.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    sz.length    -    1;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
94	[BUG]  [BUGGY]  int  sz  =  str.indexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  int  sz  =  str.indexOf('.');  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	int  sz  =  str.indexOf('.');	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
95	[BUG]  [BUGGY]  sz  =  str.indexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.indexOf('.');  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.indexOf('.');	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
96	[BUG]  [BUGGY]  sz  =  str.charAt(i  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.charAt(i  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.charAt(i  +  1);	  sz    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  str.size();  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  1;  i  <  str.size();  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  1;  i  <  str.size();  i++)  {	  for(int    i    =    0;    i    <    str.size();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.size()  +  sz;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.size()  +  sz;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.size()  +  sz;  i++)  {	  for(int    i    =    0;    i    <    str.size();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
99	[BUG]  [BUGGY]  StaxUtil.checkState(str.length());  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtil.checkState(str.length());  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtil.checkState(str.length());  sz  =  str.length();	  sz    =    str.length()    +    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
100	[BUG]  [BUGGY]  StaxUtil.checkState(str.length(), "Style  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtil.checkState(str.length(), "Style  must  not  be  null. ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtil.checkState(str.length(), "Style  must  not  be  null. ");	  sz    =    str.length()    +    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
101	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "u00000 "  +  hex(ch));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "u00000 "  +  hex(ch));	  out.write(   "u0000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
102	[BUG]  [BUGGY]  out.write( "u00 "  +  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "u00 "  +  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "u00 "  +  sz);	  out.write(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
103	[BUG]  [BUGGY]  out.write(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(str);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(str);	  out.write(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
104	[BUG]  [BUGGY]  out.write( "u000 "  +  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "u000 "  +  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "u000 "  +  sz);	  out.write(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
105	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  *  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  *  1);	  char    ch    =    str.charAt(sz    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
106	[BUG]  [BUGGY]  out.write( "null ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "null ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "null ");	  out.write(   "n   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
107	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  -  16);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  -  16);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  -  16);	  char    ch    =    str.charAt(sz    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
108	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  -  32);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  -  32);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  -  32);	  char    ch    =    str.charAt(sz    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
109	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz,  sz);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
110	[BUG]  [BUGGY]  String  ch  =  str.charAt(sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  String  ch  =  str.charAt(sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	String  ch  =  str.charAt(sz);	  String    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
111	[BUG]  [BUGGY]  out.write(str.charAt(sz));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(str.charAt(sz));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(str.charAt(sz));	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
112	[BUG]  [BUGGY]  out.write( "utf-8 "  +  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "utf-8 "  +  hex(ch)+  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "utf-8 "  +  hex(ch)+  1);	  out.write(   "utf-8   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
113	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  ==  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtil.checkState(str.length()  ==  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtil.checkState(str.length()  ==  1);	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
114	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  ==  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtil.checkState(str.length()  ==  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtil.checkState(str.length()  ==  0);	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
115	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()!=  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtil.checkState(str.length()!=  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtil.checkState(str.length()!=  1);	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
116	[BUG]  [BUGGY]  StaxUtils.writeStandardInteger(out,  str.length());  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtils.writeStandardInteger(out,  str.length());  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtils.writeStandardInteger(out,  str.length());  sz  =  str.length();	  sz    =    str.length()    +    3;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
117	[BUG]  [BUGGY]  StaxUtils.writeStandardInteger(out,  str.length(),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtils.writeStandardInteger(out,  str.length(),  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtils.writeStandardInteger(out,  str.length(),  sz);	  sz    =    str.length()    +    3;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
118	[BUG]  [BUGGY]  StaxUtils.writeStandardInteger(out,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtils.writeStandardInteger(out,  str.length());  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtils.writeStandardInteger(out,  str.length());	  sz    =    str.length()    +    3;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
119	[BUG]  [BUGGY]  out.write( "00 "  +  hex(sz));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "00 "  +  hex(sz));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "00 "  +  hex(sz));	  out.write(   "00   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
120	[BUG]  [BUGGY]  char  ch  =  str.charAt(0),  sz++;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(0),  sz++;  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(0),  sz++;	  char    ch    =    str.charAt(0),    sz;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
121	[BUG]  [BUGGY]  out.write( "000 "  +  hex(sz));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "000 "  +  hex(sz));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "000 "  +  hex(sz));	  out.write(   "000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0,  sz  =  str.size();  i  <  sz;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0,  sz  =  str.size();  i  <  sz;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0,  sz  =  str.size();  i  <  sz;  i++)  {	  for(int    i    =    0;    i    <    str.size();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
123	[BUG]  [BUGGY]  out.write( "UTF-8 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "UTF-8 "  +  hex(ch));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "UTF-8 "  +  hex(ch));	  out.write(   "utf-8   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
124	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.lastIndexOf('.',  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.lastIndexOf('.',  sz);	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  str.length();  i  <  len;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0,  len  =  str.length();  i  <  len;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0,  len  =  str.length();  i  <  len;  i++)  {	  for(int    i    =    1;    i    <    str.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
126	[BUG]  [BUGGY]  StaxUtils.writeStandardEscaped(out,  str.substring(sz));  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  StaxUtils.writeStandardEscaped(out,  str.substring(sz));  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	StaxUtils.writeStandardEscaped(out,  str.substring(sz));  sz  =  str.length();	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
127	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  +  1,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  +  1,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  +  1,  sz);	  char    ch    =    str.charAt(sz    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
128	[BUG]  [BUGGY]  String  ch  =  str.charAt(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  String  ch  =  str.charAt(1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	String  ch  =  str.charAt(1);	  char    ch    =    str.charAt(1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
129	[BUG]  [BUGGY]  char  sz  =  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  sz  =  str.charAt(0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  sz  =  str.charAt(0);	  char    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
130	[BUG]  [BUGGY]  out.write(str,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write(str,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write(str,  sz);	  out.write(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
131	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  str.length();  i  +=  2)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  For(int  i  =  0;  i  <  str.length();  i  +=  2)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	For(int  i  =  0;  i  <  str.length();  i  +=  2)  {	  For(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length();  i  +=  2)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  0;  i  <  str.length();  i  +=  2)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  0;  i  <  str.length();  i  +=  2)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  sz.length  -  1;  i++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  for(int  i  =  1;  i  <  sz.length  -  1;  i++)  {  [BUGGY]      char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	for(int  i  =  1;  i  <  sz.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    sz.length;    i++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
134	[BUG]  [BUGGY]  out.write( "UTF-8 "  +  hex(sz));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  out.write( "UTF-8 "  +  hex(sz));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	out.write( "UTF-8 "  +  hex(sz));	  out.write(   "utf-8   "    +    hex(sz));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
135	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  -  1,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz  -  1,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz  -  1,  sz);	  char    ch    =    str.charAt(sz    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
136	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz++,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz++,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz++,  sz);	  char    ch    =    str.charAt(sz++);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
137	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz++,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  char  ch  =  str.charAt(sz++,  escapeSingleQuote);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	char  ch  =  str.charAt(sz++,  escapeSingleQuote);	  char    ch    =    str.charAt(sz++);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
138	[BUG]  [BUGGY]  sz  =  str.charAt(str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.charAt(str.length()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.charAt(str.length()  -  1);	  sz    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
139	[BUG]  [BUGGY]  sz  =  str.charAt(str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();      [BUGGY]  sz  =  str.charAt(str.length());  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  if  (ch  <  32)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	sz  =  str.charAt(str.length());	  sz    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
