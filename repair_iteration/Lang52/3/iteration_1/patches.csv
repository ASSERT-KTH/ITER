bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "u00 "  +  hex(ch));  break;	      out.write(   "u000   "    +    hex(ch));    break;    	non-compiled	[CE]  empty  character  literal	5	None	replace
2	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  break;  [CE]  empty  character  literal  [FE]                  ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "u0000 "  +  hex(ch));  break;  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "u0000 "  +  hex(ch));  break;	      out.write(   "u000   "    +    hex(ch));    break;    	non-compiled	[CE]  empty  character  literal	5	None	replace
3	[BUG]  [BUGGY]  out.write( "u00 "  +  escapeSingleQuote);  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "u00 "  +  escapeSingleQuote);  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "u00 "  +  escapeSingleQuote);	      out.write(   "u000   "    +    escapeSingleQuote);    	non-compiled	[CE]  empty  character  literal	10	None	replace
4	[BUG]  [BUGGY]  out.write( "u000 "  +  hex(ch);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "u000 "  +  hex(ch);  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "u000 "  +  hex(ch);	      out.write(   "u000   "    +    escapeSingleQuote);    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "u0000 "  +  hex(ch));  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "u0000 "  +  hex(ch));	      out.write(   "u000   "    +    escapeSingleQuote);    	non-compiled	[CE]  empty  character  literal	10	None	replace
6	[BUG]  [BUGGY]  out.write( "' "  +  hex(ch)+ "' ");  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "' "  +  hex(ch)+ "' ");  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "' "  +  hex(ch)+ "' ");	      out.write(   "'   "    +    hex(ch));    	non-compiled	[CE]  empty  character  literal	4	None	replace
7	[BUG]  [BUGGY]  out.write( "u00 "  +  escapeSingleQuote(ch));  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "u00 "  +  escapeSingleQuote(ch));  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "u00 "  +  escapeSingleQuote(ch));	      out.write(   "u00   "    +    hex(ch));    	non-compiled	[CE]  empty  character  literal	2	None	replace
8	[BUG]  [BUGGY]  out.write( "u000 ");  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "u000 ");  [BUGGY]    }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "u000 ");	  out.write(   "'   ");    	non-compiled	[CE]  empty  character  literal	7	None	replace
9	[BUG]  [BUGGY]  out.write( "' "+escapeSingleQuote);  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "' "+escapeSingleQuote);  [BUGGY]    }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "' "+escapeSingleQuote);	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  empty  character  literal	9	None	replace
10	[BUG]  [BUGGY]  out.write(''+ch);  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write(''+ch);  [BUGGY]    }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write(''+ch);	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  empty  character  literal	9	None	replace
11	[BUG]  [BUGGY]  out.write( "'+escapeSingleQuote);  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "'+escapeSingleQuote);  [BUGGY]    }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "'+escapeSingleQuote);	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
12	[BUG]  [BUGGY]  out.write( "u000 "  +  escapeSingleQuote(ch));  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "u000 "  +  escapeSingleQuote(ch));  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "u000 "  +  escapeSingleQuote(ch));	      out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  empty  character  literal	1	None	replace
13	[BUG]  [BUGGY]  out.write('''  +  hex(ch));  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write('''  +  hex(ch));  [BUGGY]    }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write('''  +  hex(ch));	  out.write(''');    	non-compiled	[CE]  empty  character  literal	8	None	replace
14	[BUG]  [BUGGY]  out.write( "'' ");  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "'' ");  [BUGGY]    }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "'' ");	  out.write(   "'   ");    	non-compiled	[CE]  empty  character  literal	7	None	replace
15	[BUG]  [BUGGY]  out.write(''+hex(ch));  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write(''+hex(ch));  [BUGGY]    }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write(''+hex(ch));	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  empty  character  literal	9	None	replace
16	[BUG]  [BUGGY]  out.write( "'' "  +  hex(ch));  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write( "'' "  +  hex(ch));  [BUGGY]    out.write('\\');  }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write( "'' "  +  hex(ch));	      out.write(   "'   "    +    hex(ch));    	non-compiled	[CE]  empty  character  literal	4	None	replace
17	[BUG]  [BUGGY]  out.write(''+escapeSingleQuote  +  1);  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {    [BUGGY]  out.write(''+escapeSingleQuote  +  1);  [BUGGY]    }  out.write('\'');  break;  case  '   "':  out.write('\\');  out.write('   "');  break;  case  '\\':  out.write('\\');  out.write('\\');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	out.write(''+escapeSingleQuote  +  1);	  out.write(''+escapeSingleQuote);    	non-compiled	[CE]  empty  character  literal	9	None	replace
