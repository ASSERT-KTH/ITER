bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch),  escapeSingleQuote);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( "u00 "  +  hex(ch),  escapeSingleQuote);  break;  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( "u00 "  +  hex(ch),  escapeSingleQuote);  break;	  out.write(   "u000   "    +    hex(ch),    escapeSingleQuote);    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
2	[BUG]  [BUGGY]  out.write('''  +  hex(ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch,  escapeSingleQuote);	  out.write('''    +    hex(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
3	[BUG]  [BUGGY]  out.write('u000'  +  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('u000'  +  hex(ch)+  1);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('u000'  +  hex(ch)+  1);	  out.write('u000'    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
4	[BUG]  [BUGGY]  out.write('u000'  +  hex(ch),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('u000'  +  hex(ch),  escapeSingleQuote);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('u000'  +  hex(ch),  escapeSingleQuote);	  out.write('u000'    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
5	[BUG]  [BUGGY]  out.write('u000'  +  hex(ch)+ "u000 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('u000'  +  hex(ch)+ "u000 ");  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('u000'  +  hex(ch)+ "u000 ");	  out.write('u000'    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
6	[BUG]  [BUGGY]  out.write( "u00 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( "u00 ");  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( "u00 ");	  out.write(   "u000   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
7	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  1);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+  1);  break;  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+  1);  break;	  out.write('''    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
8	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+ "' ");  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+ "' ");  break;  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+ "' ");  break;	  out.write('''    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
9	[BUG]  [BUGGY]  out.write('''  +  hex(ch),  escapeSingleQuote);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch),  escapeSingleQuote);  break;  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch),  escapeSingleQuote);  break;	  out.write('''    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
10	[BUG]  [BUGGY]  out.write('''  +  hex(ch),  escapeSingleQuote,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch),  escapeSingleQuote,  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch),  escapeSingleQuote,  sz);	  out.write('''    +    hex(ch),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
11	[BUG]  [BUGGY]  out.write('''  +  hex(ch),  escapeSingleQuote,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch),  escapeSingleQuote,  str);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch),  escapeSingleQuote,  str);	  out.write('''    +    hex(ch),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
12	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+  1,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+  1,  escapeSingleQuote);	  out.write('''    +    hex(ch),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
13	[BUG]  [BUGGY]  out.write('''  ||  escapeSingleQuote  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  ||  escapeSingleQuote  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  ||  escapeSingleQuote  +  1);	  out.write('''    ||    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
14	[BUG]  [BUGGY]  out.write('''  ||  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  ||  escapeSingleQuote,  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  ||  escapeSingleQuote,  ch);	  out.write('''    ||    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
15	[BUG]  [BUGGY]  out.write(''',  char  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  char  ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  char  ch,  escapeSingleQuote);	  out.write('''    &&    escapeSingleQuote,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
16	[BUG]  [BUGGY]  out.write(''',  hex(ch),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  hex(ch),  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  hex(ch),  escapeSingleQuote);	  out.write('''    &&    escapeSingleQuote,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
17	[BUG]  [BUGGY]  out.write(''',  ch  +  escapeSingleQuote,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  +  escapeSingleQuote,  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  +  escapeSingleQuote,  sz);	  out.write('''    &&    escapeSingleQuote,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
18	[BUG]  [BUGGY]  out.write('''  +  str,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  str,  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  str,  ch);	  out.write('''    +    str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
19	[BUG]  [BUGGY]  out.write('''  +  str,  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  str,  ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  str,  ch,  escapeSingleQuote);	  out.write('''    +    str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
20	[BUG]  [BUGGY]  out.write('''  +  str.charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  str.charAt(ch));  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  str.charAt(ch));	  out.write('''    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
21	[BUG]  [BUGGY]  out.write('''  +  str,  charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  str,  charAt(ch));  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  str,  charAt(ch));	  out.write('''    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
22	[BUG]  [BUGGY]  out.write('''  +  charAt(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  charAt(ch)+  1);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  charAt(ch)+  1);	  out.write('''    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
23	[BUG]  [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  &&  escapeSingleQuote,  sz);	  out.write(''',    ch    &&    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
24	[BUG]  [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  str);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  &&  escapeSingleQuote,  str);	  out.write(''',    ch    &&    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
25	[BUG]  [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  hex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  hex);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  &&  escapeSingleQuote,  hex);	  out.write(''',    ch    &&    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
26	[BUG]  [BUGGY]  out.write(''',  ch  +  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  +  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  +  escapeSingleQuote);	  out.write(''',    ch    &&    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
27	[BUG]  [BUGGY]  out.write('''  +  hex(ch),  sz,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch),  sz,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch),  sz,  escapeSingleQuote);	  out.write('''    +    hex(ch),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
28	[BUG]  [BUGGY]  out.write('''  +  hex(ch),  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch),  0);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch),  0);	  out.write('''    +    hex(ch),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
29	[BUG]  [BUGGY]  out.write('''  +  hex(ch),  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch),  i);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch),  i);	  out.write('''    +    hex(ch),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
30	[BUG]  [BUGGY]  out.write( "u000 "  +  hex(ch)+ ",  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( "u000 "  +  hex(ch)+ ",  escapeSingleQuote);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( "u000 "  +  hex(ch)+ ",  escapeSingleQuote);	  out.write(   "u000   "    +    hex(ch),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
31	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+ "' ",  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+ "' ",  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+ "' ",  escapeSingleQuote);	  out.write('''    +    hex(ch)+   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
32	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+ ",' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+ ",' ");  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+ ",' ");	  out.write('''    +    hex(ch)+   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
33	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+ "', ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+ "', ");  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+ "', ");	  out.write('''    +    hex(ch)+   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
34	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+  2);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+  2);	  out.write('''    +    hex(ch)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
35	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+  3);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+  3);	  out.write('''    +    hex(ch)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
36	[BUG]  [BUGGY]  out.write(''',  ch  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  +  1);	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
37	[BUG]  [BUGGY]  out.write(''',  char  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  char  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  char  ch);	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
38	[BUG]  [BUGGY]  out.write(''',  hx(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  hx(ch));  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  hx(ch));	  out.write(''',    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
39	[BUG]  [BUGGY]  out.write(''',  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  hex(ch)+  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  hex(ch)+  1);	  out.write(''',    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
40	[BUG]  [BUGGY]  out.write(''',  hex(ch),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  hex(ch),  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  hex(ch),  sz);	  out.write(''',    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
41	[BUG]  [BUGGY]  out.write(''',  hex(ch)+  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  hex(ch)+  2);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  hex(ch)+  2);	  out.write(''',    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
42	[BUG]  [BUGGY]  out.write(''',  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch,  escapeSingleQuote);	  out.write('''    +    ch,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
43	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").charAt(ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( ".s.IFJDCS ").charAt(ch,  escapeSingleQuote);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( ".s.IFJDCS ").charAt(ch,  escapeSingleQuote);	  out.write(   ".s.IFJDCS   ").charAt(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
44	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").charAt(ch,  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( ".s.IFJDCS ").charAt(ch,  hex(ch));  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( ".s.IFJDCS ").charAt(ch,  hex(ch));	  out.write(   ".s.IFJDCS   ").charAt(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
45	[BUG]  [BUGGY]  out.write('''  +  hex(ch  +  escapeSingleQuote));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch  +  escapeSingleQuote));  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch  +  escapeSingleQuote));	  out.write('''    +    ch    +    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
46	[BUG]  [BUGGY]  out.write('''  +  hex(ch  +  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch  +  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch  +  escapeSingleQuote);	  out.write('''    +    ch    +    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
47	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  escapeSingleQuote,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+  escapeSingleQuote,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+  escapeSingleQuote,  escapeSingleQuote);	  out.write('''    +    hex(ch)+    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
48	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  escapeSingleQuote,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+  escapeSingleQuote,  str);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+  escapeSingleQuote,  str);	  out.write('''    +    hex(ch)+    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
49	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  escapeSingleQuote,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+  escapeSingleQuote,  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+  escapeSingleQuote,  sz);	  out.write('''    +    hex(ch)+    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
50	[BUG]  [BUGGY]  out.write('''  +  str,  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  str,  escapeSingleQuote,  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  str,  escapeSingleQuote,  ch);	  out.write('''    +    str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
51	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+ ".' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+ ".' ");  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+ ".' ");	  out.write('''    +    hex(ch)+   "'   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
52	[BUG]  [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote  +  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  &&  escapeSingleQuote  +  1);	  out.write(''',    ch    &&    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
53	[BUG]  [BUGGY]  out.write( "u000 ").charAt(ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( "u000 ").charAt(ch);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( "u000 ").charAt(ch);	  out.write(   ".s.IFJDCS   ").charAt(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
54	[BUG]  [BUGGY]  out.write('u000'  +  hex(ch)+  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('u000'  +  hex(ch)+  2);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('u000'  +  hex(ch)+  2);	  out.write('u000'    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
55	[BUG]  [BUGGY]  out.write( ",u000 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( ",u000 ");  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( ",u000 ");	  out.write(   "u000   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
56	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  ''');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+  ''');  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+  ''');	  out.write('''    +    hex(ch)+    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
57	[BUG]  [BUGGY]  out.write('''  +  hex(ch)/  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)/  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)/  escapeSingleQuote);	  out.write('''    +    hex(ch)+    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
58	[BUG]  [BUGGY]  out.write('''  +  hex(ch)+  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)+  4);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)+  4);	  out.write('''    +    hex(ch)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
59	[BUG]  [BUGGY]  out.write('''  ||  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  ||  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  ||  ch);	  out.write('''    ||    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
60	[BUG]  [BUGGY]  out.write('''  +  str  +  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  str  +  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  str  +  escapeSingleQuote);	  out.write('''    +    ch    +    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
61	[BUG]  [BUGGY]  out.write('''  +  hex(ch),  escapeSingleQuote,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch),  escapeSingleQuote,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch),  escapeSingleQuote,  escapeSingleQuote);	  out.write('''    +    hex(ch),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
62	[BUG]  [BUGGY]  out.write('u000'  +  charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('u000'  +  charAt(ch));  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('u000'  +  charAt(ch));	  out.write(   "u00   "    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
63	[BUG]  [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  hex(ch));  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  &&  escapeSingleQuote,  hex(ch));	  out.write(''',    ch    &&    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
64	[BUG]  [BUGGY]  out.write(''',  ch  +  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  +  1,  escapeSingleQuote);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  +  1,  escapeSingleQuote);	  out.write(''',    ch    &&    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
65	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch)+ ",  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( "u00 "  +  hex(ch)+ ",  escapeSingleQuote);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( "u00 "  +  hex(ch)+ ",  escapeSingleQuote);	  out.write(   "u00   "    +    hex(ch),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
66	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( "u0000 "  +  hex(ch),  escapeSingleQuote);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( "u0000 "  +  hex(ch),  escapeSingleQuote);	  out.write(   "u00   "    +    hex(ch),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
67	[BUG]  [BUGGY]  out.write('''  +  hex(ch)/  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch)/  1);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch)/  1);	  out.write('''    +    hex(ch)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
68	[BUG]  [BUGGY]  out.write('''  +  hex(ch),  sz,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  +  hex(ch),  sz,  sz);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  +  hex(ch),  sz,  sz);	  out.write('''    +    hex(ch),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
69	[BUG]  [BUGGY]  out.write('''  &&  escapeSingleQuote,  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write('''  &&  escapeSingleQuote,  hex(ch));  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write('''  &&  escapeSingleQuote,  hex(ch));	  out.write('''    &&    escapeSingleQuote,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
70	[BUG]  [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write(''',  ch  &&  escapeSingleQuote,  ch);  [BUGGY]      break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write(''',  ch  &&  escapeSingleQuote,  ch);	  out.write('''    &&    escapeSingleQuote,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
71	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }      [BUGGY]  out.write( ".s.IFJDCS ").charAt(0);  [BUGGY]      out.write('\'');  break;  case  '     "':  out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	out.write( ".s.IFJDCS ").charAt(0);	  out.write(   ".s.IFJDCS   ").charAt(ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
