bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    char  ch  =  str.charAt(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  [BUGGY]  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	    char  ch  =  str.charAt(i);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	add
2	[BUG]  [BUGGY]    out.write( "u "  +  hex(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]    out.write( "u "  +  hex(i));  [BUGGY]  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	    out.write( "u "  +  hex(i));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	add
3	[BUG]  [BUGGY]    String  str  =(String)str.get(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]    String  str  =(String)str.get(i);  [BUGGY]  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	    String  str  =(String)str.get(i);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	add
4	[BUG]  [BUGGY]    String  str  =(String)out.get(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]    String  str  =(String)out.get(i);  [BUGGY]  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	    String  str  =(String)out.get(i);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	add
5	[BUG]  [BUGGY]    out.write( "u00 "  +  hex(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]    out.write( "u00 "  +  hex(i));  [BUGGY]  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	    out.write( "u00 "  +  hex(i));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	add
6	[BUG]  [BUGGY]  char  ch  =  str.charAt(i  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]  char  ch  =  str.charAt(i  +  1);  [BUGGY]    if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	char  ch  =  str.charAt(i  +  1);	char  ch  =  str.charAt(i);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
7	[BUG]  [BUGGY]  char  ch  =  str.charAt(i)+  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]  char  ch  =  str.charAt(i)+  1;  [BUGGY]    if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	char  ch  =  str.charAt(i)+  1;	char  ch  =  str.charAt(i);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
8	[BUG]  [BUGGY]  char  ch  =  str.charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]  char  ch  =  str.charAt(i));  [BUGGY]    if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	char  ch  =  str.charAt(i));	char  ch  =  str.charAt(i);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
9	[BUG]  [BUGGY]    out.write( "u000 "  +  hex(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]    out.write( "u000 "  +  hex(i));  [BUGGY]  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	    out.write( "u000 "  +  hex(i));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	add
10	[BUG]  [BUGGY]    out.write( "u0 "  +  hex(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]    out.write( "u0 "  +  hex(i));  [BUGGY]  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	    out.write( "u0 "  +  hex(i));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	add
11	[BUG]  [BUGGY]  char  ch  =  str.charAt(i).charAt(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]  char  ch  =  str.charAt(i).charAt(i);  [BUGGY]    if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	char  ch  =  str.charAt(i).charAt(i);	char  ch  =  str.charAt(i);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
12	[BUG]  [BUGGY]    char  ch  =  str.charAt(i);  out.write( "u "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  out.write( "u "  +  hex(ch));  [BUGGY]  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	    char  ch  =  str.charAt(i);  out.write( "u "  +  hex(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	add
13	[BUG]  [BUGGY]    char  ch  =  str.charAt(i);  out.write( "u00 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]    char  ch  =  str.charAt(i);  out.write( "u00 "  +  hex(ch));  [BUGGY]  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	    char  ch  =  str.charAt(i);  out.write( "u00 "  +  hex(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	add
14	[BUG]  [BUGGY]  char  ch  =  str.charAt(i).charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  [BUGGY]  char  ch  =  str.charAt(i).charAt(0);  [BUGGY]    if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	char  ch  =  str.charAt(i).charAt(0);	char  ch  =  str.charAt(i);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
