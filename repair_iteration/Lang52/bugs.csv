bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return escapeJavaStyleString(str, true); [FE] ComparisonFailure [CONTEXT] public static String escapeJavaScript(String str) { [BUGGY] return escapeJavaStyleString(str, true); [BUGGY] } [CLASS] StringEscapeUtils [METHOD] escapeJavaScript [RETURN_TYPE] String  String str [VARIABLES] boolean String str  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	122	122	1	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public static String escapeJavaScript(String str) { [BUGGY] [BUGGY] return escapeJavaStyleString(str, true); } [CLASS] StringEscapeUtils [METHOD] escapeJavaScript [RETURN_TYPE] String  String str [VARIABLES] boolean String str  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	122	122	1	add	
3	[BUG] [BUGGY] escapeJavaStyleString(out, str, true); [FE] ComparisonFailure [CONTEXT] public static void escapeJavaScript(Writer out, String str) throws IOException { [BUGGY] escapeJavaStyleString(out, str, true); [BUGGY] } [CLASS] StringEscapeUtils [METHOD] escapeJavaScript [RETURN_TYPE] void  Writer out String str [VARIABLES] boolean String str Writer out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public static void escapeJavaScript(Writer out, String str) throws IOException { [BUGGY] [BUGGY] escapeJavaStyleString(out, str, true); } [CLASS] StringEscapeUtils [METHOD] escapeJavaScript [RETURN_TYPE] void  Writer out String str [VARIABLES] boolean String str Writer out  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	138	138	1	add	
5	[BUG] [BUGGY] out.write('\\'); [FE] ComparisonFailure [CONTEXT] out.write("\\u00" + hex(ch)); } else { out.write("\\u000" + hex(ch)); } break; } } else { switch (ch) { case '\'': if (escapeSingleQuote) { [BUGGY] out.write('\\'); [BUGGY] } out.write('\''); break; case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] out.write("\\u00" + hex(ch)); } else { out.write("\\u000" + hex(ch)); } break; } } else { switch (ch) { case '\'': if (escapeSingleQuote) { [BUGGY] [BUGGY] out.write('\\'); } out.write('\''); break; case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	1.0	224	224	1	add	
7	[BUG] [BUGGY] return null; [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { if (str == null) { [BUGGY] return null; [BUGGY] } try { StringWriter writer = new StringWriter(str.length() * 2); escapeJavaStyleString(writer, str, escapeSingleQuotes); return writer.toString(); } catch (IOException ioe) {  ioe.printStackTrace(); return null; } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { if (str == null) { [BUGGY] [BUGGY] return null; } try { StringWriter writer = new StringWriter(str.length() * 2); escapeJavaStyleString(writer, str, escapeSingleQuotes); return writer.toString(); } catch (IOException ioe) {  ioe.printStackTrace(); return null; } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	150	150	1	add	
9	[BUG] [BUGGY] throw new IllegalArgumentException("The Writer must not be null"); [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { [BUGGY] throw new IllegalArgumentException("The Writer must not be null"); [BUGGY] } if (str == null) { return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);   [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { [BUGGY] [BUGGY] throw new IllegalArgumentException("The Writer must not be null"); } if (str == null) { return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);   [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	173	173	1	add	
11	[BUG] [BUGGY] out.write('\\'); [FE] ComparisonFailure [CONTEXT] } } else { switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '"': [BUGGY] out.write('\\'); [BUGGY] out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); break; default : out.write(ch); break; } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } } else { switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '"': [BUGGY] [BUGGY] out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); break; default : out.write(ch); break; } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	add	
13	[BUG] [BUGGY] out.write('"'); [FE] ComparisonFailure [CONTEXT] } else { switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '"': out.write('\\'); [BUGGY] out.write('"'); [BUGGY] break; case '\\': out.write('\\'); out.write('\\'); break; default : out.write(ch); break; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } else { switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '"': out.write('\\'); [BUGGY] [BUGGY] out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); break; default : out.write(ch); break; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	230	230	1	add	
15	[BUG] [BUGGY] break; [FE] ComparisonFailure [CONTEXT] switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '"': out.write('\\'); out.write('"'); [BUGGY] break; [BUGGY] case '\\': out.write('\\'); out.write('\\'); break; default : out.write(ch); break; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '"': out.write('\\'); out.write('"'); [BUGGY] [BUGGY] break; case '\\': out.write('\\'); out.write('\\'); break; default : out.write(ch); break; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	231	231	1	add	
17	[BUG] [BUGGY] if (str == null) { [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { [BUGGY] if (str == null) { [BUGGY] return null; } try { StringWriter writer = new StringWriter(str.length() * 2); escapeJavaStyleString(writer, str, escapeSingleQuotes); return writer.toString(); } catch (IOException ioe) {  ioe.printStackTrace(); return null; [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	149	149	1	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { [BUGGY] [BUGGY] if (str == null) { return null; } try { StringWriter writer = new StringWriter(str.length() * 2); escapeJavaStyleString(writer, str, escapeSingleQuotes); return writer.toString(); } catch (IOException ioe) {  ioe.printStackTrace(); return null; [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	149	149	1	add	
19	[BUG] [BUGGY] StringWriter writer = new StringWriter(str.length() * 2); [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { if (str == null) { return null; } try { [BUGGY] StringWriter writer = new StringWriter(str.length() * 2); [BUGGY] escapeJavaStyleString(writer, str, escapeSingleQuotes); return writer.toString(); } catch (IOException ioe) {  ioe.printStackTrace(); return null; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	153	153	1	replace	
20	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { if (str == null) { return null; } try { [BUGGY] [BUGGY] StringWriter writer = new StringWriter(str.length() * 2); escapeJavaStyleString(writer, str, escapeSingleQuotes); return writer.toString(); } catch (IOException ioe) {  ioe.printStackTrace(); return null; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	153	153	1	add	
21	[BUG] [BUGGY] escapeJavaStyleString(writer, str, escapeSingleQuotes); [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { if (str == null) { return null; } try { StringWriter writer = new StringWriter(str.length() * 2); [BUGGY] escapeJavaStyleString(writer, str, escapeSingleQuotes); [BUGGY] return writer.toString(); } catch (IOException ioe) {  ioe.printStackTrace(); return null; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	154	154	1	replace	
22	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { if (str == null) { return null; } try { StringWriter writer = new StringWriter(str.length() * 2); [BUGGY] [BUGGY] escapeJavaStyleString(writer, str, escapeSingleQuotes); return writer.toString(); } catch (IOException ioe) {  ioe.printStackTrace(); return null; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	154	154	1	add	
23	[BUG] [BUGGY] return writer.toString(); [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { if (str == null) { return null; } try { StringWriter writer = new StringWriter(str.length() * 2); escapeJavaStyleString(writer, str, escapeSingleQuotes); [BUGGY] return writer.toString(); [BUGGY] } catch (IOException ioe) {  ioe.printStackTrace(); return null; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	155	155	1	replace	
24	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { if (str == null) { return null; } try { StringWriter writer = new StringWriter(str.length() * 2); escapeJavaStyleString(writer, str, escapeSingleQuotes); [BUGGY] [BUGGY] return writer.toString(); } catch (IOException ioe) {  ioe.printStackTrace(); return null; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] String  String str boolean escapeSingleQuotes [VARIABLES] boolean escapeSingleQuotes StringWriter writer String str IOException ioe  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	155	155	1	add	
25	[BUG] [BUGGY] if (out == null) { [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { [BUGGY] if (out == null) { [BUGGY] throw new IllegalArgumentException("The Writer must not be null"); } if (str == null) { return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	replace	
26	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { [BUGGY] [BUGGY] if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (str == null) { return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	172	172	1	add	
27	[BUG] [BUGGY] if (str == null) { [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } [BUGGY] if (str == null) { [BUGGY] return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	
28	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } [BUGGY] [BUGGY] if (str == null) { return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	add	
29	[BUG] [BUGGY] sz = str.length(); [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (str == null) { return; } int sz; [BUGGY] sz = str.length(); [BUGGY] for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	
30	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (str == null) { return; } int sz; [BUGGY] [BUGGY] sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	add	
31	[BUG] [BUGGY] for (int i = 0; i < sz; i++) { [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (str == null) { return; } int sz; sz = str.length(); [BUGGY] for (int i = 0; i < sz; i++) { [BUGGY] char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); } else if (ch < 32) { [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	replace	
32	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (str == null) { return; } int sz; sz = str.length(); [BUGGY] [BUGGY] for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); } else if (ch < 32) { [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	180	180	1	add	
33	[BUG] [BUGGY] char ch = str.charAt(i); [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (str == null) { return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { [BUGGY] char ch = str.charAt(i); [BUGGY]   if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); } else if (ch < 32) { switch (ch) { [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	replace	
34	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (str == null) { return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { [BUGGY] [BUGGY] char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); } else if (ch < 32) { switch (ch) { [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	181	181	1	add	
35	[BUG] [BUGGY] if (ch > 0xfff) { [FE] ComparisonFailure [CONTEXT] } if (str == null) { return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  [BUGGY] if (ch > 0xfff) { [BUGGY] out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); } else if (ch < 32) { switch (ch) { case '\b': out.write('\\'); out.write('b'); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	184	184	1	replace	
36	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } if (str == null) { return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  [BUGGY] [BUGGY] if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); } else if (ch < 32) { switch (ch) { case '\b': out.write('\\'); out.write('b'); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	184	184	1	add	
37	[BUG] [BUGGY] } else if (ch > 0xff) { [FE] ComparisonFailure [CONTEXT] return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); [BUGGY] } else if (ch > 0xff) { [BUGGY] out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); } else if (ch < 32) { switch (ch) { case '\b': out.write('\\'); out.write('b'); break; case '\n': [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	186	186	1	replace	
38	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] return; } int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); [BUGGY] [BUGGY] } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); } else if (ch < 32) { switch (ch) { case '\b': out.write('\\'); out.write('b'); break; case '\n': [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	186	186	1	add	
39	[BUG] [BUGGY] } else if (ch > 0x7f) { [FE] ComparisonFailure [CONTEXT] int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); [BUGGY] } else if (ch > 0x7f) { [BUGGY] out.write("\\u00" + hex(ch)); } else if (ch < 32) { switch (ch) { case '\b': out.write('\\'); out.write('b'); break; case '\n': out.write('\\'); out.write('n'); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	replace	
40	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); [BUGGY] [BUGGY] } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); } else if (ch < 32) { switch (ch) { case '\b': out.write('\\'); out.write('b'); break; case '\n': out.write('\\'); out.write('n'); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	188	188	1	add	
41	[BUG] [BUGGY] } else if (ch < 32) { [FE] ComparisonFailure [CONTEXT] for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); [BUGGY] } else if (ch < 32) { [BUGGY] switch (ch) { case '\b': out.write('\\'); out.write('b'); break; case '\n': out.write('\\'); out.write('n'); break; case '\t': [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	replace	
42	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] for (int i = 0; i < sz; i++) { char ch = str.charAt(i);  if (ch > 0xfff) { out.write("\\u" + hex(ch)); } else if (ch > 0xff) { out.write("\\u0" + hex(ch)); } else if (ch > 0x7f) { out.write("\\u00" + hex(ch)); [BUGGY] [BUGGY] } else if (ch < 32) { switch (ch) { case '\b': out.write('\\'); out.write('b'); break; case '\n': out.write('\\'); out.write('n'); break; case '\t': [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	190	190	1	add	
43	[BUG] [BUGGY] switch (ch) { [FE] ComparisonFailure [CONTEXT] break; default : if (ch > 0xf) { out.write("\\u00" + hex(ch)); } else { out.write("\\u000" + hex(ch)); } break; } } else { [BUGGY] switch (ch) { [BUGGY] case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '"': out.write('\\'); out.write('"'); break; [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	replace	
44	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] break; default : if (ch > 0xf) { out.write("\\u00" + hex(ch)); } else { out.write("\\u000" + hex(ch)); } break; } } else { [BUGGY] [BUGGY] switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '"': out.write('\\'); out.write('"'); break; [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	221	221	1	add	
45	[BUG] [BUGGY] if (escapeSingleQuote) { [FE] ComparisonFailure [CONTEXT] if (ch > 0xf) { out.write("\\u00" + hex(ch)); } else { out.write("\\u000" + hex(ch)); } break; } } else { switch (ch) { case '\'': [BUGGY] if (escapeSingleQuote) { [BUGGY] out.write('\\'); } out.write('\''); break; case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	replace	
46	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (ch > 0xf) { out.write("\\u00" + hex(ch)); } else { out.write("\\u000" + hex(ch)); } break; } } else { switch (ch) { case '\'': [BUGGY] [BUGGY] if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	223	223	1	add	
47	[BUG] [BUGGY] out.write('\''); [FE] ComparisonFailure [CONTEXT] out.write("\\u000" + hex(ch)); } break; } } else { switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } [BUGGY] out.write('\''); [BUGGY] break; case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); break; default : [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	replace	
48	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] out.write("\\u000" + hex(ch)); } break; } } else { switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } [BUGGY] [BUGGY] out.write('\''); break; case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); break; default : [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	226	226	1	add	
49	[BUG] [BUGGY] break; [FE] ComparisonFailure [CONTEXT] } break; } } else { switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); [BUGGY] break; [BUGGY] case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); break; default : out.write(ch); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	replace	
50	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } break; } } else { switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); [BUGGY] [BUGGY] break; case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); break; default : out.write(ch); [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	227	227	1	add	
51	[BUG] [BUGGY] out.write(ch); [FE] ComparisonFailure [CONTEXT] break; case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); break; default : [BUGGY] out.write(ch); [BUGGY] break; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	237	237	1	replace	
52	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] break; case '"': out.write('\\'); out.write('"'); break; case '\\': out.write('\\'); out.write('\\'); break; default : [BUGGY] [BUGGY] out.write(ch); break; } } [CLASS] StringEscapeUtils [METHOD] escapeJavaStyleString [RETURN_TYPE] void  Writer out String str boolean escapeSingleQuote [VARIABLES] boolean escapeSingleQuote char ch String str Writer out int i sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	237	237	1	add	
