bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  str,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  str,  escapeSingleQuote);	  OutputStream    str    =    out.readLine(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
2	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  string,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  string,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  string,  escapeSingleQuote);	  OutputStream    str    =    out.readLine(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
3	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  escapeSingleQuote,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  escapeSingleQuote,  str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  escapeSingleQuote,  str);	  OutputStream    str    =    out.readLine(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
4	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  escapeSingleQuote,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  escapeSingleQuote,  str.length());  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  escapeSingleQuote,  str.length());	  OutputStream    str    =    out.readLine(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
5	[BUG]  [BUGGY]  String  str  =(String)out.readLine(),  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)out.readLine(),  str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)out.readLine(),  str);	  String    str    =(String)out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
6	[BUG]  [BUGGY]  String  str  =(String)out.readLine()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)out.readLine()  +  1;  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)out.readLine()  +  1;	  String    str    =(String)out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
7	[BUG]  [BUGGY]  String  str  =(String)out.readLine(),  out.toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)out.readLine(),  out.toCharArray();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)out.readLine(),  out.toCharArray();	  String    str    =(String)out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
8	[BUG]  [BUGGY]  String  str  =  escapeJavaStyleString(out,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeJavaStyleString(out,  str,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeJavaStyleString(out,  str,  escapeSingleQuote);	  String    str    =    escapeJavaStyleString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
9	[BUG]  [BUGGY]  String  str  =  escapeJavaStyleString(out,  str.toCharArray());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeJavaStyleString(out,  str.toCharArray());  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeJavaStyleString(out,  str.toCharArray());	  String    str    =    escapeJavaStyleString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
10	[BUG]  [BUGGY]  String  str  =  escapeJavaStyleString(out,  str.length(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeJavaStyleString(out,  str.length(),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeJavaStyleString(out,  str.length(),  escapeSingleQuote);	  String    str    =    escapeJavaStyleString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
11	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(str,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(str,  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(str,  out);	  String    str    =    escapeSingleQuote(out,    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
12	[BUG]  [BUGGY]  out.write('u000'  +  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write('u000'  +  hex(ch)+  1);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write('u000'  +  hex(ch)+  1);	  out.write('u000'    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
13	[BUG]  [BUGGY]  out.write('u000'  +  str.charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write('u000'  +  str.charAt(ch));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write('u000'  +  str.charAt(ch));	  out.write('u000'    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
14	[BUG]  [BUGGY]  out.write('u000'  +  hex(ch),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write('u000'  +  hex(ch),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write('u000'  +  hex(ch),  escapeSingleQuote);	  out.write('u000'    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
15	[BUG]  [BUGGY]  Integer  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Integer  sz  =  str.length();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	Integer  sz  =  str.length();	  int    sz    =    str.length()    -    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
16	[BUG]  [BUGGY]  char  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	char  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote);	  String    str    =    escapeSingleQuote(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
17	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(str,  escapeSingleQuote,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(str,  escapeSingleQuote,  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(str,  escapeSingleQuote,  out);	  String    str    =    escapeSingleQuote(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
18	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(str,  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(str,  ch,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(str,  ch,  escapeSingleQuote);	  String    str    =    escapeSingleQuote(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
19	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  0,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  0,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  0,  escapeSingleQuote);	  String    str    =    escapeSingleQuote(out,    str,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
20	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  0,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  0,  sz);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  0,  sz);	  String    str    =    escapeSingleQuote(out,    str,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
21	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  0,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  0,  str.length());  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  0,  str.length());	  String    str    =    escapeSingleQuote(out,    str,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
22	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  0,  out.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  0,  out.length);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  0,  out.length);	  String    str    =    escapeSingleQuote(out,    str,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
23	[BUG]  [BUGGY]  out.write( "u "  +  str.charAt(0));  }  else  {  out.write( "u "  +  hex(ch));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u "  +  str.charAt(0));  }  else  {  out.write( "u "  +  hex(ch));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u "  +  str.charAt(0));  }  else  {  out.write( "u "  +  hex(ch));  }	  if(escapeSingleQuote)    {    out.write(   "u   "    +    str.charAt(0));    }    else    {    out.write(   "u   "    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
24	[BUG]  [BUGGY]  out.write( "u00 "  +  str.charAt(0));  }  else  {  out.write( "u00 "  +  hex(ch));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u00 "  +  str.charAt(0));  }  else  {  out.write( "u00 "  +  hex(ch));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u00 "  +  str.charAt(0));  }  else  {  out.write( "u00 "  +  hex(ch));  }	  if(escapeSingleQuote)    {    out.write(   "u   "    +    str.charAt(0));    }    else    {    out.write(   "u   "    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
25	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  '-')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  '-')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  '-')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    '-')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
26	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  '-')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  '-')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  '-')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    '-')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
27	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)  ==  '-')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)  ==  '-')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)  ==  '-')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    '-')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
28	[BUG]  [BUGGY]  String  str  =(out!=  null)?  null  :  out.getKey();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(out!=  null)?  null  :  out.getKey();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(out!=  null)?  null  :  out.getKey();	  String    str    =(out!=    null)?    null    :    out.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
29	[BUG]  [BUGGY]  String  str  =(str  ==  null)?  null  :  out.getValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(str  ==  null)?  null  :  out.getValue();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(str  ==  null)?  null  :  out.getValue();	  String    str    =(out!=    null)?    null    :    out.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
30	[BUG]  [BUGGY]  if(escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote  ==  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
31	[BUG]  [BUGGY]  if(escapeSingleQuote  ==  null  ||  out.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote  ==  null  ||  out.length()!=  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote  ==  null  ||  out.length()!=  0)  {	  if(out    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
32	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote.length()  ==  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  escapeSingleQuote.length()  ==  0)  {	  if(escapeSingleQuote    ==    null    ||    str.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
33	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ==  null  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ==  null  ||  str.length()  ==  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  escapeSingleQuote  ==  null  ||  str.length()  ==  0)  {	  if(escapeSingleQuote    ==    null    ||    str.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
34	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  >=  0)  {	  if(str    ==    null    ||    str.length()!=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
35	[BUG]  [BUGGY]  if(str!=  null  ||  str.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str!=  null  ||  str.length()!=  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str!=  null  ||  str.length()!=  0)  {	  if(str    ==    null    ||    str.length()!=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
36	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine()  ||  escapeSingleQuote;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine()  ||  escapeSingleQuote;  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine()  ||  escapeSingleQuote;	  OutputStream    str    =    out.readLine()    &&    escapeSingleQuote;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
37	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine()  &&  escapeSingleQuote  ||  out.charAt(str.length()  -  1)!=  '/');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine()  &&  escapeSingleQuote  ||  out.charAt(str.length()  -  1)!=  '/');  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine()  &&  escapeSingleQuote  ||  out.charAt(str.length()  -  1)!=  '/');	  OutputStream    str    =    out.readLine()    &&    escapeSingleQuote;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
38	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine()  &&  escapeSingleQuote  ||  out.charAt(str.length()  -  1)!=  'n';  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine()  &&  escapeSingleQuote  ||  out.charAt(str.length()  -  1)!=  'n';  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine()  &&  escapeSingleQuote  ||  out.charAt(str.length()  -  1)!=  'n';	  OutputStream    str    =    out.readLine()    &&    escapeSingleQuote;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
39	[BUG]  [BUGGY]  String  str  =  out.toCharArray(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  out.toCharArray(),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  out.toCharArray(),  escapeSingleQuote);	  String    str    =    out.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
40	[BUG]  [BUGGY]  String  str  =  str.toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  str.toCharArray();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  str.toCharArray();	  String    str    =    out.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
41	[BUG]  [BUGGY]  String  str  =(out  ==  null)?  null  :  out.getKey();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(out  ==  null)?  null  :  out.getKey();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(out  ==  null)?  null  :  out.getKey();	  String    str    =(out    ==    null)?    null    :    out.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
42	[BUG]  [BUGGY]  String  str  =(out  ==  null)?  null  :  out.getText();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(out  ==  null)?  null  :  out.getText();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(out  ==  null)?  null  :  out.getText();	  String    str    =(out    ==    null)?    null    :    out.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
43	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.length()  ==  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  str.length()  ==  0)  {	  if(str    ==    null    ||    escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
44	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.length()  ==  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  out.length()  ==  0)  {	  if(str    ==    null    ||    escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
45	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  str.length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  str.length()  ==  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  escapeSingleQuote  ||  str.length()  ==  0)  {	  if(str    ==    null    ||    escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
46	[BUG]  [BUGGY]  String  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  sz  =  str.length();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  sz  =  str.length();	  char    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
47	[BUG]  [BUGGY]  Character  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Character  sz  =  str.length();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	Character  sz  =  str.length();	  char    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
48	[BUG]  [BUGGY]  Char  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Char  sz  =  str.length();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	Char  sz  =  str.length();	  char    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
49	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  str.length()!=  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  str.length()!=  0)  {	  if(str    ==    null    ||    out.length()!=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
50	[BUG]  [BUGGY]  if(out  ==  null  ||  out.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  out.length()!=  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  out.length()!=  0)  {	  if(str    ==    null    ||    out.length()!=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
51	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write( "u   "  +  hex(ch));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write( "u   "  +  hex(ch));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write( "u   "  +  hex(ch));  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(   "u   "    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
52	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write( "u00 "  +  hex(ch));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write( "u00 "  +  hex(ch));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write( "u00 "  +  hex(ch));  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(   "u   "    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
53	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(out,  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(out,  str,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(out,  str,  escapeSingleQuote);	  String    str    =    escapeSingleQuote.toString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
54	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(out,  str,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(out,  str,  0);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(out,  str,  0);	  String    str    =    escapeSingleQuote.toString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
55	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(out,  str,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(out,  str,  false);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(out,  str,  false);	  String    str    =    escapeSingleQuote.toString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
56	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(out,  str,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(out,  str,  ch);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(out,  str,  ch);	  String    str    =    escapeSingleQuote.toString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
57	[BUG]  [BUGGY]  out.write('u'  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write('u'  +  hex(ch));  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write('u'  +  hex(ch));	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write('u'    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
58	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch));  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write('u'    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
59	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch),  escapeSingleQuote);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch),  escapeSingleQuote);  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch),  escapeSingleQuote);  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write('u'    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
60	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch)+  1);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch)+  1);  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch)+  1);  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write('u'    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
61	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
62	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)!=  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
63	[BUG]  [BUGGY]  if(str  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)!=  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)!=  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)!=  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
64	[BUG]  [BUGGY]  String  str  =(String)str.getKey();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)str.getKey();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)str.getKey();	  String    str    =(String)str.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
65	[BUG]  [BUGGY]  String  str  =(String)str.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)str.clone();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)str.clone();	  String    str    =(String)str.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
66	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()!=  0  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()!=  0  ||  escapeSingleQuote)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()!=  0  ||  escapeSingleQuote)  {	  if(str    ==    null    ||    str.length()    ==    0    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
67	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  >=  0  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  >=  0  ||  escapeSingleQuote)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  >=  0  ||  escapeSingleQuote)  {	  if(str    ==    null    ||    str.length()    ==    0    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
68	[BUG]  [BUGGY]  if(str!=  null  ||  str.length()  ==  0  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str!=  null  ||  str.length()  ==  0  ||  escapeSingleQuote)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str!=  null  ||  str.length()  ==  0  ||  escapeSingleQuote)  {	  if(str    ==    null    ||    str.length()    ==    0    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
69	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str.length(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str.length(),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str.length(),  escapeSingleQuote);	  String    str    =    escapeSingleQuote(out,    str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
70	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str.length()  -  1);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str.length()  -  1);	  String    str    =    escapeSingleQuote(out,    str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
71	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str.substring(0,  str.length()));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str.substring(0,  str.length()));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str.substring(0,  str.length()));	  String    str    =    escapeSingleQuote(out,    str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
72	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str.substring(0,  str.length()  -  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str.substring(0,  str.length()  -  1));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str.substring(0,  str.length()  -  1));	  String    str    =    escapeSingleQuote(out,    str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
73	[BUG]  [BUGGY]  out.write(ch  +  str.charAt(0),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(ch  +  str.charAt(0),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(ch  +  str.charAt(0),  escapeSingleQuote);	  out.write(ch    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
74	[BUG]  [BUGGY]  out.write(str.substring(0,  str.length()  -  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(str.substring(0,  str.length()  -  1));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(str.substring(0,  str.length()  -  1));	  out.write(ch    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
75	[BUG]  [BUGGY]  out.write(str,  ch  +  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(str,  ch  +  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(str,  ch  +  str.charAt(0));	  out.write(ch    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
76	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u00000 "  +  hex(ch));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u00000 "  +  hex(ch));	  out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
77	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u0000 "  +  hex(ch));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u0000 "  +  hex(ch));	  out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
78	[BUG]  [BUGGY]  out.write( "000 "  +  str.charAt(0),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "000 "  +  str.charAt(0),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "000 "  +  str.charAt(0),  escapeSingleQuote);	  out.write(   "u000   "    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
79	[BUG]  [BUGGY]  out.write( "u000 "  +  str.charAt(0),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u000 "  +  str.charAt(0),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u000 "  +  str.charAt(0),  escapeSingleQuote);	  out.write(   "u000   "    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
80	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  sz  =  str.lastIndexOf('.',  0);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	int  sz  =  str.lastIndexOf('.',  0);	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
81	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  16);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  sz  =  str.lastIndexOf('.',  16);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	int  sz  =  str.lastIndexOf('.',  16);	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
82	[BUG]  [BUGGY]  char  sz  =  str.lastIndexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  sz  =  str.lastIndexOf('.');  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	char  sz  =  str.lastIndexOf('.');	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
83	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  sz  =  str.lastIndexOf('.',  1);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	int  sz  =  str.lastIndexOf('.',  1);	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
84	[BUG]  [BUGGY]  OutputStream  str  =  out.readFully(str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readFully(str,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readFully(str,  escapeSingleQuote);	  OutputStream    str    =    out.readFully(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
85	[BUG]  [BUGGY]  OutputStream  str  =  out.readFully(out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readFully(out,  str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readFully(out,  str);	  OutputStream    str    =    out.readFully(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
86	[BUG]  [BUGGY]  OutputStream  str  =  out.readFully(str),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readFully(str),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readFully(str),  escapeSingleQuote);	  OutputStream    str    =    out.readFully(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
87	[BUG]  [BUGGY]  OutputStream  str  =  out.readFully(str,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readFully(str,  false);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readFully(str,  false);	  OutputStream    str    =    out.readFully(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
88	[BUG]  [BUGGY]  String  str  =  out.toString(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  out.toString(),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  out.toString(),  escapeSingleQuote);	  String    str    =    escapeSingleQuote.toString(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
89	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(),  out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(),  out,  str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(),  out,  str);	  String    str    =    escapeSingleQuote.toString(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
90	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(),  out,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(),  out,  false);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(),  out,  false);	  String    str    =    escapeSingleQuote.toString(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
91	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(),  out,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(),  out,  str.length());  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(),  out,  str.length());	  String    str    =    escapeSingleQuote.toString(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
92	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(),  out,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(),  out,  false);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toCharArray(),  out,  false);	  String    str    =    escapeSingleQuote.toCharArray(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
93	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(),  out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(),  out,  str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toCharArray(),  out,  str);	  String    str    =    escapeSingleQuote.toCharArray(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
94	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(),  out,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(),  out,  null);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toCharArray(),  out,  null);	  String    str    =    escapeSingleQuote.toCharArray(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
95	[BUG]  [BUGGY]  String  str  =(String)str.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)str.toString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)str.toString();	  String    str    =(String)out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
96	[BUG]  [BUGGY]  String  str  =(out!=  null)?  null  :  out.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(out!=  null)?  null  :  out.toString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(out!=  null)?  null  :  out.toString();	  String    str    =(String)out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
97	[BUG]  [BUGGY]  String  str  =(String)out.toPlainString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)out.toPlainString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)out.toPlainString();	  String    str    =(String)out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
98	[BUG]  [BUGGY]  out.write(str.charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(str.charAt(i));  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(str.charAt(i));	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(str.charAt(i));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
99	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i));  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(str.charAt(i));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
100	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i),  escapeSingleQuote);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i),  escapeSingleQuote);  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i),  escapeSingleQuote);  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(str.charAt(i));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
101	[BUG]  [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i  +  1));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i  +  1));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	while(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i  +  1));  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(str.charAt(i));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
102	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(str);	  String    str    =    escapeSingleQuote.toString(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
103	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(str,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(str,  escapeSingleQuote);	  String    str    =    escapeSingleQuote.toString(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
104	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(str,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(str,  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(str,  out);	  String    str    =    escapeSingleQuote.toString(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
105	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  0);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  0);	  String    str    =    escapeSingleQuote(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
106	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  ch);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  ch);	  String    str    =    escapeSingleQuote(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
107	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  false);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  false);	  String    str    =    escapeSingleQuote(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
108	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  out.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  out.length());  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  out.length());	  String    str    =    escapeSingleQuote(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
109	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  str,  escapeSingleQuote;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  str,  escapeSingleQuote;  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  str,  escapeSingleQuote;	  OutputStream    str    =    out.readLine(),    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
110	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  this.str);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  this.str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  this.str);	  OutputStream    str    =    out.readLine(),    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
111	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)  ==  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)  ==  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)  ==  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)    ==    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
112	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(i)  ==  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(i)  ==  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(i)  ==  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)    ==    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
113	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)  ==  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)  ==  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  ==  0  ||  str.charAt(0)  ==  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)    ==    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
114	[BUG]  [BUGGY]  out.write( "u "  +  hex(ch));  }  else  {  out.write('u "  +  hex(ch));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u "  +  hex(ch));  }  else  {  out.write('u "  +  hex(ch));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u "  +  hex(ch));  }  else  {  out.write('u "  +  hex(ch));  }	  if(escapeSingleQuote)    {    out.write(   "u   "    +    hex(ch));    }    else    {    out.write('u   "    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
115	[BUG]  [BUGGY]  out.write( "u   "  +  hex(ch));  }  else  {  out.write('u'  +  hex(ch));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u   "  +  hex(ch));  }  else  {  out.write('u'  +  hex(ch));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u   "  +  hex(ch));  }  else  {  out.write('u'  +  hex(ch));  }	  if(escapeSingleQuote)    {    out.write(   "u   "    +    hex(ch));    }    else    {    out.write('u   "    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
116	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  str.charAt(0);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  str.charAt(0);	  OutputStream    str    =    out.readLine(),    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
117	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  escapeSingleQuote;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  escapeSingleQuote;  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  escapeSingleQuote;	  OutputStream    str    =    out.readLine(),    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
118	[BUG]  [BUGGY]  While(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  While(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	While(escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
119	[BUG]  [BUGGY]  safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	safeEscapeSingleQuote())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
120	[BUG]  [BUGGY]  safely())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  safely())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	safely())  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
121	[BUG]  [BUGGY]  String  str  =(String)out.getAsString();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)out.getAsString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)out.getAsString();	  String    str    =(String)out.getKey();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
122	[BUG]  [BUGGY]  out.write( "u00 "  +  str.charAt(0),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u00 "  +  str.charAt(0),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u00 "  +  str.charAt(0),  escapeSingleQuote);	  out.write(   "u00   "    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
123	[BUG]  [BUGGY]  out.write(str.charAt(0),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(str.charAt(0),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(str.charAt(0),  escapeSingleQuote);	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
124	[BUG]  [BUGGY]  out.write(str.charAt(0),  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(str.charAt(0),  str.length());  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(str.charAt(0),  str.length());	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
125	[BUG]  [BUGGY]  int  sz  =  out.length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  sz  =  out.length()  +  1;  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	int  sz  =  out.length()  +  1;	  int    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
126	[BUG]  [BUGGY]  int  sz  =  out.length()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  sz  =  out.length()  -  1;  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	int  sz  =  out.length()  -  1;	  int    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
127	[BUG]  [BUGGY]  char  sz  =  out.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  sz  =  out.length();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	char  sz  =  out.length();	  int    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
128	[BUG]  [BUGGY]  OutputStream  str  =  this.out.readLine(),  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  this.out.readLine(),  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  this.out.readLine(),  out);	  OutputStream    str    =    this.out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
129	[BUG]  [BUGGY]  OutputStream  str  =  this.out.readFully(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  this.out.readFully(str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  this.out.readFully(str);	  OutputStream    str    =    this.out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
130	[BUG]  [BUGGY]  Character  str  =  escapeSingleQuote.toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Character  str  =  escapeSingleQuote.toCharArray();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	Character  str  =  escapeSingleQuote.toCharArray();	  char    str    =    escapeSingleQuote.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
131	[BUG]  [BUGGY]  char  str  =  escapeSingleQuote(out);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  str  =  escapeSingleQuote(out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	char  str  =  escapeSingleQuote(out);	  String    str    =    escapeSingleQuote(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
132	[BUG]  [BUGGY]  CharSequence  str  =  escapeSingleQuote(out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  CharSequence  str  =  escapeSingleQuote(out,  str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	CharSequence  str  =  escapeSingleQuote(out,  str);	  char    str    =    escapeSingleQuote(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
133	[BUG]  [BUGGY]  Character  str  =  escapeSingleQuote(out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Character  str  =  escapeSingleQuote(out,  str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	Character  str  =  escapeSingleQuote(out,  str);	  char    str    =    escapeSingleQuote(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
134	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleValue,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleValue,  0);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  escapeSingleValue,  0);	  String    str    =    escapeSingleQuote(out,    str,    escapeSingleValue);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
135	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleValue,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleValue,  ch);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  escapeSingleValue,  ch);	  String    str    =    escapeSingleQuote(out,    str,    escapeSingleValue);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
136	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleValue,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleValue,  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  escapeSingleValue,  out);	  String    str    =    escapeSingleQuote(out,    str,    escapeSingleValue);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
137	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  true);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  true);	  String    str    =    escapeSingleQuote(out,    str,    escapeSingLEQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
138	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  str.isEmpty())  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  str.isEmpty())  {	  if(str    ==    null    ||    escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
139	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  str.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  str.isEmpty())  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  escapeSingleQuote  ||  str.isEmpty())  {	  if(str    ==    null    ||    escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
140	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote  ||  out.isEmpty())  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote  ||  out.isEmpty())  {	  if(str    ==    null    ||    escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
141	[BUG]  [BUGGY]  OutputStream  str  =  getStyle().readLine(),  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  getStyle().readLine(),  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  getStyle().readLine(),  out);	  OutputStream    str    =    getStyle().readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
142	[BUG]  [BUGGY]  OutputStream  str  =  getStyle().readFully(out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  getStyle().readFully(out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  getStyle().readFully(out);	  OutputStream    str    =    getStyle().readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
143	[BUG]  [BUGGY]  OutputStream  str  =  getStyle().readString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  getStyle().readString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  getStyle().readString();	  OutputStream    str    =    getStyle().readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
144	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(out,  str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toCharArray(out,  str);	  String    str    =    escapeSingleQuote.toCharArray(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
145	[BUG]  [BUGGY]  String  str  =  out.toCharArray(escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  out.toCharArray(escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  out.toCharArray(escapeSingleQuote);	  String    str    =    escapeSingleQuote.toCharArray(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
146	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toCharArray(str);	  String    str    =    escapeSingleQuote.toCharArray(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
147	[BUG]  [BUGGY]  String  str  =  str.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  str.toString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  str.toString();	  String    str    =    out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
148	[BUG]  [BUGGY]  String  str  =  out.toString()  + ";n ";  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  out.toString()  + ";n ";  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  out.toString()  + ";n ";	  String    str    =    out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
149	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)  ==  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)  ==  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)  ==  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)    ==    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
150	[BUG]  [BUGGY]  if(str  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)  ==  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)  ==  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)  ==  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)    ==    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
151	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch));  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write('u'    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
152	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch)+  1);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch)+  1);  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write('u'  +  hex(ch)+  1);  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write('u'    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
153	[BUG]  [BUGGY]  out.write( "000 "  +  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "000 "  +  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "000 "  +  str.charAt(0));	  out.write(   "u000   "    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
154	[BUG]  [BUGGY]  out.write( "u00000 "  +  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u00000 "  +  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u00000 "  +  str.charAt(0));	  out.write(   "u000   "    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
155	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine()  &&  escapeSingleQuote  ||  out.charAt(str.length()  -  1)  ==  'n';  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine()  &&  escapeSingleQuote  ||  out.charAt(str.length()  -  1)  ==  'n';  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine()  &&  escapeSingleQuote  ||  out.charAt(str.length()  -  1)  ==  'n';	  OutputStream    str    =    out.readLine()    &&    escapeSingleQuote;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
156	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)!=  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)!=  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)!=  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
157	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(i)!=  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(i)!=  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(i)!=  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
158	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  escapeSingleQuote,  out);	  String    str    =    escapeSingleQuote(out,    str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
159	[BUG]  [BUGGY]  String  str  =  out.toString(escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  out.toString(escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  out.toString(escapeSingleQuote);	  String    str    =    escapeSingleQuote.toString(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
160	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  escapeSingleQuote)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  str.length()  ==  0  ||  escapeSingleQuote)  {	  if(str    ==    null    ||    str.length()    ==    0    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
161	[BUG]  [BUGGY]  if(str  ==  null  ||  out.length()  ==  0  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  out.length()  ==  0  ||  escapeSingleQuote)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  out.length()  ==  0  ||  escapeSingleQuote)  {	  if(str    ==    null    ||    str.length()    ==    0    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
162	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  this.escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  this.escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  this.escapeSingleQuote);	  OutputStream    str    =    out.readLine(),    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
163	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote?  out.toCharArray()  :  str;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote?  out.toCharArray()  :  str;  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote?  out.toCharArray()  :  str;	  String    str    =    out.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
164	[BUG]  [BUGGY]  String  str  =(out!=  null)?  null  :  out.getText();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(out!=  null)?  null  :  out.getText();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(out!=  null)?  null  :  out.getText();	  String    str    =(out!=    null)?    null    :    out.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
165	[BUG]  [BUGGY]  OutputStream  str  =  getStyle().escapeJavaStyleString(out);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  getStyle().escapeJavaStyleString(out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  getStyle().escapeJavaStyleString(out);	  OutputStream    str    =    getStyle().readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
166	[BUG]  [BUGGY]  OutputStream  str  =  getStyle().readLine(out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  getStyle().readLine(out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  getStyle().readLine(out);	  OutputStream    str    =    getStyle().readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
167	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote?  out.toString()  :  str;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote?  out.toString()  :  str;  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote?  out.toString()  :  str;	  String    str    =    out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
168	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote?  null  :  out.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote?  null  :  out.toString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote?  null  :  out.toString();	  String    str    =    out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
169	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  ch,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  ch,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  ch,  escapeSingleQuote);	  OutputStream    str    =    out.readLine(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
170	[BUG]  [BUGGY]  String  str  =  out.toString(str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  out.toString(str,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  out.toString(str,  escapeSingleQuote);	  String    str    =    escapeSingleQuote.toString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
171	[BUG]  [BUGGY]  if(out  ==  null  ||  out.length()  >=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  out.length()  >=  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  out.length()  >=  0)  {	  if(out    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
172	[BUG]  [BUGGY]  String  str  =(String)str.toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)str.toCharArray();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)str.toCharArray();	  String    str    =(String)str.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
173	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  out.length()!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ||  out.length()!=  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  escapeSingleQuote  ||  out.length()!=  0)  {	  if(str    ==    null    ||    escapeSingleQuote    ||    out.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
174	[BUG]  [BUGGY]  out.write(ch  +  str.charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(ch  +  str.charAt(i));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(ch  +  str.charAt(i));	  out.write(ch    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
175	[BUG]  [BUGGY]  out.write(str  +  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(str  +  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(str  +  str.charAt(0));	  out.write(ch    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
176	[BUG]  [BUGGY]  out.write('n'  +  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write('n'  +  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write('n'  +  str.charAt(0));	  out.write(ch    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
177	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(str,  out,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(str,  out,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(str,  out,  escapeSingleQuote);	  String    str    =    escapeSingleQuote(str,    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
178	[BUG]  [BUGGY]  OutputStream  str  =  out.readFully(escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readFully(escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readFully(escapeSingleQuote);	  OutputStream    str    =    out.readFully(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
179	[BUG]  [BUGGY]  OutputStream  str  =  out.readFully(ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readFully(ch);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readFully(ch);	  OutputStream    str    =    out.readFully(str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
180	[BUG]  [BUGGY]  String  str  =(out  ==  null)?  null  :  out.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(out  ==  null)?  null  :  out.toString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(out  ==  null)?  null  :  out.toString();	  String    str    =(String)out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
181	[BUG]  [BUGGY]  String  str  =(out  ==  null)?  null  :  out.readLine();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(out  ==  null)?  null  :  out.readLine();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(out  ==  null)?  null  :  out.readLine();	  String    str    =(String)out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
182	[BUG]  [BUGGY]  String  str  =(String)out.readLine(),  out.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)out.readLine(),  out.charAt(0);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)out.readLine(),  out.charAt(0);	  String    str    =(String)out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
183	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i),  escapeSingleQuote);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i),  escapeSingleQuote);  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i),  escapeSingleQuote);  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(str.charAt(i));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
184	[BUG]  [BUGGY]  out.write( "u "  +  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u "  +  escapeSingleQuote);  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u "  +  escapeSingleQuote);	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(str.charAt(i));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
185	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i  +  1));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i  +  1));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(i  +  1));  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(str.charAt(i));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
186	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  -1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  sz  =  str.lastIndexOf('.',  -1);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	int  sz  =  str.lastIndexOf('.',  -1);	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
187	[BUG]  [BUGGY]  int  sz  =  str.indexOf('.',  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  sz  =  str.indexOf('.',  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	int  sz  =  str.indexOf('.',  out);	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
188	[BUG]  [BUGGY]  char  str  =  escapeSingleQuote.toCharArray(out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  str  =  escapeSingleQuote.toCharArray(out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	char  str  =  escapeSingleQuote.toCharArray(out);	  char    str    =    escapeSingleQuote.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
189	[BUG]  [BUGGY]  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  sz  =  str.length();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	sz  =  str.length();	  int    sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
190	[BUG]  [BUGGY]  String  str  =  escapeJavaStyleString(out,  str,  escapeSINGleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeJavaStyleString(out,  str,  escapeSINGleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeJavaStyleString(out,  str,  escapeSINGleQuote);	  String    str    =    escapeJavaStyleString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
191	[BUG]  [BUGGY]  out.write( "u00 "  +  str.charAt(1));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u00 "  +  str.charAt(1));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u00 "  +  str.charAt(1));	  out.write(   "u00   "    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
192	[BUG]  [BUGGY]  out.write(str.charAt(0),  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(str.charAt(0),  ch);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(str.charAt(0),  ch);	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
193	[BUG]  [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  escapeSingleQuote  ||  out.isEmpty())  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  escapeSingleQuote  ||  out.isEmpty())  {	  if(str    ==    null    ||    escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
194	[BUG]  [BUGGY]  if(str  ==  null  ||  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  out.isEmpty())  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  out.isEmpty())  {	  if(str    ==    null    ||    escapeSingleQuote    ||    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
195	[BUG]  [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)!=  '-')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)!=  '-')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)!=  '-')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    '-')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
196	[BUG]  [BUGGY]  if(str  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)!=  '-')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)!=  '-')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)!=  '-')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    '-')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
197	[BUG]  [BUGGY]  if(out  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)!=  '-')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)!=  '-')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(out  ==  null  ||  out.length()  ==  0  ||  str.charAt(0)!=  '-')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    '-')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
198	[BUG]  [BUGGY]  if(escapeSingleQuote  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote  ==  null)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote  ==  null)  {	  if(out    ==    null    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
199	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(out,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(out,  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toCharArray(out,  out);	  String    str    =    escapeSingleQuote.toCharArray(out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
200	[BUG]  [BUGGY]  escapeSingleQuote(out,  str)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  escapeSingleQuote(out,  str)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	escapeSingleQuote(out,  str)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
201	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(),  out,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(),  out,  null);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(),  out,  null);	  String    str    =    escapeSingleQuote.toString(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
202	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str.charAt(0));	  String    str    =    escapeSingleQuote(out,    str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
203	[BUG]  [BUGGY]  OutputStream  out  =  escapeSingleQuote(out,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  out  =  escapeSingleQuote(out,  str);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  out  =  escapeSingleQuote(out,  str);	  String    str    =    escapeSingleQuote(out,    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
204	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ==  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  escapeSingleQuote  ==  null)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  escapeSingleQuote  ==  null)  {	  if(escapeSingleQuote    ==    null    ||    str.length()    ==    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
205	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()!=  0  ||  out.charAt(0)  ==  'n')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()!=  0  ||  out.charAt(0)  ==  'n')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()!=  0  ||  out.charAt(0)  ==  'n')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
206	[BUG]  [BUGGY]  String  str  =  escapeJavaStyleString(out,  str.substring(0,  str.length()  -  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeJavaStyleString(out,  str.substring(0,  str.length()  -  1));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeJavaStyleString(out,  str.substring(0,  str.length()  -  1));	  String    str    =    escapeJavaStyleString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
207	[BUG]  [BUGGY]  String  str  =  escapeJavaStyleString(out,  str.substring(str.length()  -  1,  str.length()));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeJavaStyleString(out,  str.substring(str.length()  -  1,  str.length()));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeJavaStyleString(out,  str.substring(str.length()  -  1,  str.length()));	  String    str    =    escapeJavaStyleString(out,    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
208	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)  ==  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)  ==  '/')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  ==  0  ||  out.charAt(0)  ==  '/')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)    ==    'n')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
209	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()!=  0  ||  out.charAt(0)  ==  '-')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()!=  0  ||  out.charAt(0)  ==  '-')  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()!=  0  ||  out.charAt(0)  ==  '-')  {	  if(str    ==    null    ||    str.length()    ==    0    ||    out.charAt(0)!=    '-')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
210	[BUG]  [BUGGY]  CharSequence  str  =  escapeSingleQuote.toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  CharSequence  str  =  escapeSingleQuote.toCharArray();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	CharSequence  str  =  escapeSingleQuote.toCharArray();	  char    str    =    escapeSingleQuote.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
211	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote? " "  :  out.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote? " "  :  out.toString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote? " "  :  out.toString();	  String    str    =    out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
212	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  str.length()  ==  0  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote  ||  str.length()  ==  0  ||  escapeSingleQuote)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote  ||  str.length()  ==  0  ||  escapeSingleQuote)  {	  if(str    ==    null    ||    str.length()    ==    0    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
213	[BUG]  [BUGGY]  OutputStream  str  =  this.out.getLine();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  this.out.getLine();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  this.out.getLine();	  OutputStream    str    =    this.out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
214	[BUG]  [BUGGY]  String  str  =(String)out.toPath();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)out.toPath();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)out.toPath();	  String    str    =(String)out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
215	[BUG]  [BUGGY]  String  str  =(out.toString()  ==  null)?  null  :  out.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(out.toString()  ==  null)?  null  :  out.toString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(out.toString()  ==  null)?  null  :  out.toString();	  String    str    =(String)out.toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
216	[BUG]  [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.substring(0,  i):  str.substring(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.substring(0,  i):  str.substring(i);  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  escapeSingleQuote  =  escapeSingleQuote?  str.substring(0,  i):  str.substring(i);	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write('u'    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
217	[BUG]  [BUGGY]  out.write(''+  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(''+  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write(''+  str.charAt(0));	  out.write(ch    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
218	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(0));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(0));  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote)  {  for(int  i  =  0;  i  <  str.length();  i++)  {  out.write(str.charAt(0));  }	  if(escapeSingleQuote)    {    for(int    i    =    0;    i    <    str.length();    i++)    {    out.write(str.charAt(i));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
219	[BUG]  [BUGGY]  out.write( "u0 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u0 "  +  hex(ch));  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u0 "  +  hex(ch));	  if(escapeSingleQuote)    {    out.write(   "u   "    +    hex(ch));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
220	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(),  out,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toCharArray(),  out,  str.length());  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toCharArray(),  out,  str.length());	  String    str    =    escapeSingleQuote.toCharArray(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
221	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  str.length();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  str.length();	  OutputStream    str    =    out.readLine(),    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
222	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote(out,  str,  false);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote(out,  str,  false);	  String    str    =    escapeSingleQuote(out,    str,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
223	[BUG]  [BUGGY]  OutputStream  str  =  getStyle().getOutputFile();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  getStyle().getOutputFile();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  getStyle().getOutputFile();	  OutputStream    str    =    getStyle().readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
224	[BUG]  [BUGGY]  OutputStream  str  =  getStyle().escapeJavaStyleString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  getStyle().escapeJavaStyleString();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  getStyle().escapeJavaStyleString();	  OutputStream    str    =    getStyle().readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
225	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
226	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(escapeSingleQuote)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
227	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote.readLine(),  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  escapeSingleQuote.readLine(),  out);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  escapeSingleQuote.readLine(),  out);	  OutputStream    str    =    out.readLine(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
228	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine()  +  1,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine()  +  1,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine()  +  1,  escapeSingleQuote);	  OutputStream    str    =    out.readLine(),    escapeSingleQuote);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
229	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine(),  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine(),  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine(),  str.charAt(0));	  OutputStream    str    =    out.readLine(),    str);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
230	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote.toString(),  str,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote.toString(),  str,  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote.toString(),  str,  escapeSingleQuote);	  String    str    =    escapeSingleQuote.toString(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
231	[BUG]  [BUGGY]  String  str  =  str.toString(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  str.toString(),  escapeSingleQuote);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  str.toString(),  escapeSingleQuote);	  String    str    =    escapeSingleQuote.toString(),    out);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
232	[BUG]  [BUGGY]  String  str  =(String)out.read();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)out.read();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)out.read();	  String    str    =(String)out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
233	[BUG]  [BUGGY]  String  str  =(String)str.readLine();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =(String)str.readLine();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =(String)str.readLine();	  String    str    =(String)out.readLine();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
234	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  <  =  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(str  ==  null  ||  str.length()  <  =  0)  {  [BUGGY]      return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	if(str  ==  null  ||  str.length()  <  =  0)  {	  if(str    ==    null    ||    str.length()!=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
235	[BUG]  [BUGGY]  out.write( "u0000 "  +  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "u0000 "  +  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "u0000 "  +  str.charAt(0));	  out.write(   "u000   "    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
236	[BUG]  [BUGGY]  out.write( "n "  +  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "n "  +  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "n "  +  str.charAt(0));	  out.write(   "u000   "    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
237	[BUG]  [BUGGY]  String  str  =  escapeSingleQuote? " "  :  out.toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  str  =  escapeSingleQuote? " "  :  out.toCharArray();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	String  str  =  escapeSingleQuote? " "  :  out.toCharArray();	  String    str    =    out.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
238	[BUG]  [BUGGY]  OutputStream  str  =  escapeSingleQuote.readLine()  &&  out.readLine();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  escapeSingleQuote.readLine()  &&  out.readLine();  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  escapeSingleQuote.readLine()  &&  out.readLine();	  OutputStream    str    =    out.readLine()    &&    escapeSingleQuote;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
239	[BUG]  [BUGGY]  OutputStream  str  =  out.readLine()  &&  escapeSingleQuote,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  str  =  out.readLine()  &&  escapeSingleQuote,  0);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	OutputStream  str  =  out.readLine()  &&  escapeSingleQuote,  0);	  OutputStream    str    =    out.readLine()    &&    escapeSingleQuote;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
240	[BUG]  [BUGGY]  out.write( "UTF-8 "  +  str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "UTF-8 "  +  str.charAt(0));  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	out.write( "UTF-8 "  +  str.charAt(0));	  out.write(   "u00   "    +    str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
241	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  len);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  sz  =  str.lastIndexOf('.',  len);  [BUGGY]      if  (str  ==  null)  {  return;  }  int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	175	175	1	replace	int  sz  =  str.lastIndexOf('.',  len);	  int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
