bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write(' "');  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]  out.write(' "');  [BUGGY]  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write(' "');	out.write('\\');  	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  out.write('');  [CE]  [FE]      ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]  out.write('');  [BUGGY]  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write('');	out.write('\\');  	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  [CE]  [FE]        ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  [BUGGY]  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	if(escapeSingleQuote)  {  out.write('');  }	out.write('\\');  	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(' "');  }  [CE]  [FE]          ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(' "');  }  [BUGGY]  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(' "');  }	out.write('\\');  	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]    [CE]  [FE]            ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]    [BUGGY]  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	  	out.write('\\');  	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]    out.write(' "');  break;  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]    out.write(' "');  break;  [BUGGY]  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	    out.write(' "');  break;		non-compiled	[CE]  	12	None	add
7	[BUG]  [BUGGY]    char  ch  =  escapeSingleQuote.charAt(0);  [CE]  [FE]      ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]    char  ch  =  escapeSingleQuote.charAt(0);  [BUGGY]  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	    char  ch  =  escapeSingleQuote.charAt(0);		non-compiled	[CE]  	12	None	add
8	[BUG]  [BUGGY]    char  ch  =  escapeSingleQuote.charAt(ch);  [CE]  [FE]        ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]    char  ch  =  escapeSingleQuote.charAt(ch);  [BUGGY]  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	    char  ch  =  escapeSingleQuote.charAt(ch);		non-compiled	[CE]  	12	None	add
9	[BUG]  [BUGGY]    char  ch  =  escapeSingleQuote;  [CE]  [FE]          ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]    char  ch  =  escapeSingleQuote;  [BUGGY]  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	    char  ch  =  escapeSingleQuote;		non-compiled	[CE]  	12	None	add
10	[BUG]  [BUGGY]    out.write('');  out.write(' "');  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]    out.write('');  out.write(' "');  [BUGGY]  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	    out.write('');  out.write(' "');		non-compiled	[CE]  	12	None	add
11	[BUG]  [BUGGY]    out.write('');  break;  [CE]  [FE]      ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]    out.write('');  break;  [BUGGY]  out.write('\\');  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	    out.write('');  break;		non-compiled	[CE]  	12	None	add
12	[BUG]  [BUGGY]  out.write( " "');  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]  out.write( " "');  [BUGGY]  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write( " "');	out.write('\\');  	non-compiled	[CE]  	11	None	replace
13	[BUG]  [BUGGY]  out.write(''  +  ch);  [CE]  [FE]      ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]  out.write(''  +  ch);  [BUGGY]  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write(''  +  ch);	out.write('\\');  	non-compiled	[CE]  	11	None	replace
14	[BUG]  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  ' "':  [BUGGY]  if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }  [BUGGY]  out.write(' "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	if(escapeSingleQuote)  {  out.write('');  }  else  {  out.write(ch);  }	out.write('\\');  	non-compiled	[CE]  	11	None	replace
