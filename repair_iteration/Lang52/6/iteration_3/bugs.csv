bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Out.write(' "');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  Out.write(' "');  [BUGGY]      out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	Out.write(' "');	  Out.write('');    	non-compiled	[CE]  	28	None	replace
2	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(sz);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(sz);	  char    ch    =    str.charAt(ch);    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  char  ch  =  str.charAt(i);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(i);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(i);	  char    ch    =    str.charAt(ch);    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  ch);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(0,  ch);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(0,  ch);	  char    ch    =    str.charAt(ch);    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  char  ch  =  str.charAt(ch  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(ch  +  1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(ch  +  1);	  char    ch    =    escapeSingleQuote.charAt(ch    +    1);    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote.charAt(ch  +  2);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote.charAt(ch  +  2);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote.charAt(ch  +  2);	  char    ch    =    escapeSingleQuote.charAt(ch    +    1);    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote.charAt(ch  +  3);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote.charAt(ch  +  3);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote.charAt(ch  +  3);	  char    ch    =    escapeSingleQuote.charAt(ch    +    1);    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(0,  1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(0,  1);	  char    ch    =    str.charAt(0,    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
9	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  2);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(0,  2);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(0,  2);	  char    ch    =    str.charAt(0,    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
10	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  3);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(0,  3);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(0,  3);	  char    ch    =    str.charAt(0,    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
11	[BUG]  [BUGGY]  String  ch  =  escapeSingleQuote  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  escapeSingleQuote  +  1;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  escapeSingleQuote  +  1;	  String    ch    =    escapeSingleQuote;    	non-compiled	[CE]  	17	None	replace
12	[BUG]  [BUGGY]  String  ch  =  escapeSingleQuote.charAt(0);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  escapeSingleQuote.charAt(0);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  escapeSingleQuote.charAt(0);	  String    ch    =    escapeSingleQuote;    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  String  ch  =  escapeSingleQuote  + " " ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  escapeSingleQuote  + " " ";  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  escapeSingleQuote  + " " ";	  String    ch    =    escapeSingleQuote;    	non-compiled	[CE]  	17	None	replace
14	[BUG]  [BUGGY]  out.write('   "'  +  ch  +  2);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  out.write('   "'  +  ch  +  2);  [BUGGY]      out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write('   "'  +  ch  +  2);	  out.write('   "'    +    ch    +    1);    	non-compiled	[CE]  	23	None	replace
15	[BUG]  [BUGGY]  String  ch  =  escapeSingleQuote?  1  :  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  escapeSingleQuote?  1  :  0;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  escapeSingleQuote?  1  :  0;	  char    ch    =    escapeSingleQuote?    1    :    0;    	non-compiled	[CE]  	34	None	replace
16	[BUG]  [BUGGY]  Char  ch  =  escapeSingleQuote?  1  :  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  Char  ch  =  escapeSingleQuote?  1  :  0;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	Char  ch  =  escapeSingleQuote?  1  :  0;	  char    ch    =    escapeSingleQuote?    1    :    0;    	non-compiled	[CE]  	34	None	replace
17	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  sz);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(0,  sz);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(0,  sz);	  char    ch    =    str.charAt(0);    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote.charAt(ch  -  2);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote.charAt(ch  -  2);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote.charAt(ch  -  2);	  char    ch    =    escapeSingleQuote.charAt(ch    -    1);    	non-compiled	[CE]  	25	None	replace
19	[BUG]  [BUGGY]  char  ch  =  str.charAt(ch  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(ch  -  1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(ch  -  1);	  char    ch    =    escapeSingleQuote.charAt(ch    -    1);    	non-compiled	[CE]  	25	None	replace
20	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote.charAt(ch  -  3);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote.charAt(ch  -  3);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote.charAt(ch  -  3);	  char    ch    =    escapeSingleQuote.charAt(ch    -    1);    	non-compiled	[CE]  	25	None	replace
21	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote?  0  :  escapeSingleQuote  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote?  0  :  escapeSingleQuote  +  1;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote?  0  :  escapeSingleQuote  +  1;	  char    ch    =    escapeSingleQuote?    0    :    escapeSingleQuote;    	non-compiled	[CE]  	33	None	replace
22	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote  +  3;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote  +  3;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote  +  3;	  char    ch    =    escapeSingleQuote    +    4;    	non-compiled	[CE]  	22	None	replace
23	[BUG]  [BUGGY]  out.write('');  out.write('   "');  }  else  {  break;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  out.write('');  out.write('   "');  }  else  {  break;  }  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write('');  out.write('   "');  }  else  {  break;  }	  if(escapeSingleQuote)    {    out.write('');    out.write('       "');    }    else    {    break;    }    	non-compiled	[CE]  	11	None	replace
24	[BUG]  [BUGGY]  char  ch  =  str.charAt(2);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(2);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(2);	  char    ch    =    str.charAt(1);    	non-compiled	[CE]  	26	None	replace
25	[BUG]  [BUGGY]  char  ch  =  this.escapeSingleQuote.charAt(ch  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  this.escapeSingleQuote.charAt(ch  +  1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  this.escapeSingleQuote.charAt(ch  +  1);	  char    ch    =    this.escapeSingleQuote.charAt(ch);    	non-compiled	[CE]  	24	None	replace
26	[BUG]  [BUGGY]  char  ch  =(this.escapeSingleQuote!=  null)?  this.escapeSingleQuote.charAt(0):  this.escapeSingleQuote.charAt(0);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =(this.escapeSingleQuote!=  null)?  this.escapeSingleQuote.charAt(0):  this.escapeSingleQuote.charAt(0);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =(this.escapeSingleQuote!=  null)?  this.escapeSingleQuote.charAt(0):  this.escapeSingleQuote.charAt(0);	  char    ch    =    this.escapeSingleQuote.charAt(0);    	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  char  ch  =  this.escapeSingleQuote.charAt(sz);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  this.escapeSingleQuote.charAt(sz);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  this.escapeSingleQuote.charAt(sz);	  char    ch    =    this.escapeSingleQuote.charAt(0);    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  char  ch  =(this.escapeSingleQuote!=  null)?  this.escapeSingleQuote.charAt(0):  this.escapeSingleQuote.charAt(1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =(this.escapeSingleQuote!=  null)?  this.escapeSingleQuote.charAt(0):  this.escapeSingleQuote.charAt(1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =(this.escapeSingleQuote!=  null)?  this.escapeSingleQuote.charAt(0):  this.escapeSingleQuote.charAt(1);	  char    ch    =    this.escapeSingleQuote.charAt(0);    	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  Out.write('   "');  break;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  Out.write('   "');  break;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	Out.write('   "');  break;	  if(escapeSingleQuote)    {    out.write('       "');    break;    }    	non-compiled	[CE]  	31	None	replace
30	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote.charAt(i);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote.charAt(i);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote.charAt(i);	  char    ch    =    escapeSingleQuote.charAt(sz);    	non-compiled	[CE]  	2	None	replace
31	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote.charAt(sz  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote.charAt(sz  +  1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote.charAt(sz  +  1);	  char    ch    =    escapeSingleQuote.charAt(sz);    	non-compiled	[CE]  	2	None	replace
32	[BUG]  [BUGGY]  out.write( " " ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  out.write( " " ");  [BUGGY]      out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write( " " ");	  out.write(   "u00   ");    	non-compiled	[CE]  	35	None	replace
33	[BUG]  [BUGGY]  out.write(''  +  ch  +  2);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  out.write(''  +  ch  +  2);  [BUGGY]      out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write(''  +  ch  +  2);	  out.write(''    +    ch    +    1);    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  out.write(''  +  ch  +  3);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  out.write(''  +  ch  +  3);  [BUGGY]      out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write(''  +  ch  +  3);	  out.write(''    +    ch    +    1);    	non-compiled	[CE]  	13	None	replace
35	[BUG]  [BUGGY]  char  ch  =  str.charAt(str.length()  -  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(str.length()  -  1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(str.length()  -  1);	  char    ch    =    str;    	non-compiled	[CE]  	21	None	replace
36	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  escapeSingleQuote  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  escapeSingleQuote  +  1;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote?  '''  :  escapeSingleQuote  +  1;	  char    ch    =    escapeSingleQuote?    '''    :    escapeSingleQuote;    	non-compiled	[CE]  	32	None	replace
37	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote  &&  escapeSingleQuote;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote  &&  escapeSingleQuote;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote  &&  escapeSingleQuote;	  char    ch    =    escapeSingleQuote    ||    escapeSingleQuote;    	non-compiled	[CE]  	16	None	replace
38	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote  ||  escapeSingleQuote  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote  ||  escapeSingleQuote  +  1;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote  ||  escapeSingleQuote  +  1;	  char    ch    =    escapeSingleQuote    ||    escapeSingleQuote;    	non-compiled	[CE]  	16	None	replace
39	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote  +  escapeSingleQuote;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote  +  escapeSingleQuote;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote  +  escapeSingleQuote;	  char    ch    =    escapeSingleQuote    ||    escapeSingleQuote;    	non-compiled	[CE]  	16	None	replace
40	[BUG]  [BUGGY]  String  ch  =  escapeSingleQuote  ||  escapeSingleQuote;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  escapeSingleQuote  ||  escapeSingleQuote;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  escapeSingleQuote  ||  escapeSingleQuote;	  char    ch    =    escapeSingleQuote    ||    escapeSingleQuote;    	non-compiled	[CE]  	16	None	replace
41	[BUG]  [BUGGY]  Out.write('');  out.write('   "');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  Out.write('');  out.write('   "');  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	Out.write('');  out.write('   "');	  if(escapeSingleQuote)    {    out.write('');    out.write('       "');    }    else    {    out.write(ch);    }    	non-compiled	[CE]  	30	None	replace
42	[BUG]  [BUGGY]  out.write('');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  out.write('');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write('');  out.write('   "');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(escapeSingleQuote)    {    out.write('');    out.write('       "');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  out.write('');  }  else  if(escapeSingleQuote)  {  out.write('   "');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  out.write('');  }  else  if(escapeSingleQuote)  {  out.write('   "');  }  [BUGGY]      out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write('');  }  else  if(escapeSingleQuote)  {  out.write('   "');  }	  out.write('');    }    else    {    out.write('       "');    }    	non-compiled	[CE]  	5	None	replace
44	[BUG]  [BUGGY]  char  ch  =  this.escapeSingleQuote.charAt(ch  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  this.escapeSingleQuote.charAt(ch  -  1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  this.escapeSingleQuote.charAt(ch  -  1);	  char    ch    =    this.escapeSingleQuote.charAt(ch);    	non-compiled	[CE]  	24	None	replace
45	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  escapeSingleQuote  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(0,  escapeSingleQuote  +  1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(0,  escapeSingleQuote  +  1);	  char    ch    =    str.charAt(0,    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
46	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  0;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote?  '''  :  0;	  char    ch    =    escapeSingleQuote?    '''    :    escapeSingleQuote;    	non-compiled	[CE]  	32	None	replace
47	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  ''';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  ''';  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote?  '''  :  ''';	  char    ch    =    escapeSingleQuote?    '''    :    escapeSingleQuote;    	non-compiled	[CE]  	32	None	replace
48	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  '';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  '';  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote?  '''  :  '';	  char    ch    =    escapeSingleQuote?    '''    :    escapeSingleQuote;    	non-compiled	[CE]  	32	None	replace
49	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote?  0  :  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote?  0  :  0;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote?  0  :  0;	  char    ch    =    escapeSingleQuote?    0    :    escapeSingleQuote;    	non-compiled	[CE]  	33	None	replace
50	[BUG]  [BUGGY]  char  ch  =  str.trim();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.trim();  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.trim();	  char    ch    =    str;    	non-compiled	[CE]  	21	None	replace
51	[BUG]  [BUGGY]  char  ch  =  string.charAt(sz);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  string.charAt(sz);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  string.charAt(sz);	  char    ch    =    escapeSingleQuote.charAt(sz);    	non-compiled	[CE]  	2	None	replace
52	[BUG]  [BUGGY]  Char  ch  =  escapeSingleQuote  &&  escapeSingleQuote;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  Char  ch  =  escapeSingleQuote  &&  escapeSingleQuote;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	Char  ch  =  escapeSingleQuote  &&  escapeSingleQuote;	  char    ch    =    escapeSingleQuote    ||    escapeSingleQuote;    	non-compiled	[CE]  	16	None	replace
53	[BUG]  [BUGGY]  out.write( "'00 ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  out.write( "'00 ");  [BUGGY]      out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write( "'00 ");	  out.write(   "u00   ");    	non-compiled	[CE]  	35	None	replace
54	[BUG]  [BUGGY]  String  ch  =  str.charAt(1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  str.charAt(1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  str.charAt(1);	  char    ch    =    str.charAt(1);    	non-compiled	[CE]  	26	None	replace
55	[BUG]  [BUGGY]  String  ch  =  str;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  str;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  str;	  String    ch    =    escapeSingleQuote;    	non-compiled	[CE]  	17	None	replace
56	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote?  2  :  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote?  2  :  0;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote?  2  :  0;	  char    ch    =    escapeSingleQuote?    1    :    0;    	non-compiled	[CE]  	34	None	replace
57	[BUG]  [BUGGY]  Char  ch  =  escapeSingleQuote  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  Char  ch  =  escapeSingleQuote  +  1;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	Char  ch  =  escapeSingleQuote  +  1;	  char    ch    =    escapeSingleQuote    +    4;    	non-compiled	[CE]  	22	None	replace
58	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote?  1  :  escapeSingleQuote;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote?  1  :  escapeSingleQuote;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote?  1  :  escapeSingleQuote;	  char    ch    =    escapeSingleQuote?    0    :    escapeSingleQuote;    	non-compiled	[CE]  	33	None	replace
59	[BUG]  [BUGGY]  char  ch  =(this.escapeSingleQuote  ==  null)?  this.escapeSingleQuote.charAt(0):  this.escapeSingleQuote.charAt(0);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =(this.escapeSingleQuote  ==  null)?  this.escapeSingleQuote.charAt(0):  this.escapeSingleQuote.charAt(0);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =(this.escapeSingleQuote  ==  null)?  this.escapeSingleQuote.charAt(0):  this.escapeSingleQuote.charAt(0);	  char    ch    =    this.escapeSingleQuote.charAt(0);    	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  char  ch  =  str.charAt(str.length());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(str.length());  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(str.length());	  char    ch    =    str.charAt(ch);    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  escapeSingleQuote  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  str.charAt(0,  escapeSingleQuote  -  1);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  str.charAt(0,  escapeSingleQuote  -  1);	  char    ch    =    str.charAt(0,    escapeSingleQuote);    	non-compiled	[CE]  	27	None	replace
62	[BUG]  [BUGGY]  String  ch  =  escapeSingleQuote?  '''  :  escapeSingleQuote;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  escapeSingleQuote?  '''  :  escapeSingleQuote;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  escapeSingleQuote?  '''  :  escapeSingleQuote;	  String    ch    =    escapeSingleQuote;    	non-compiled	[CE]  	17	None	replace
63	[BUG]  [BUGGY]  String  ch  =  escapeSingleQuote  + "= "  +  escapeSingleQuote;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  escapeSingleQuote  + "= "  +  escapeSingleQuote;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  escapeSingleQuote  + "= "  +  escapeSingleQuote;	  String    ch    =    escapeSingleQuote;    	non-compiled	[CE]  	17	None	replace
64	[BUG]  [BUGGY]  Char  ch  =  escapeSingleQuote.charAt(i);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  Char  ch  =  escapeSingleQuote.charAt(i);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	Char  ch  =  escapeSingleQuote.charAt(i);	  char    ch    =    escapeSingleQuote.charAt(sz);    	non-compiled	[CE]  	2	None	replace
65	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  ch;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote?  '''  :  ch;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote?  '''  :  ch;	  char    ch    =    escapeSingleQuote?    '''    :    escapeSingleQuote;    	non-compiled	[CE]  	32	None	replace
66	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote  /  2;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote  /  2;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote  /  2;	  char    ch    =    escapeSingleQuote    +    2;    	non-compiled	[CE]  	18	None	replace
67	[BUG]  [BUGGY]  char  ch  =  escapeSingleQuote  *  2;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  char  ch  =  escapeSingleQuote  *  2;  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	char  ch  =  escapeSingleQuote  *  2;	  char    ch    =    escapeSingleQuote    +    2;    	non-compiled	[CE]  	18	None	replace
68	[BUG]  [BUGGY]  out.write('[');  out.write('   "');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  out.write('[');  out.write('   "');  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	out.write('[');  out.write('   "');	  if(escapeSingleQuote)    {    out.write('');    out.write('       "');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
69	[BUG]  [BUGGY]  String  ch  =  str.charAt(0);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  }  else  {  switch  (ch)  {  case  '\'':  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "':      [BUGGY]  String  ch  =  str.charAt(0);  [BUGGY]      out.write('\\');  out.write('     "');  break;  case  '\\':  out.write('\\');  out.write('\\');  break;  default  :  out.write(ch);  break;  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.7071067811865475	229	229	1	replace	String  ch  =  str.charAt(0);	  char    ch    =    str.charAt(0);    	non-compiled	[CE]  	6	None	replace
