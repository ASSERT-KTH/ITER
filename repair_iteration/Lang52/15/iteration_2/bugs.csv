bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  sz  =  str.length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  Integer  sz  =  str.length()  +  1;  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  str.length()  +  1;	      Integer    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
2	[BUG]  [BUGGY]  Integer  sz  =  str.length()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  Integer  sz  =  str.length()  -  1;  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  str.length()  -  1;	      Integer    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
3	[BUG]  [BUGGY]  Integer  sz  =  out.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  Integer  sz  =  out.length();  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  out.length();	      Integer    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
4	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.lastIndexOf('-',  0);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-',  0);	  sz    =    str.lastIndexOf('-');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
5	[BUG]  [BUGGY]  sz  =  str.indexOf('-',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.indexOf('-',  0);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('-',  0);	  sz    =    str.lastIndexOf('-');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
6	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-',  -1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.lastIndexOf('-',  -1);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-',  -1);	  sz    =    str.lastIndexOf('-');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
7	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-',  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.lastIndexOf('-',  i);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-',  i);	  sz    =    str.lastIndexOf('-');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
8	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  sz);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.length(),  sz);	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
9	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length());  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  StaxUtils.writeStructure(out,  str.length());  sz  =  str.length();  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.length());  sz  =  str.length();	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
10	[BUG]  [BUGGY]  StaxUtils.checkState(str.length()  >  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  StaxUtils.checkState(str.length()  >  0);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.checkState(str.length()  >  0);	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
11	[BUG]  [BUGGY]  char  sz  =  str.lastIndexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  sz  =  str.lastIndexOf('.');  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  str.lastIndexOf('.');	      int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
12	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  16);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  int  sz  =  str.lastIndexOf('.',  16);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.lastIndexOf('.',  16);	      int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
13	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  int  sz  =  str.lastIndexOf('.',  1);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.lastIndexOf('.',  1);	      int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
14	[BUG]  [BUGGY]  int  sz  =  str.indexOf('.',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  int  sz  =  str.indexOf('.',  0);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.indexOf('.',  0);	      int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
15	[BUG]  [BUGGY]  char  ch  =  str.charAt(i  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  ch  =  str.charAt(i  +  1);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i  +  1);	      char    ch    =    str.charAt(i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
16	[BUG]  [BUGGY]  char  ch  =  str.charAt(i++);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  ch  =  str.charAt(i++);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i++);	      char    ch    =    str.charAt(i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
17	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  ch  =  str.charAt(sz);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(sz);	      char    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
18	[BUG]  [BUGGY]  char  ch  =  str.charAt(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  ch  =  str.charAt(1);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(1);	      char    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
19	[BUG]  [BUGGY]  int  sz  =  str.length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  int  sz  =  str.length()  +  1;  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.length()  +  1;	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
20	[BUG]  [BUGGY]  char  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  sz  =  str.length();  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  str.length();	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
21	[BUG]  [BUGGY]  int  sz  =  str.length()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  int  sz  =  str.length()  -  1;  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.length()  -  1;	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
22	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  out.write( "u00000 "  +  hex(ch));  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write( "u00000 "  +  hex(ch));	      out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
23	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.lastIndexOf('.',  0);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  0);	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
24	[BUG]  [BUGGY]  sz  =  str.indexOf('.',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.indexOf('.',  0);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('.',  0);	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
25	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.lastIndexOf('.',  i);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  i);	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
26	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  -1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.lastIndexOf('.',  -1);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  -1);	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
27	[BUG]  [BUGGY]  sz  =  str.length()  *  2  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.length()  *  2  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.length()  *  2  +  1;	  sz    =    str.length()    *    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
28	[BUG]  [BUGGY]  sz  =  str.length()  /  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.length()  /  2;  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.length()  /  2;	  sz    =    str.length()    *    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
29	[BUG]  [BUGGY]  char  ch  =  str.charAt(i,  sz).charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  ch  =  str.charAt(i,  sz).charAt(0);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i,  sz).charAt(0);	      char    ch    =    str.charAt(i).charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
30	[BUG]  [BUGGY]  char  ch  =  str.charAt(i).toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  ch  =  str.charAt(i).toCharArray();  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i).toCharArray();	      char    ch    =    str.charAt(i).charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
31	[BUG]  [BUGGY]  int  sz  =  out.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  int  sz  =  out.length();  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  out.length();	      int    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
32	[BUG]  [BUGGY]  StaxUtil.checkState(str.length());  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  StaxUtil.checkState(str.length());  sz  =  str.length();  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length());  sz  =  str.length();	  sz    =    str.length()    +    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
33	[BUG]  [BUGGY]  StaxUtil.checkState(out,  str.length());  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  StaxUtil.checkState(out,  str.length());  sz  =  str.length();  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(out,  str.length());  sz  =  str.length();	  sz    =    str.length()    +    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
34	[BUG]  [BUGGY]  StaxUtil.checkState(str.length(), "Style  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  StaxUtil.checkState(str.length(), "Style  must  not  be  null. ");  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length(), "Style  must  not  be  null. ");	  sz    =    str.length()    +    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
35	[BUG]  [BUGGY]  int  sz  =  str.indexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  int  sz  =  str.indexOf('.');  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.indexOf('.');	      int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
36	[BUG]  [BUGGY]  sz  =  str.indexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.indexOf('.');  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('.');	  sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
37	[BUG]  [BUGGY]  sz  =  str.indexOf('-');  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.indexOf('-');  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('-');	  sz    =    str.lastIndexOf('-');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
38	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  out.write( "u0000 "  +  hex(ch));  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write( "u0000 "  +  hex(ch));	      out.write(   "u00   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
39	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  ch  =  str.charAt(0,  sz);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(0,  sz);	      char    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
40	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  ==  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  StaxUtil.checkState(str.length()  ==  1);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  ==  1);	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
41	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()!=  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  StaxUtil.checkState(str.length()!=  1);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()!=  1);	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
42	[BUG]  [BUGGY]  sz  =  str.trim().length();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.trim().length();  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.trim().length();	  sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
43	[BUG]  [BUGGY]  out.write(str.charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  out.write(str.charAt(0));  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write(str.charAt(0));	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
44	[BUG]  [BUGGY]  char  ch  =  str.charAt(str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  char  ch  =  str.charAt(str.length()  -  1);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(str.length()  -  1);	      char    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
45	[BUG]  [BUGGY]  String  ch  =  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  String  ch  =  str.charAt(0);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  ch  =  str.charAt(0);	      char    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
46	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  -1);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  int  sz  =  str.lastIndexOf('.',  -1);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.lastIndexOf('.',  -1);	      int    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
47	[BUG]  [BUGGY]  String  ch  =  str.charAt(i).charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  String  ch  =  str.charAt(i).charAt(0);  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  ch  =  str.charAt(i).charAt(0);	      char    ch    =    str.charAt(i).charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
48	[BUG]  [BUGGY]  sz  =  str.indexOf('-',  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  sz  =  str.indexOf('-',  sz);  [BUGGY]    for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('-',  sz);	  sz    =    str.lastIndexOf('-');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
49	[BUG]  [BUGGY]  Integer  sz  =  str.lastIndexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (str  ==  null)  {  return;  }  int  sz;    [BUGGY]  Integer  sz  =  str.lastIndexOf('.');  [BUGGY]    sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  str.lastIndexOf('.');	      Integer    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
