bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  sz  =  str.lastIndexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  String  sz  =  str.lastIndexOf('.');  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  sz  =  str.lastIndexOf('.');	  char    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
2	[BUG]  [BUGGY]  char  sz  =  str.lastIndexOf('.',  16);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  sz  =  str.lastIndexOf('.',  16);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  str.lastIndexOf('.',  16);	  char    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
3	[BUG]  [BUGGY]  char  sz  =  str.lastIndexOf('.',  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  sz  =  str.lastIndexOf('.',  1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  str.lastIndexOf('.',  1);	  char    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
4	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('.',  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  1);	  sz    =    str.lastIndexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
5	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  12);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('.',  12);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  12);	  sz    =    str.lastIndexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
6	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  10);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('.',  10);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  10);	  sz    =    str.lastIndexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
7	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  ==  0);  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()  ==  0);  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  ==  0);  sz  =  str.length();	  StaxUtil.checkState(str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
8	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  >  0);  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()  >  0);  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  >  0);  sz  =  str.length();	  StaxUtil.checkState(str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
9	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()!=  0);  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()!=  0);  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()!=  0);  sz  =  str.length();	  StaxUtil.checkState(str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
10	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  12);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.lastIndexOf('.',  12);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.lastIndexOf('.',  12);	  int    sz    =    str.lastIndexOf('.',    16);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
11	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  10);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.lastIndexOf('.',  10);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.lastIndexOf('.',  10);	  int    sz    =    str.lastIndexOf('.',    16);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
12	[BUG]  [BUGGY]  String  ch  =  str.charAt(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  String  ch  =  str.charAt(1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  ch  =  str.charAt(1);	  char    ch    =    str.charAt(1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
13	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-',  i  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('-',  i  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-',  i  +  1);	  sz    =    str.lastIndexOf('-',    i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
14	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-',  i  +  1,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('-',  i  +  1,  str.length());  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-',  i  +  1,  str.length());	  sz    =    str.lastIndexOf('-',    i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
15	[BUG]  [BUGGY]  sz  =  str.trim().length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.trim().length()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.trim().length()  +  1;	  sz    =    str.trim().length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
16	[BUG]  [BUGGY]  sz  =  str.trim().length()  +  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.trim().length()  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.trim().length()  +  2;	  sz    =    str.trim().length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
17	[BUG]  [BUGGY]  sz  =  str.charAt(0).length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.charAt(0).length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.charAt(0).length();	  sz    =    str.trim().length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
18	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.charAt(0));  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.charAt(0));  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.charAt(0));  sz  =  str.length();	  StaxUtils.writeStructure(out,    str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
19	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  0);  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  0);  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.length(),  0);  sz  =  str.length();	  StaxUtils.writeStructure(out,    str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
20	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.toCharArray());  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.toCharArray());  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.toCharArray());  sz  =  str.length();	  StaxUtils.writeStructure(out,    str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
21	[BUG]  [BUGGY]  sz  =  str.length()  /  2  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.length()  /  2  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.length()  /  2  +  1;	  sz    =    str.length()    *    2    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
22	[BUG]  [BUGGY]  Long  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Long  sz  =  str.length();  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Long  sz  =  str.length();	  Integer    sz    =    str.length()    -    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
23	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.lastIndexOf('.',  2);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.lastIndexOf('.',  2);	  int    sz    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
24	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.lastIndexOf('.',  4);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.lastIndexOf('.',  4);	  int    sz    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
25	[BUG]  [BUGGY]  String  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  String  sz  =  str.length();  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  sz  =  str.length();	  char    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
26	[BUG]  [BUGGY]  Character  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Character  sz  =  str.length();  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Character  sz  =  str.length();	  char    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
27	[BUG]  [BUGGY]  StaxUtil.checkState(str.length(),  0, "Style  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length(),  0, "Style  must  not  be  null. ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length(),  0, "Style  must  not  be  null. ");	  StaxUtil.checkState(str.length(),   "Style    must    not    be    null.   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
28	[BUG]  [BUGGY]  StaxUtil.checkState(str.length(),  escapeSingleQuote, "Style  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length(),  escapeSingleQuote, "Style  must  not  be  null. ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length(),  escapeSingleQuote, "Style  must  not  be  null. ");	  StaxUtil.checkState(str.length(),   "Style    must    not    be    null.   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
29	[BUG]  [BUGGY]  StaxUtil.checkState(out,  str.length(),   "Style  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(out,  str.length(),   "Style  must  not  be  null. ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(out,  str.length(),   "Style  must  not  be  null. ");	  StaxUtil.checkState(str.length(),   "Style    must    not    be    null.   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
30	[BUG]  [BUGGY]  char  ch  =  str.charAt(0).toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(0).toCharArray();  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(0).toCharArray();	  char    ch    =    str.charAt(i).toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
31	[BUG]  [BUGGY]  char  ch  =  str.charAt(i].toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i].toCharArray();  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i].toCharArray();	  char    ch    =    str.charAt(i).toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
32	[BUG]  [BUGGY]  StaxUtils.checkState(str.length()  ==  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.checkState(str.length()  ==  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.checkState(str.length()  ==  0);	  StaxUtils.checkState(str.length()    >    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
33	[BUG]  [BUGGY]  StaxUtils.checkState(str.length()!=  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.checkState(str.length()!=  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.checkState(str.length()!=  0);	  StaxUtils.checkState(str.length()    >    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
34	[BUG]  [BUGGY]  StaxUtils.checkState(str.length()  <  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.checkState(str.length()  <  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.checkState(str.length()  <  0);	  StaxUtils.checkState(str.length()    >    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
35	[BUG]  [BUGGY]  byte  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  byte  sz  =  str.length();  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	byte  sz  =  str.length();	  int    sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
36	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('.',  4);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  4);	  sz    =    str.lastIndexOf('.',    -1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
37	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('.',  2);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  2);	  sz    =    str.lastIndexOf('.',    -1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
38	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-',  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('-',  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-',  1);	  sz    =    str.lastIndexOf('-',    -1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
39	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-',  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('-',  4);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-',  4);	  sz    =    str.lastIndexOf('-',    -1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
40	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-',  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('-',  2);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-',  2);	  sz    =    str.lastIndexOf('-',    -1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
41	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-',  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('-',  3);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-',  3);	  sz    =    str.lastIndexOf('-',    -1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
42	[BUG]  [BUGGY]  sz  =  str.indexOf('-',  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('-',  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('-',  1);	  sz    =    str.indexOf('-',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
43	[BUG]  [BUGGY]  sz  =  str.indexOf('-',  -1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('-',  -1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('-',  -1);	  sz    =    str.indexOf('-',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
44	[BUG]  [BUGGY]  sz  =  str.indexOf('-',  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('-',  4);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('-',  4);	  sz    =    str.indexOf('-',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
45	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  >=  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()  >=  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  >=  1);	  StaxUtil.checkState(str.length()!=    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
46	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  >  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()  >  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  >  1);	  StaxUtil.checkState(str.length()!=    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
47	[BUG]  [BUGGY]  char  sz  =  out.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  sz  =  out.length();  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  out.length();	  int    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
48	[BUG]  [BUGGY]  int  sz  =  out.length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  out.length()  +  1;  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  out.length()  +  1;	  int    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
49	[BUG]  [BUGGY]  int  sz  =  out.length()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  out.length()  -  1;  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  out.length()  -  1;	  int    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
50	[BUG]  [BUGGY]  char  ch  =  str.charAt(i++,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i++,  sz);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i++,  sz);	  char    ch    =    str.charAt(i++);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
51	[BUG]  [BUGGY]  char  ch  =  str.charAt(i  +  1,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i  +  1,  sz);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i  +  1,  sz);	  char    ch    =    str.charAt(i    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
52	[BUG]  [BUGGY]  char  ch  =  str.charAt(i  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i  +  2);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i  +  2);	  char    ch    =    str.charAt(i    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
53	[BUG]  [BUGGY]  sz  =  str.indexOf('-',  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('-',  i);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('-',  i);	  sz    =    str.indexOf('-',    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
54	[BUG]  [BUGGY]  int  sz  =  str.indexOf('-',  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.indexOf('-',  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.indexOf('-',  sz);	  sz    =    str.indexOf('-',    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
55	[BUG]  [BUGGY]  int  sz  =  str.indexOf('-',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.indexOf('-',  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.indexOf('-',  0);	  sz    =    str.indexOf('-');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
56	[BUG]  [BUGGY]  Integer  sz  =  str.lastIndexOf('.',  16);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Integer  sz  =  str.lastIndexOf('.',  16);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  str.lastIndexOf('.',  16);	  Integer    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
57	[BUG]  [BUGGY]  Integer  sz  =  str.lastIndexOf('.',  128);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Integer  sz  =  str.lastIndexOf('.',  128);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  str.lastIndexOf('.',  128);	  Integer    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
58	[BUG]  [BUGGY]  Integer  sz  =  str.lastIndexOf('.',  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Integer  sz  =  str.lastIndexOf('.',  4);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  str.lastIndexOf('.',  4);	  Integer    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
59	[BUG]  [BUGGY]  Integer  sz  =  str.lastIndexOf('.',  12);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Integer  sz  =  str.lastIndexOf('.',  12);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  str.lastIndexOf('.',  12);	  Integer    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
60	[BUG]  [BUGGY]  sz  =  str.indexOf('.',  -1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('.',  -1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('.',  -1);	  sz    =    str.indexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
61	[BUG]  [BUGGY]  sz  =  str.indexOf('.',  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('.',  i);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('.',  i);	  sz    =    str.indexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
62	[BUG]  [BUGGY]  StaxUtil.checkState(out,  str.length()  +  1);  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(out,  str.length()  +  1);  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(out,  str.length()  +  1);  sz  =  str.length();	  StaxUtil.checkState(out,    str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
63	[BUG]  [BUGGY]  StaxUtil.checkState(out,  str.length()  >  0);  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(out,  str.length()  >  0);  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(out,  str.length()  >  0);  sz  =  str.length();	  StaxUtil.checkState(out,    str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
64	[BUG]  [BUGGY]  StaxUtil.checkState(out,  str.length()  +  sz);  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(out,  str.length()  +  sz);  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(out,  str.length()  +  sz);  sz  =  str.length();	  StaxUtil.checkState(out,    str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
65	[BUG]  [BUGGY]  char  ch  =  str.charAt(str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(str.length());  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(str.length());	  char    ch    =    str.charAt(str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
66	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(sz.length()  -  1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(sz.length()  -  1);	  char    ch    =    str.charAt(str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
67	[BUG]  [BUGGY]  char  ch  =  str.charAt(str.length()  *  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(str.length()  *  1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(str.length()  *  1);	  char    ch    =    str.charAt(str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
68	[BUG]  [BUGGY]  char  ch  =  str.charAt(str.length()  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(str.length()  +  1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(str.length()  +  1);	  char    ch    =    str.charAt(str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
69	[BUG]  [BUGGY]  String  ch  =  str.charAt(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  String  ch  =  str.charAt(i);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  ch  =  str.charAt(i);	  String    ch    =    str.charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
70	[BUG]  [BUGGY]  char  sz  =  str.indexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  sz  =  str.indexOf('.');  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  str.indexOf('.');	  int    sz    =    str.indexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
71	[BUG]  [BUGGY]  int  sz  =  str.indexOf('.',  -1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.indexOf('.',  -1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.indexOf('.',  -1);	  int    sz    =    str.indexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
72	[BUG]  [BUGGY]  Enum.int  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Enum.int  sz  =  str.length();  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Enum.int  sz  =  str.length();	  Integer    sz    =    str.length()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
73	[BUG]  [BUGGY]  Integer  sz  =  out.length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Integer  sz  =  out.length()  +  1;  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  out.length()  +  1;	  Integer    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
74	[BUG]  [BUGGY]  Integer  sz  =  out.length()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Integer  sz  =  out.length()  -  1;  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  out.length()  -  1;	  Integer    sz    =    out.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
75	[BUG]  [BUGGY]  out.write(str.charAt(0),  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write(str.charAt(0),  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write(str.charAt(0),  0);	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
76	[BUG]  [BUGGY]  out.write(str.charAt(0),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write(str.charAt(0),  escapeSingleQuote);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write(str.charAt(0),  escapeSingleQuote);	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
77	[BUG]  [BUGGY]  out.write(str.charAt(0),  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write(str.charAt(0),  str.length());  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write(str.charAt(0),  str.length());	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
78	[BUG]  [BUGGY]  out.write(str.substring(0,  str.length()  -  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write(str.substring(0,  str.length()  -  1));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write(str.substring(0,  str.length()  -  1));	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
79	[BUG]  [BUGGY]  sz  =  str.indexOf('.',  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('.',  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('.',  1);	  sz    =    str.indexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
80	[BUG]  [BUGGY]  sz  =  str.indexOf('.',  0L);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('.',  0L);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('.',  0L);	  sz    =    str.indexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
81	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  sz,  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  sz,  escapeSingleQuote);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.length(),  sz,  escapeSingleQuote);	  StaxUtils.writeStructure(out,    str.length(),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
82	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.length(),  0);	  StaxUtils.writeStructure(out,    str.length(),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
83	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  escapeSingleQuote);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  escapeSingleQuote);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.length(),  escapeSingleQuote);	  StaxUtils.writeStructure(out,    str.length(),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
84	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.toCharArray(),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.toCharArray(),  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.toCharArray(),  sz);	  StaxUtils.writeStructure(out,    str.length(),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
85	[BUG]  [BUGGY]  char  sz  =  str.lastIndexOf('.',  -1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  sz  =  str.lastIndexOf('.',  -1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  str.lastIndexOf('.',  -1);	  int    sz    =    str.lastIndexOf('.',    -1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
86	[BUG]  [BUGGY]  String  ch  =  str.charAt(sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  String  ch  =  str.charAt(sz);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  ch  =  str.charAt(sz);	  char    ch    =    str.charAt(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
87	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  sz  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(0,  sz  +  1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(0,  sz  +  1);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
88	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(0,  i);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(0,  i);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
89	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  sz  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(0,  sz  -  1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(0,  sz  -  1);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
90	[BUG]  [BUGGY]  char  ch  =  str.charAt(i,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i,  sz);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i,  sz);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
91	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  i  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('.',  i  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  i  +  1);	  sz    =    str.lastIndexOf('.',    i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
92	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.',  i  +  1,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.lastIndexOf('.',  i  +  1,  str.length());  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.',  i  +  1,  str.length());	  sz    =    str.lastIndexOf('.',    i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
93	[BUG]  [BUGGY]  char  ch  =  str.charAt(i).charAt(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i).charAt(1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i).charAt(1);	  String    ch    =    str.charAt(i).charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
94	[BUG]  [BUGGY]  char  sz  =  str.indexOf('.',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  sz  =  str.indexOf('.',  0);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  str.indexOf('.',  0);	  int    sz    =    str.indexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
95	[BUG]  [BUGGY]  int  sz  =  str.indexOf('.',  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.indexOf('.',  1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.indexOf('.',  1);	  int    sz    =    str.indexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
96	[BUG]  [BUGGY]  int  sz  =  str.indexOf('.',  12);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.indexOf('.',  12);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.indexOf('.',  12);	  int    sz    =    str.indexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
97	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  ==  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()  ==  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  ==  0);	  StaxUtil.checkState(str.length()    ==    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
98	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  ==  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()  ==  2);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  ==  2);	  StaxUtil.checkState(str.length()    ==    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
99	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  ==  1,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()  ==  1,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  ==  1,  sz);	  StaxUtil.checkState(str.length()    ==    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
100	[BUG]  [BUGGY]  char  ch  =  str.charAt(i,  sz).charAt(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i,  sz).charAt(i);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i,  sz).charAt(i);	  char    ch    =    str.charAt(i,    sz).charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
101	[BUG]  [BUGGY]  char  ch  =  str.charAt(i,  sz).charAt(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i,  sz).charAt(1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i,  sz).charAt(1);	  char    ch    =    str.charAt(i,    sz).charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
102	[BUG]  [BUGGY]  char  ch  =  str.charAt(i,  0).charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i,  0).charAt(0);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i,  0).charAt(0);	  char    ch    =    str.charAt(i,    sz).charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
103	[BUG]  [BUGGY]  int  sz  =  str.indexOf('-');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.indexOf('-');  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.indexOf('-');	  sz    =    str.indexOf('-');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
104	[BUG]  [BUGGY]  StaxUtils.checkState(out.length()  >  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.checkState(out.length()  >  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.checkState(out.length()  >  0);	  StaxUtils.checkState(str.length()    >    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
105	[BUG]  [BUGGY]  char  ch  =  str.charAt(sz  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(sz  +  1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(sz  +  1);	  char    ch    =    str.charAt(sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
106	[BUG]  [BUGGY]  StaxUtil.checkState(out.length(),  str,   "Style  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(out.length(),  str,   "Style  must  not  be  null. ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(out.length(),  str,   "Style  must  not  be  null. ");	  StaxUtil.checkState(str.length(),   "Style    must    not    be    null.   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
107	[BUG]  [BUGGY]  StaxUtil.checkState(out.length(),   "Style  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(out.length(),   "Style  must  not  be  null. ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(out.length(),   "Style  must  not  be  null. ");	  StaxUtil.checkState(str.length(),   "Style    must    not    be    null.   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
108	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  >  0, "Style  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()  >  0, "Style  must  not  be  null. ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  >  0, "Style  must  not  be  null. ");	  StaxUtil.checkState(str.length(),   "Style    must    not    be    null.   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
109	[BUG]  [BUGGY]  sz  =  str.indexOf('.',  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('.',  4);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('.',  4);	  sz    =    str.indexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
110	[BUG]  [BUGGY]  Integer  sz  =  str.indexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  Integer  sz  =  str.indexOf('.');  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	Integer  sz  =  str.indexOf('.');	  Integer    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
111	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.substring(0,  sz));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.substring(0,  sz));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.substring(0,  sz));	  StaxUtils.writeStructure(out,    str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
112	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length()  -  1,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.length()  -  1,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.length()  -  1,  sz);	  StaxUtils.writeStructure(out,    str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
113	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  hex,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.length(),  hex,  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.length(),  hex,  sz);	  StaxUtils.writeStructure(out,    str.length(),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
114	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.charAt(0),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.charAt(0),  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.charAt(0),  sz);	  StaxUtils.writeStructure(out,    str.length(),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
115	[BUG]  [BUGGY]  StaxUtil.checkState(out.length()  ==  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(out.length()  ==  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(out.length()  ==  1);	  StaxUtil.checkState(str.length()    ==    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
116	[BUG]  [BUGGY]  int  sz  =  str.indexOf('.',  16);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.indexOf('.',  16);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.indexOf('.',  16);	  int    sz    =    str.lastIndexOf('.',    16);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
117	[BUG]  [BUGGY]  out.write(str.substring(0,  sz));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write(str.substring(0,  sz));  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write(str.substring(0,  sz));	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
118	[BUG]  [BUGGY]  out.write(str.charAt(0),  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write(str.charAt(0),  ch);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write(str.charAt(0),  ch);	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
119	[BUG]  [BUGGY]  char  ch  =  str.charAt(i++)+  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(i++)+  1;  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(i++)+  1;	  char    ch    =    str.charAt(i++);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
120	[BUG]  [BUGGY]  sz  =  str.charAt(str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.charAt(str.length()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.charAt(str.length()  -  1);	  sz    =    str.trim().length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
121	[BUG]  [BUGGY]  out.write( "u000000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write( "u000000 "  +  hex(ch));  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write( "u000000 "  +  hex(ch));	  out.write(   "u00000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
122	[BUG]  [BUGGY]  out.write( "00000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write( "00000 "  +  hex(ch));  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write( "00000 "  +  hex(ch));	  out.write(   "u00000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
123	[BUG]  [BUGGY]  StaxUtil.checkState(out.length()!=  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(out.length()!=  1);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(out.length()!=  1);	  StaxUtil.checkState(str.length()!=    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
124	[BUG]  [BUGGY]  StaxUtils.checkState(str.length()  >=  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.checkState(str.length()  >=  0);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.checkState(str.length()  >=  0);	  StaxUtils.checkState(str.length()    >    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
125	[BUG]  [BUGGY]  String  ch  =  str.charAt(str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  String  ch  =  str.charAt(str.length()  -  1);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  ch  =  str.charAt(str.length()  -  1);	  char    ch    =    str.charAt(str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
126	[BUG]  [BUGGY]  char  sz  =  str.lastIndexOf('.',  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  sz  =  str.lastIndexOf('.',  0);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  str.lastIndexOf('.',  0);	  char    sz    =    str.lastIndexOf('.');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
127	[BUG]  [BUGGY]  String  ch  =  str.charAt(i,  sz).charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  String  ch  =  str.charAt(i,  sz).charAt(0);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  ch  =  str.charAt(i,  sz).charAt(0);	  char    ch    =    str.charAt(i,    sz).charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
128	[BUG]  [BUGGY]  sz  =  str.indexOf('.',  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('.',  3);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('.',  3);	  sz    =    str.indexOf('.',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
129	[BUG]  [BUGGY]  int  sz  =  str.lastIndexOf('.',  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  int  sz  =  str.lastIndexOf('.',  3);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	int  sz  =  str.lastIndexOf('.',  3);	  int    sz    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
130	[BUG]  [BUGGY]  StaxUtil.checkState(str.length()  +  1,   "Style  must  not  be  null. ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtil.checkState(str.length()  +  1,   "Style  must  not  be  null. ");  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtil.checkState(str.length()  +  1,   "Style  must  not  be  null. ");	  StaxUtil.checkState(str.length(),   "Style    must    not    be    null.   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
131	[BUG]  [BUGGY]  char  sz  =  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  sz  =  str.charAt(0);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  sz  =  str.charAt(0);	  char    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
132	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.substring(sz),  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.substring(sz),  sz);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.substring(sz),  sz);	  StaxUtils.writeStructure(out,    str.length(),    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
133	[BUG]  [BUGGY]  StaxUtils.writeStructure(out,  str.toString());  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  StaxUtils.writeStructure(out,  str.toString());  sz  =  str.length();  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	StaxUtils.writeStructure(out,  str.toString());  sz  =  str.length();	  StaxUtils.writeStructure(out,    str.length());    sz    =    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
134	[BUG]  [BUGGY]  String  ch  =  str.charAt(i).toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  String  ch  =  str.charAt(i).toCharArray();  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	String  ch  =  str.charAt(i).toCharArray();	  char    ch    =    str.charAt(i).toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
135	[BUG]  [BUGGY]  out.write(str.charAt(0),  '-');  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write(str.charAt(0),  '-');  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write(str.charAt(0),  '-');	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
136	[BUG]  [BUGGY]  out.write(str.charAt(0),  hex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  out.write(str.charAt(0),  hex);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	out.write(str.charAt(0),  hex);	  out.write(str.charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
137	[BUG]  [BUGGY]  char  ch  =  str.charAt(0,  sz  +  1,  sz);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  char  ch  =  str.charAt(0,  sz  +  1,  sz);  [BUGGY]      sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	char  ch  =  str.charAt(0,  sz  +  1,  sz);	  char    ch    =    str.charAt(0,    sz);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
138	[BUG]  [BUGGY]  sz  =  str.indexOf('-',  16);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (str  ==  null)  {  return;  }  int  sz;      [BUGGY]  sz  =  str.indexOf('-',  16);  [BUGGY]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.indexOf('-',  16);	  sz    =    str.indexOf('-',    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
