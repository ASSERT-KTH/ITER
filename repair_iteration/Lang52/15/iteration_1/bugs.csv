bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sz  =  str.length()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]  sz  =  str.length()  +  1;  [BUGGY]  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.length()  +  1;	sz  =  str.length();  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
2	[BUG]  [BUGGY]  sz  =  str.length()  +  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]  sz  =  str.length()  +  2;  [BUGGY]  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.length()  +  2;	sz  =  str.length();  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
3	[BUG]  [BUGGY]  sz  =  str.length()  *  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]  sz  =  str.length()  *  2;  [BUGGY]  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.length()  *  2;	sz  =  str.length();  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
4	[BUG]  [BUGGY]    [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]    [BUGGY]  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	  	sz  =  str.length();  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
5	[BUG]  [BUGGY]    int  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]    int  sz  =  str.length();  [BUGGY]  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	    int  sz  =  str.length();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	add
6	[BUG]  [BUGGY]    char  ch  =  str.charAt(i);  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]    char  ch  =  str.charAt(i);  [BUGGY]  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	    char  ch  =  str.charAt(i);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	add
7	[BUG]  [BUGGY]    char  ch  =  str.charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]    char  ch  =  str.charAt(0);  [BUGGY]  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	    char  ch  =  str.charAt(0);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	add
8	[BUG]  [BUGGY]    Integer  sz  =  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]    Integer  sz  =  str.length();  [BUGGY]  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	    Integer  sz  =  str.length();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	add
9	[BUG]  [BUGGY]    char  ch  =  str.charAt(i).charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]    char  ch  =  str.charAt(i).charAt(0);  [BUGGY]  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	    char  ch  =  str.charAt(i).charAt(0);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	add
10	[BUG]  [BUGGY]    out.write( "u00 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]    out.write( "u00 "  +  hex(ch));  [BUGGY]  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	    out.write( "u00 "  +  hex(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	add
11	[BUG]  [BUGGY]    out.write( "u000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]    out.write( "u000 "  +  hex(ch));  [BUGGY]  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	    out.write( "u000 "  +  hex(ch));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	add
12	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]  sz  =  str.lastIndexOf('.');  [BUGGY]  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('.');	sz  =  str.length();  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
13	[BUG]  [BUGGY]  sz  =  str.lastIndexOf('-');  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]  sz  =  str.lastIndexOf('-');  [BUGGY]  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	sz  =  str.lastIndexOf('-');	sz  =  str.length();  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
14	[BUG]  [BUGGY]    int  sz  =  str.lastIndexOf('.');  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  private  static  void  escapeJavaStyleString(Writer  out,  String  str,  boolean  escapeSingleQuote)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (str  ==  null)  {  return;  }  int  sz;  [BUGGY]    int  sz  =  str.lastIndexOf('.');  [BUGGY]  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write( "\\u "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write( "\\u0 "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write( "\\u00 "  +  hex(ch));  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  boolean  escapeSingleQuote  char  ch  String  str  Writer  out  int  i  sz  	projects/Lang52/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5773502691896258	179	179	1	replace	    int  sz  =  str.lastIndexOf('.');		non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	add
