bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  entityValue  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  entityValue  =  input.charAt(start);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  entityValue  =  input.charAt(start);	  int    entityValue    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
2	[BUG]  [BUGGY]  char  entityValue  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  entityValue  =  input.charAt(index);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  entityValue  =  input.charAt(index);	  int    entityValue    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
3	[BUG]  [BUGGY]  int  entityValue  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  int  entityValue  =  input.charAt(index);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	int  entityValue  =  input.charAt(index);	  int    entityValue    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
4	[BUG]  [BUGGY]  char  entityValue  =  input.charAt(firstChar);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  entityValue  =  input.charAt(firstChar);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  entityValue  =  input.charAt(firstChar);	  int    entityValue    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
5	[BUG]  [BUGGY]  if(isHex  &&  firstChar!=  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar!=  ';')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar!=  ';')  {	  if(!isHex    &&    firstChar!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
6	[BUG]  [BUGGY]  if(!isHex  ||  firstChar!=  ';')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  ||  firstChar!=  ';')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  ||  firstChar!=  ';')  {	  if(!isHex    &&    firstChar!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
7	[BUG]  [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'Z')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'Z')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'Z')  {	  if(firstChar    ==    'X'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
8	[BUG]  [BUGGY]  if(firstChar!=  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'X'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
9	[BUG]  [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'X'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
10	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  ==  ';';  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  ==  ';';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(firstChar)  ==  ';';	  boolean    isHex    =    input.charAt(firstChar)!=    ';';    	non-compiled	[CE]  <identifier>  expected	44	None	replace
11	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(firstChar)!=  ';';  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(firstChar)!=  ';';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(firstChar)!=  ';';	  boolean    isHex    =    input.charAt(firstChar)!=    ';';    	non-compiled	[CE]  <identifier>  expected	44	None	replace
12	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  ';')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  ';')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  ';')  {	  if(!isHex    &&    firstChar    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
13	[BUG]  [BUGGY]  char  firstValue  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstValue  =  input.charAt(start);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstValue  =  input.charAt(start);	  int    firstValue    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
14	[BUG]  [BUGGY]  char  firstValue  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstValue  =  input.charAt(index);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstValue  =  input.charAt(index);	  int    firstValue    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
15	[BUG]  [BUGGY]  if(firstChar!=  ';'  &&  firstChar  ==  '+')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  ';'  &&  firstChar  ==  '+')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  ';'  &&  firstChar  ==  '+')  {	  if(firstChar!=    ';'    ||    firstChar    ==    '+')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
16	[BUG]  [BUGGY]  if(firstChar  ==  ';'  &&  firstChar  ==  '+')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  &&  firstChar  ==  '+')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  &&  firstChar  ==  '+')  {	  if(firstChar!=    ';'    ||    firstChar    ==    '+')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
17	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(input.length()  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(input.length()  -  1);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(input.length()  -  1);	  char    firstChar    =    input.charAt(input.length());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
18	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start).length();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(start).length();  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(start).length();	  char    firstChar    =    input.charAt(input.length());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
19	[BUG]  [BUGGY]  Integer  firstChar  =  input.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  Integer  firstChar  =  input.doubleValue()  +  1;  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	Integer  firstChar  =  input.doubleValue()  +  1;	  Integer    firstChar    =    input.doubleValue();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
20	[BUG]  [BUGGY]  char  firstChar  =  input.doubleValue();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.doubleValue();  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.doubleValue();	  Integer    firstChar    =    input.doubleValue();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
21	[BUG]  [BUGGY]  Integer  firstChar  =  input.doubleValue()  -  1;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  Integer  firstChar  =  input.doubleValue()  -  1;  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	Integer  firstChar  =  input.doubleValue()  -  1;	  Integer    firstChar    =    input.doubleValue();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
22	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(first  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(first  +  1);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(first  +  1);	  char    firstChar    =    input.charAt(first);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
23	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  2);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(start  +  2);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(start  +  2);	  char    firstValue    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
24	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'x')  {	  if(isHex    ||    firstChar    ==    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
25	[BUG]  [BUGGY]  if(isHex  ||  firstChar!=  ';'  ||  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar!=  ';'  ||  firstChar  ==  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar!=  ';'  ||  firstChar  ==  'x')  {	  if(isHex    ||    firstChar    ==    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
26	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar!=  'x')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar!=  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  ';'  ||  firstChar!=  'x')  {	  if(isHex    ||    firstChar    ==    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
27	[BUG]  [BUGGY]  if(firstChar!=  'X'  &&  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  'X'  &&  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  'X'  &&  firstChar  ==  'X')  {	  if(firstChar!=    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(index  +  1)!=  ';';  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(index  +  1)!=  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(index  +  1)!=  ';';	  boolean    isHex    =    input.charAt(start    +    1)!=    ';';    	non-compiled	[CE]  <identifier>  expected	41	None	replace
29	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  1)!=  ';';  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(start  +  1)!=  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(start  +  1)!=  ';';	  boolean    isHex    =    input.charAt(start    +    1)!=    ';';    	non-compiled	[CE]  <identifier>  expected	41	None	replace
30	[BUG]  [BUGGY]  char  entityValue  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  entityValue  =  input.charAt(index  +  1);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  entityValue  =  input.charAt(index  +  1);	  int    entityValue    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  char  entityValue  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  entityValue  =  input.charAt(start  +  1);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  entityValue  =  input.charAt(start  +  1);	  int    entityValue    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  int  entityValue  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  int  entityValue  =  input.charAt(start  +  1);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	int  entityValue  =  input.charAt(start  +  1);	  int    entityValue    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
33	[BUG]  [BUGGY]  int  entityValue  =  input.charAt(firstChar  +  1);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  int  entityValue  =  input.charAt(firstChar  +  1);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	int  entityValue  =  input.charAt(firstChar  +  1);	  int    entityValue    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  ';'  &&  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  ';'  &&  firstChar  ==  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  ';'  &&  firstChar  ==  'x')  {	  if(firstChar    ==    ';'    &&    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
35	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(index)  ==  ';';  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(index)  ==  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(index)  ==  ';';	  boolean    isHex    =    input.charAt(start)    ==    ';';    	non-compiled	[CE]  <identifier>  expected	57	None	replace
36	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  isHex)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  isHex)  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  isHex)  {	  if(firstChar    ==    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
37	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  ==  '>';  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  ==  '>';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(firstChar)  ==  '>';	  boolean    isHex    =    input.charAt(firstChar)!=    '>';    	non-compiled	[CE]  <identifier>  expected	46	None	replace
38	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start)!=  '>';  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(start)!=  '>';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(start)!=  '>';	  boolean    isHex    =    input.charAt(firstChar)!=    '>';    	non-compiled	[CE]  <identifier>  expected	46	None	replace
39	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(0)!=  '>';  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(0)!=  '>';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(0)!=  '>';	  boolean    isHex    =    input.charAt(firstChar)!=    '>';    	non-compiled	[CE]  <identifier>  expected	46	None	replace
40	[BUG]  [BUGGY]  if(isHex  &&  firstChar!=  'x'  &&  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar!=  'x'  &&  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar!=  'x'  &&  firstChar  ==  'X')  {	  if(firstChar!=    'x'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
41	[BUG]  [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
42	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar!=  'A')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar!=  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar!=  'A')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
43	[BUG]  [BUGGY]  Integer  firstChar  =  input.intValue()  /  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  Integer  firstChar  =  input.intValue()  /  1;  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	Integer  firstChar  =  input.intValue()  /  1;	  Integer    firstChar    =    input.intValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
44	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'X')  {	  if(isHex    ||    firstChar    ==    ';'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
45	[BUG]  [BUGGY]  if(isHex  ||  firstChar!=  ';'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar!=  ';'  ||  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar!=  ';'  ||  firstChar  ==  'X')  {	  if(isHex    ||    firstChar    ==    ';'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
46	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar!=  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  ';'  ||  firstChar!=  'X')  {	  if(isHex    ||    firstChar    ==    ';'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
47	[BUG]  [BUGGY]  if(firstChar)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar)  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar)  {	  if(isHex)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
48	[BUG]  [BUGGY]  if(!isHex)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex)  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex)  {	  if(isHex)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
49	[BUG]  [BUGGY]  if(isHex  &&  firstChar!=  null)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar!=  null)  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar!=  null)  {	  if(isHex)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
50	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(index)!=  ';';  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(index)!=  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(index)!=  ';';	  boolean    isHex    =    input.charAt(start)!=    ';';    	non-compiled	[CE]  <identifier>  expected	56	None	replace
51	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(firstChar  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(firstChar  +  1);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(firstChar  +  1);	  char    firstChar    =    input.charAt(firstChar);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
52	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(firstIndex);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(firstIndex);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(firstIndex);	  char    firstChar    =    input.charAt(firstChar);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
53	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(firstChar)+  1;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(firstChar)+  1;  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(firstChar)+  1;	  char    firstChar    =    input.charAt(firstChar);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
54	[BUG]  [BUGGY]  if(isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {	  if(isHex    &&    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
55	[BUG]  [BUGGY]  if(!isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {	  if(!isHex    &&    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
56	[BUG]  [BUGGY]  if(!isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {	  if(!isHex    &&    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
57	[BUG]  [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
58	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar!=  '-')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar!=  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar!=  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
59	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar!=  'x'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar!=  'x'  ||  firstChar  ==  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar!=  'x'  ||  firstChar  ==  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
60	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  ';'  &&  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  ';'  &&  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  ';'  &&  firstChar  ==  'X')  {	  if(firstChar    ==    ';'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
61	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(firstChar);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(firstChar);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(firstChar);	  boolean    isHex    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
62	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  'X'  &&  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  'X'  &&  firstChar!=  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  'X'  &&  firstChar!=  'X')  {	  if(firstChar    ==    'X'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
63	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  'X'  &&  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  'X'  &&  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  'X'  &&  firstChar  ==  'X')  {	  if(firstChar    ==    'X'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
64	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  'X'  &&  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar  ==  'X'  &&  firstChar!=  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar  ==  'X'  &&  firstChar!=  'X')  {	  if(firstChar    ==    'X'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
65	[BUG]  [BUGGY]  char  entityValue  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  entityValue  =  input.charAt(0);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  entityValue  =  input.charAt(0);	  int    entityValue    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
66	[BUG]  [BUGGY]  char  entityValue  =  input.charAt(1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  entityValue  =  input.charAt(1);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  entityValue  =  input.charAt(1);	  int    entityValue    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
67	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  ==  '#';  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  ==  '#';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(firstChar)  ==  '#';	  boolean    isHex    =    input.charAt(firstChar)!=    '#';    	non-compiled	[CE]  <identifier>  expected	45	None	replace
68	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start)!=  '#';  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(start)!=  '#';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(start)!=  '#';	  boolean    isHex    =    input.charAt(firstChar)!=    '#';    	non-compiled	[CE]  <identifier>  expected	45	None	replace
69	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(0)!=  '#';  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(0)!=  '#';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(0)!=  '#';	  boolean    isHex    =    input.charAt(firstChar)!=    '#';    	non-compiled	[CE]  <identifier>  expected	45	None	replace
70	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  'X'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  'X'  ||  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  'X'  ||  firstChar  ==  'X')  {	  if(isHex    ||    firstChar    ==    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
71	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'X'  ||  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  'X'  ||  firstChar!=  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  'X'  ||  firstChar!=  'X')  {	  if(isHex    ||    firstChar    ==    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
72	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  '+')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  '+')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  '+')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    '+')    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
73	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(0)  ==  firstChar;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(0)  ==  firstChar;  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(0)  ==  firstChar;	  boolean    isHex    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
74	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(0)  ==  ';';  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(0)  ==  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(0)  ==  ';';	  boolean    isHex    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
75	[BUG]  [BUGGY]  if(firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
76	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
77	[BUG]  [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'x')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
78	[BUG]  [BUGGY]  Integer  entityValue  =  input.getEntityValue()  +  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  Integer  entityValue  =  input.getEntityValue()  +  1;  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	Integer  entityValue  =  input.getEntityValue()  +  1;	  Integer    entityValue    =    input.getEntityValue();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
79	[BUG]  [BUGGY]  Integer  entityValue  =  input.getEntityValue(index);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  Integer  entityValue  =  input.getEntityValue(index);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	Integer  entityValue  =  input.getEntityValue(index);	  Integer    entityValue    =    input.getEntityValue();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
80	[BUG]  [BUGGY]  Integer  entityValue  =  input.getEntityValue()  -  1;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  Integer  entityValue  =  input.getEntityValue()  -  1;  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	Integer  entityValue  =  input.getEntityValue()  -  1;	  Integer    entityValue    =    input.getEntityValue();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
81	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(index  +  1)  ==  ';';  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(index  +  1)  ==  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(index  +  1)  ==  ';';	  boolean    isHex    =    input.charAt(start    +    1)    ==    ';';    	non-compiled	[CE]  <identifier>  expected	42	None	replace
82	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  1)  ==  ';';  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(start  +  1)  ==  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(start  +  1)  ==  ';';	  boolean    isHex    =    input.charAt(start    +    1)    ==    ';';    	non-compiled	[CE]  <identifier>  expected	42	None	replace
83	[BUG]  [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
84	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar!=  '-')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar!=  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar!=  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
85	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
86	[BUG]  [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
87	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar!=  'A')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar!=  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar!=  'A')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
88	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
89	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(isHex    ||    firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
90	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar!=  'A')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar!=  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar!=  'A')  {	  if(isHex    ||    firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
91	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(start  +  2);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(start  +  2);	  boolean    isHex    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
92	[BUG]  [BUGGY]  String  firstChar  =  input.intValue();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  String  firstChar  =  input.intValue();  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	String  firstChar  =  input.intValue();	  char    firstChar    =    input.intValue();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
93	[BUG]  [BUGGY]  if(firstChar  ==  ':'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ':'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ':'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
94	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
95	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(firstChar)!=  '#'  ||  input.charAt(firstChar)  ==  '-';  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(firstChar)!=  '#'  ||  input.charAt(firstChar)  ==  '-';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(firstChar)!=  '#'  ||  input.charAt(firstChar)  ==  '-';	  boolean    isHex    =    input.charAt(firstChar)!=    '#';    	non-compiled	[CE]  <identifier>  expected	45	None	replace
96	[BUG]  [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
97	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
98	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar  ==  'X')  {	  if(firstChar    ==    'X'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
99	[BUG]  [BUGGY]  if(firstChar  ==  'X'  &&  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  'X'  &&  firstChar!=  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  'X'  &&  firstChar!=  'X')  {	  if(firstChar    ==    'X'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
100	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(0)!=  ';';  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(0)!=  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(0)!=  ';';	  boolean    isHex    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
101	[BUG]  [BUGGY]  if(firstChar  ==  ';'  &&  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  &&  firstChar!=  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  &&  firstChar!=  'X')  {	  if(firstChar!=    ';'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
102	[BUG]  [BUGGY]  if(firstChar!=  'X'  &&  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  'X'  &&  firstChar!=  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  'X'  &&  firstChar!=  'X')  {	  if(firstChar!=    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
103	[BUG]  [BUGGY]  if(firstChar  ==  ';'  &&  firstChar!=  'x')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  &&  firstChar!=  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  &&  firstChar!=  'x')  {	  if(firstChar    ==    ';'    &&    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
104	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  >=  ';';  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  >=  ';';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(firstChar)  >=  ';';	  boolean    isHex    =    input.charAt(firstChar)!=    ';';    	non-compiled	[CE]  <identifier>  expected	44	None	replace
105	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  'X'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar  ==  'X'  ||  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar  ==  'X'  ||  firstChar  ==  'X')  {	  if(isHex    ||    firstChar    ==    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
106	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(1);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(1);	  char    firstChar    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
107	[BUG]  [BUGGY]  if(firstChar  ==  ':'  ||  firstChar  ==  'x'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ':'  ||  firstChar  ==  'x'  ||  firstChar  ==  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ':'  ||  firstChar  ==  'x'  ||  firstChar  ==  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
108	[BUG]  [BUGGY]  if(firstChar  ==  ':'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ':'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ':'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
109	[BUG]  [BUGGY]  Integer  entityValue  =  input.getEntityValue(start);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  Integer  entityValue  =  input.getEntityValue(start);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	Integer  entityValue  =  input.getEntityValue(start);	  Integer    entityValue    =    input.getEntityValue();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
110	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar!=  'x')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar!=  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar!=  'x')  {	  if(firstChar!=    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
111	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(index  +  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(index  +  2);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(index  +  2);	  boolean    isHex    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
112	[BUG]  [BUGGY]  char  firstChar  =  input.intValue()  +  1;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.intValue()  +  1;  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.intValue()  +  1;	  char    firstChar    =    input.intValue();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
113	[BUG]  [BUGGY]  char  firstChar  =  input.charValue();  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charValue();  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charValue();	  char    firstChar    =    input.intValue();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
114	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'x')  {	  if(isHex    ||    firstChar    ==    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
115	[BUG]  [BUGGY]  if(firstChar  ==  'n'  ||  isHex)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  'n'  ||  isHex)  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  'n'  ||  isHex)  {	  if(isHex)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
116	[BUG]  [BUGGY]  if(firstChar  ==  'A'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  'A'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  'A'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'X'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
117	[BUG]  [BUGGY]  int  firstValue  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  int  firstValue  =  input.charAt(index);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	int  firstValue  =  input.charAt(index);	  int    firstValue    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
118	[BUG]  [BUGGY]  int  firstValue  =  input.charAt(start  -  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  int  firstValue  =  input.charAt(start  -  1);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	int  firstValue  =  input.charAt(start  -  1);	  int    firstValue    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
119	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar!=  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar!=  'X')  {	  if(firstChar!=    ';'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
120	[BUG]  [BUGGY]  if(firstChar!=  ';'  ||  isHex)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  ';'  ||  isHex)  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  ';'  ||  isHex)  {	  if(firstChar    ==    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
121	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(isHex    ||    firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
122	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(input.length()  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(input.length()  +  1);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(input.length()  +  1);	  char    firstChar    =    input.charAt(input.length());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
123	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar!=  '+')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar!=  '+')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar!=  '+')  {	  if(firstChar!=    ';'    ||    firstChar    ==    '+')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
124	[BUG]  [BUGGY]  Integer  firstChar  =  input.intValue()  *  1;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  Integer  firstChar  =  input.intValue()  *  1;  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	Integer  firstChar  =  input.intValue()  *  1;	  Integer    firstChar    =    input.intValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
125	[BUG]  [BUGGY]  int  entityValue  =  input.charAt(firstChar);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  int  entityValue  =  input.charAt(firstChar);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	int  entityValue  =  input.charAt(firstChar);	  int    entityValue    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
126	[BUG]  [BUGGY]  if(firstChar  ==  'x'  &&  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  'x'  &&  firstChar!=  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  'x'  &&  firstChar!=  'X')  {	  if(firstChar!=    'x'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
127	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'X')  {	  if(isHex    ||    firstChar    ==    ';'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
128	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(input.length()  -  1)!=  ';';  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(input.length()  -  1)!=  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(input.length()  -  1)!=  ';';	  boolean    isHex    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
129	[BUG]  [BUGGY]  if(firstChar  ==  ':'  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ':'  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ':'  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
130	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  >=  '>';  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(firstChar)  >=  '>';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(firstChar)  >=  '>';	  boolean    isHex    =    input.charAt(firstChar)!=    '>';    	non-compiled	[CE]  <identifier>  expected	46	None	replace
131	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
132	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'X'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
133	[BUG]  [BUGGY]  if(isHex  &&  firstChar!=  'x')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar!=  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar!=  'x')  {	  if(firstChar!=    'x'    &&    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
134	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(firstChar)!=  ';'  ||  input.charAt(start);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(firstChar)!=  ';'  ||  input.charAt(start);  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(firstChar)!=  ';'  ||  input.charAt(start);	  boolean    isHex    =    input.charAt(firstChar)!=    ';';    	non-compiled	[CE]  <identifier>  expected	44	None	replace
135	[BUG]  [BUGGY]  if(isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar!=    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
136	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  '+'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  '+'  ||  firstChar  ==  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar  ==  ';'  ||  firstChar  ==  '+'  ||  firstChar  ==  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    '+')    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
137	[BUG]  [BUGGY]  if(!isHex  &&  firstChar!=  ';'  &&  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar!=  ';'  &&  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar!=  ';'  &&  firstChar  ==  'X')  {	  if(firstChar!=    ';'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
138	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(input.charAt(start));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(input.charAt(start));  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(input.charAt(start));	  boolean    isHex    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
139	[BUG]  [BUGGY]  if(!isHex  &&  firstChar!=  ';'  &&  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar!=  ';'  &&  firstChar  ==  'x')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar!=  ';'  &&  firstChar  ==  'x')  {	  if(firstChar!=    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
140	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start  +  1)!=  false;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(start  +  1)!=  false;  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(start  +  1)!=  false;	  boolean    isHex    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
141	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  'X')  {	  if(firstChar!=    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
142	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(end);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(end);	  char    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
143	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start.length());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstChar  =  input.charAt(start.length());  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstChar  =  input.charAt(start.length());	  char    firstChar    =    input.charAt(input.length());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
144	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  '-')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  '-')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
145	[BUG]  [BUGGY]  char  isHex  =  input.charAt(start  +  1)  ==  ';';  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  isHex  =  input.charAt(start  +  1)  ==  ';';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  isHex  =  input.charAt(start  +  1)  ==  ';';	  boolean    isHex    =    input.charAt(start    +    1)!=    ';';    	non-compiled	[CE]  <identifier>  expected	41	None	replace
146	[BUG]  [BUGGY]  char  firstValue  =  input.charAt(start  +  2);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  firstValue  =  input.charAt(start  +  2);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  firstValue  =  input.charAt(start  +  2);	  char    firstValue    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
147	[BUG]  [BUGGY]  if(!isHex  &&  firstChar!=  ';'  &&  firstChar  ==  '+')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar!=  ';'  &&  firstChar  ==  '+')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar!=  ';'  &&  firstChar  ==  '+')  {	  if(firstChar!=    ';'    ||    firstChar    ==    '+')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
148	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
149	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start  +  1)  ==  ';'  ||  input.charAt(start  +  1)  ==  ':';  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(start  +  1)  ==  ';'  ||  input.charAt(start  +  1)  ==  ':';  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(start  +  1)  ==  ';'  ||  input.charAt(start  +  1)  ==  ':';	  boolean    isHex    =    input.charAt(start    +    1)    ==    ';';    	non-compiled	[CE]  <identifier>  expected	42	None	replace
150	[BUG]  [BUGGY]  if(!isHex  &&  firstChar!=  ';'  &&  firstChar!=  '+')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar!=  ';'  &&  firstChar!=  '+')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar!=  ';'  &&  firstChar!=  '+')  {	  if(!isHex    &&    firstChar!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
151	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(input.length()  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  boolean  isHex  =  input.charAt(input.length()  +  1);  [BUGGY]      if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	boolean  isHex  =  input.charAt(input.length()  +  1);	  boolean    isHex    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
152	[BUG]  [BUGGY]  if(firstChar!=  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(firstChar!=  ';'  &&  isHex)  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(firstChar!=  ';'  &&  isHex)  {	  if(firstChar!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
153	[BUG]  [BUGGY]  char  isHex  =  input.charAt(firstChar)!=  '#';  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  char  isHex  =  input.charAt(firstChar)!=  '#';  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	char  isHex  =  input.charAt(firstChar)!=  '#';	  boolean    isHex    =    input.charAt(firstChar)!=    '#';    	non-compiled	[CE]  <identifier>  expected	45	None	replace
154	[BUG]  [BUGGY]  if(!isHex  &&  firstChar!=  'x'  &&  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  &&  firstChar!=  'x'  &&  firstChar  ==  'X')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  &&  firstChar!=  'x'  &&  firstChar  ==  'X')  {	  if(!isHex    &&    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
155	[BUG]  [BUGGY]  if(!isHex  ||  firstChar  ==  ';')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);      [BUGGY]  if(!isHex  ||  firstChar  ==  ';')  {  [BUGGY]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	if(!isHex  ||  firstChar  ==  ';')  {	  if(!isHex    &&    firstChar    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
