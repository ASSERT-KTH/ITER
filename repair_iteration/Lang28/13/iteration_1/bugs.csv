bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  2  +  (index  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]  return  2  +  (index  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	return  2  +  (index  -  start)+  (isHex?  1  :  0)+  1;	return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  	non-compiled	[CE]  <identifier>  expected	26	None	replace
2	[BUG]  [BUGGY]  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;	return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  	non-compiled	[CE]  <identifier>  expected	26	None	replace
3	[BUG]  [BUGGY]  return  2  +  (start  -  end)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]  return  2  +  (start  -  end)+  (isHex?  1  :  0)+  1;  [BUGGY]  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	return  2  +  (start  -  end)+  (isHex?  1  :  0)+  1;	return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  	non-compiled	[CE]  <identifier>  expected	26	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    [BUGGY]  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	  	return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  	non-compiled	[CE]  <identifier>  expected	26	None	replace
5	[BUG]  [BUGGY]    out.write(entityValue);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    out.write(entityValue);  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    out.write(entityValue);		non-compiled	[CE]  <identifier>  expected	27	None	add
6	[BUG]  [BUGGY]    Integer  end  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    Integer  end  =  input.subSequence(start,  end).toString();  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    Integer  end  =  input.subSequence(start,  end).toString();		non-compiled	[CE]  <identifier>  expected	27	None	add
7	[BUG]  [BUGGY]    Integer  end  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    Integer  end  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    Integer  end  =  input.subSequence(start,  end).toString(),  10;		non-compiled	[CE]  <identifier>  expected	27	None	add
8	[BUG]  [BUGGY]    Integer  end  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    Integer  end  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    Integer  end  =  input.subSequence(start,  end).toString(),  10);		non-compiled	[CE]  <identifier>  expected	27	None	add
9	[BUG]  [BUGGY]    Integer  end  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    Integer  end  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    Integer  end  =  input.subSequence(start,  end).toString()  +  1;		non-compiled	[CE]  <identifier>  expected	27	None	add
10	[BUG]  [BUGGY]    out.write('n');  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    out.write('n');  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    out.write('n');		non-compiled	[CE]  <identifier>  expected	27	None	add
11	[BUG]  [BUGGY]    int  end  =  input.indexOf(':');  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    int  end  =  input.indexOf(':');  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    int  end  =  input.indexOf(':');		non-compiled	[CE]  <identifier>  expected	27	None	add
12	[BUG]  [BUGGY]    int  end  =  input.indexOf('  ');  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    int  end  =  input.indexOf('  ');  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    int  end  =  input.indexOf('  ');		non-compiled	[CE]  <identifier>  expected	27	None	add
13	[BUG]  [BUGGY]    int  start  =  input.getStart();  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    int  start  =  input.getStart();  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    int  start  =  input.getStart();		non-compiled	[CE]  <identifier>  expected	27	None	add
14	[BUG]  [BUGGY]  return  2  +  (end  -  start)+  (index?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]  return  2  +  (end  -  start)+  (index?  1  :  0)+  1;  [BUGGY]  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	return  2  +  (end  -  start)+  (index?  1  :  0)+  1;	return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  	non-compiled	[CE]  <identifier>  expected	26	None	replace
15	[BUG]  [BUGGY]  return  2  +  (end  -  index)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]  return  2  +  (end  -  index)+  (isHex?  1  :  0)+  1;  [BUGGY]  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	return  2  +  (end  -  index)+  (isHex?  1  :  0)+  1;	return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  	non-compiled	[CE]  <identifier>  expected	26	None	replace
16	[BUG]  [BUGGY]    int  end  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    int  end  =  input.subSequence(start,  end).toString();  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    int  end  =  input.subSequence(start,  end).toString();		non-compiled	[CE]  <identifier>  expected	27	None	add
17	[BUG]  [BUGGY]    int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);		non-compiled	[CE]  <identifier>  expected	27	None	add
18	[BUG]  [BUGGY]    int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(end,  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(end,  input.subSequence(start,  end).toString(),  10);  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(end,  input.subSequence(start,  end).toString(),  10);		non-compiled	[CE]  <identifier>  expected	27	None	add
19	[BUG]  [BUGGY]    int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  [BUGGY]    int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	    int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);		non-compiled	[CE]  <identifier>  expected	27	None	add
