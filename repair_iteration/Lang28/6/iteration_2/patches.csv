bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  firstChar  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  firstChar  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  firstChar  +  1);	  int    end    =    input.indexOf('n',    firstChar);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
2	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  firstChar)+  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  firstChar)+  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  firstChar)+  1;	  int    end    =    input.indexOf('n',    firstChar);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
3	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  -  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  -  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  -  2);	  Integer    entityValue    =    input.subSequence(start,    index    +    2);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
4	[BUG]  [BUGGY]  int  end  =  1  <  <  input.length()?  1  :  0;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  1  <  <  input.length()?  1  :  0;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  1  <  <  input.length()?  1  :  0;	  int    end    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  int  end  =  1  <  <  input.length();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  1  <  <  input.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  1  <  <  input.length();	  int    end    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  char  end  =  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  1;	  int    end    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  -  1  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  -  1  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  -  1  +  1);	  Integer    entityValue    =    input.subSequence(start,    index    -    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
8	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(index,  start);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(index,  start);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(index,  start);	  Integer    entityValue    =    input.subSequence(start,    start);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
9	[BUG]  [BUGGY]  Integer  input  =  input.getAssignedValue()  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAssignedValue()  +  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAssignedValue()  +  1;	  Integer    input    =    input.getAssignedValue();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
10	[BUG]  [BUGGY]  Integer  input  =  input.getAssignedValue()  -  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAssignedValue()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAssignedValue()  -  1;	  Integer    input    =    input.getAssignedValue();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
11	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAssignedValue();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getAssignedValue();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getAssignedValue();	  Integer    input    =    input.getAssignedValue();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
12	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  start  +  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  start  +  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  start  +  2);	  int    end    =    input.indexOf('n',    start    +    1);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
13	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1).toString(),  10;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1).toString(),  10;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1).toString(),  10;	  Integer    entityValue    =    input.subSequence(start,    index    +    1).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
14	[BUG]  [BUGGY]  char  input  =  firstChar.getIntValue();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  input  =  firstChar.getIntValue();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  input  =  firstChar.getIntValue();	  Integer    input    =    firstChar.getIntValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
15	[BUG]  [BUGGY]  Integer  input  =  firstChar.toString();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.toString();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.toString();	  Integer    input    =    firstChar.getIntValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
16	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  index  +  2);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  index  +  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  index  +  2);	  int    end    =    input.indexOf('n',    index    +    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
17	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start,  index  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException(start,  index  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start,  index  +  1);	  nfe    =    input.getNumberFormatException(start,    index);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start,  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException(start,  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start,  1);	  nfe    =    input.getNumberFormatException(start,    index);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start,  firstChar);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException(start,  firstChar);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start,  firstChar);	  nfe    =    input.getNumberFormatException(start,    index);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  2);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start,  index  +  2);	  Integer    input    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
21	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  3);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  3);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start,  index  +  3);	  Integer    input    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
22	[BUG]  [BUGGY]  int  input  =  input.subSequence(start,  index  +  1);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  input  =  input.subSequence(start,  index  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  input  =  input.subSequence(start,  index  +  1);	  Integer    input    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
23	[BUG]  [BUGGY]  Integer  input  =  input.getAscentInt()  /  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentInt()  /  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentInt()  /  1;	  Integer    input    =    input.getAscentInt()    +    1;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
24	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  0);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  0);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  0);	  int    end    =    input.indexOf('n',    1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
25	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  2);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  2);	  int    end    =    input.indexOf('n',    1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
26	[BUG]  [BUGGY]  char  end  =  input.indexOf('n',  1);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  input.indexOf('n',  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.indexOf('n',  1);	  int    end    =    input.indexOf('n',    1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
27	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscentInt()  -  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getAscentInt()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getAscentInt()  -  1;	  Integer    input    =    input.getAscentInt()    -    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
28	[BUG]  [BUGGY]  Integer  input  =  input.getAscentValue()  +  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentValue()  +  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentValue()  +  1;	  Integer    input    =    input.getAscentValue();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
29	[BUG]  [BUGGY]  Integer  input  =  input.getAscentValue()  -  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentValue()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentValue()  -  1;	  Integer    input    =    input.getAscentValue();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
30	[BUG]  [BUGGY]  String  end  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  String  end  =  input.charAt(start  +  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	String  end  =  input.charAt(start  +  1);	  String    end    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
31	[BUG]  [BUGGY]  int  end  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.charAt(index  +  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.charAt(index  +  1);	  String    end    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
32	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  index  +  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  entityValue  =  input.subSequence(start,  index  +  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  entityValue  =  input.subSequence(start,  index  +  2);	  int    entityValue    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
33	[BUG]  [BUGGY]  char  entityValue  =  input.subSequence(start,  index  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  entityValue  =  input.subSequence(start,  index  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  entityValue  =  input.subSequence(start,  index  +  1);	  int    entityValue    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
34	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  index  +  3);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  entityValue  =  input.subSequence(start,  index  +  3);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  entityValue  =  input.subSequence(start,  index  +  3);	  int    entityValue    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
35	[BUG]  [BUGGY]  String  end  =  input.length();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  String  end  =  input.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	String  end  =  input.length();	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
36	[BUG]  [BUGGY]  char  end  =  input.length()  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  input.length()  +  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.length()  +  1;	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
37	[BUG]  [BUGGY]  char  input  =  firstChar.getAscentInt();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  input  =  firstChar.getAscentInt();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  input  =  firstChar.getAscentInt();	  Integer    input    =    firstChar.getAscentInt();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
38	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscentInt()  +  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getAscentInt()  +  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getAscentInt()  +  1;	  Integer    input    =    firstChar.getAscentInt();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
39	[BUG]  [BUGGY]  int  input  =  firstChar.getAscentInt();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  input  =  firstChar.getAscentInt();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  input  =  firstChar.getAscentInt();	  Integer    input    =    firstChar.getAscentInt();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
40	[BUG]  [BUGGY]  Integer  input  =  input.getAscentIndex()  -  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentIndex()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentIndex()  -  1;	  Integer    input    =    input.getAscentIndex();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
41	[BUG]  [BUGGY]  Integer  input  =  input.getAscentIndex()  +  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentIndex()  +  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentIndex()  +  1;	  Integer    input    =    input.getAscentIndex();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
42	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscentIndex();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getAscentIndex();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getAscentIndex();	  Integer    input    =    input.getAscentIndex();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
43	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  firstChar  -  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  firstChar  -  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  firstChar  -  1);	  int    end    =    input.indexOf('n',    start    -    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
44	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  index  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  index  -  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  index  -  1);	  int    end    =    input.indexOf('n',    start    -    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
45	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(index,  start);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(index,  start);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(index,  start);	  Integer    input    =    input.subSequence(start,    start);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
46	[BUG]  [BUGGY]  char  input  =  firstChar.getValue();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  input  =  firstChar.getValue();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  input  =  firstChar.getValue();	  Integer    input    =    firstChar.getValue();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
47	[BUG]  [BUGGY]  Integer  input  =  input.getAscent()  /  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscent()  /  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscent()  /  1;	  Integer    input    =    input.getAscent()    +    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
48	[BUG]  [BUGGY]  char  end  =  input.indexOf('n',  firstChar);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  input.indexOf('n',  firstChar);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.indexOf('n',  firstChar);	  char    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
49	[BUG]  [BUGGY]  String  end  =  input.indexOf('n',  start);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  String  end  =  input.indexOf('n',  start);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	String  end  =  input.indexOf('n',  start);	  char    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
50	[BUG]  [BUGGY]  char  end  =  input.indexOf('n',  start  +  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  input.indexOf('n',  start  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.indexOf('n',  start  +  1);	  char    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
51	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscent()  +  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getAscent()  +  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getAscent()  +  1;	  Integer    input    =    firstChar.getAscent();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
52	[BUG]  [BUGGY]  char  input  =  firstChar.getAscent();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  input  =  firstChar.getAscent();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  input  =  firstChar.getAscent();	  Integer    input    =    firstChar.getAscent();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
53	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscent()  -  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getAscent()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getAscent()  -  1;	  Integer    input    =    firstChar.getAscent();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
54	[BUG]  [BUGGY]  Integer  input  =  input.getInt()  -  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getInt()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getInt()  -  1;	  Integer    input    =    input.getInt();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
55	[BUG]  [BUGGY]  Integer  input  =  firstChar.getInt();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getInt();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getInt();	  Integer    input    =    input.getInt();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
56	[BUG]  [BUGGY]  Integer  input  =  input.getLong();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getLong();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getLong();	  Integer    input    =    input.getInt();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
57	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  index).toString(),  16;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  entityValue  =  input.subSequence(start,  index).toString(),  16;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  entityValue  =  input.subSequence(start,  index).toString(),  16;	  Integer    entityValue    =    input.subSequence(start,    index).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
58	[BUG]  [BUGGY]  Integer  input  =  input.getImplicitValue();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getImplicitValue();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getImplicitValue();	  Integer    input    =    input.getLongValue();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
59	[BUG]  [BUGGY]  Integer  input  =  input.getUpperBound();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getUpperBound();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getUpperBound();	  Integer    input    =    input.getLongValue();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
60	[BUG]  [BUGGY]  char  end  =  input.charAt(start  +  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  input.charAt(start  +  2);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.charAt(start  +  2);	  char    end    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
61	[BUG]  [BUGGY]  int  end  =  index  +  4;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  index  +  4;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  index  +  4;	  int    end    =    index    +    3;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
62	[BUG]  [BUGGY]  Integer  input  =  input.substring(start);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.substring(start);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(start);	  Integer    input    =    input.substring(1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
63	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  -  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(start,  index  -  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start,  index  -  1);	  Integer    input    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
64	[BUG]  [BUGGY]  Integer  input  =  input.substring(start,  index  +  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.substring(start,  index  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(start,  index  +  1);	  Integer    input    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
65	[BUG]  [BUGGY]  String  end  =  0;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  String  end  =  0;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	String  end  =  0;	  char    end    =    0;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
66	[BUG]  [BUGGY]  char  end  =  '0';  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  '0';  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  '0';	  char    end    =    0;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
67	[BUG]  [BUGGY]  char  end  =  0L;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  0L;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  0L;	  char    end    =    0;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
68	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  1);	  Integer    entityValue    =    input.subSequence(start,    0);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
69	[BUG]  [BUGGY]  Integer  input  =  firstChar.getValue()  -  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getValue()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getValue()  -  1;	  Integer    input    =    input.getValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
70	[BUG]  [BUGGY]  Integer  input  =  input.getKey()  -  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getKey()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getKey()  -  1;	  Integer    input    =    input.getValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
71	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
72	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  16);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
73	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  10);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  10);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index).toString(),  10);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
74	[BUG]  [BUGGY]  int  end  =  start  +  2;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  start  +  2;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  start  +  2;	  int    end    =    index    +    2;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl()  -  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentImpl()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentImpl()  -  1;	  Integer    input    =    input.getAscentImpl();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
76	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl()  +  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentImpl()  +  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentImpl()  +  1;	  Integer    input    =    input.getAscentImpl();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
77	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscentImpl();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getAscentImpl();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getAscentImpl();	  Integer    input    =    input.getAscentImpl();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
78	[BUG]  [BUGGY]  Integer  input  =  input.substring(start  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.substring(start  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(start  +  1);	  Integer    input    =    input.subSequence(index    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
79	[BUG]  [BUGGY]  int  start  =  0;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  start  =  0;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  start  =  0;	  int    start    =    index    +    2;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
80	[BUG]  [BUGGY]  char  end  =  -1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  -1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  -1;	  int    end    =    -1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
81	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start  +  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(start  +  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start  +  2);	  Integer    input    =    input.subSequence(start    +    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
82	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException(start  +  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start  +  2);	  nfe    =    input.getNumberFormatException(start    +    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
83	[BUG]  [BUGGY]  Integer  input  =  input.substring(start,  index  +  2);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.substring(start,  index  +  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(start,  index  +  2);	  Integer    input    =    input.substring(start,    index);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
84	[BUG]  [BUGGY]  Integer  input  =  input.substring(0,  index);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.substring(0,  index);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(0,  index);	  Integer    input    =    input.substring(start,    index);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
85	[BUG]  [BUGGY]  Integer  input  =  input.substring(start,  index  -  1);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.substring(start,  index  -  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(start,  index  -  1);	  Integer    input    =    input.substring(start,    index);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
86	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  3);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  3);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  3);	  Integer    entityValue    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
87	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)+  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)+  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1)+  1;	  Integer    entityValue    =    input.subSequence(start,    index    +    1).toString();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
88	[BUG]  [BUGGY]  Integer  input  =  input.getValue()  /  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getValue()  /  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getValue()  /  1;	  Integer    input    =    input.getValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
89	[BUG]  [BUGGY]  Integer  input  =  firstChar.getKey();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getKey();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getKey();	  Integer    input    =    input.getKey();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
90	[BUG]  [BUGGY]  int  end  =  output.length();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  output.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  output.length();	  int    end    =    input.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
91	[BUG]  [BUGGY]  Integer  input  =  firstChar.getIntValue()  -  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  firstChar.getIntValue()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getIntValue()  -  1;	  Integer    input    =    input.getIntValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
92	[BUG]  [BUGGY]  Integer  input  =  input.getIntValue()  *  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getIntValue()  *  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getIntValue()  *  1;	  Integer    input    =    input.getIntValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
93	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  16;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
94	[BUG]  [BUGGY]  Integer  input  =  input.getIntValue()  /  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getIntValue()  /  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getIntValue()  /  1;	  Integer    input    =    input.getIntValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
95	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException( " ".equals(firstChar))?  null  :  input.getNumberFormatException( " ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException( " ".equals(firstChar))?  null  :  input.getNumberFormatException( " ");  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException( " ".equals(firstChar))?  null  :  input.getNumberFormatException( " ");	  nfe    =    input.getNumberFormatException(   "   ");    	non-compiled	[CE]  <identifier>  expected	74	None	replace
96	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException( " ".equals(firstChar));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException( " ".equals(firstChar));  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException( " ".equals(firstChar));	  nfe    =    input.getNumberFormatException(   "   ");    	non-compiled	[CE]  <identifier>  expected	74	None	replace
97	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  start  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  entityValue  =  input.subSequence(start,  start  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  entityValue  =  input.subSequence(start,  start  +  1);	  int    entityValue    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
98	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  17;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
99	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  start  +  3);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  start  +  3);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  start  +  3);	  int    end    =    input.indexOf('n',    start    +    1);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
100	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  16);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  16);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  16);	  Integer    entityValue    =    input.subSequence(start,    0);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
101	[BUG]  [BUGGY]  Integer  end  =  input.length();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  end  =  input.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  end  =  input.length();	  int    end    =    input.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
102	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start,  start  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException(start,  start  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start,  start  +  1);	  nfe    =    input.getNumberFormatException(start    +    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
103	[BUG]  [BUGGY]  int  end  =  1  <  <  input.length()  &&  input.charAt(start  +  1)  ==  '#')  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  1  <  <  input.length()  &&  input.charAt(start  +  1)  ==  '#')  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  1  <  <  input.length()  &&  input.charAt(start  +  1)  ==  '#')	  int    end    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
104	[BUG]  [BUGGY]  int  end  =  1  <  <  input.length()  &&  input.charAt(start  +  1)  ==  ';');  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  1  <  <  input.length()  &&  input.charAt(start  +  1)  ==  ';');  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  1  <  <  input.length()  &&  input.charAt(start  +  1)  ==  ';');	  int    end    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
105	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  start  +  1);	  Integer    entityValue    =    input.subSequence(start,    start);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
106	[BUG]  [BUGGY]  Integer  input  =  input.substring(start,  start);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.substring(start,  start);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(start,  start);	  Integer    input    =    input.substring(start,    index);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
107	[BUG]  [BUGGY]  Integer  input  =  input.getInt()  +  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getInt()  +  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getInt()  +  1;	  Integer    input    =    input.getInt();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
108	[BUG]  [BUGGY]  Integer  input  =  input.getImpl();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getImpl();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getImpl();	  Integer    input    =    input.getInt();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
109	[BUG]  [BUGGY]  int  input  =  input.subSequence(start  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  input  =  input.subSequence(start  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  input  =  input.subSequence(start  +  1);	  Integer    input    =    input.subSequence(index    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
110	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start).toString(),  10;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start).toString(),  10;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  start).toString(),  10;	  Integer    entityValue    =    input.subSequence(start,    index).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
111	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start,  start);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException(start,  start);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start,  start);	  nfe    =    input.getNumberFormatException(start,    index);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
112	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start,  index  +  2);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException(start,  index  +  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start,  index  +  2);	  nfe    =    input.getNumberFormatException(start,    index);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
113	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl(start);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentImpl(start);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentImpl(start);	  Integer    input    =    input.getAscentImpl();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
114	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start  +  2);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  start  +  2);	  Integer    entityValue    =    input.subSequence(start,    index    +    2);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
115	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(0);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(0);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(0);	  Integer    input    =    input.subSequence(index);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
116	[BUG]  [BUGGY]  char  end  =  input.charAt(2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  input.charAt(2);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.charAt(2);	  char    end    =    input.charAt(1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
117	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
118	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
119	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start).toString(),  10);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start).toString(),  10);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  start).toString(),  10);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
120	[BUG]  [BUGGY]  char  end  =  input.indexOf('n',  index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  input.indexOf('n',  index);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.indexOf('n',  index);	  int    end    =    input.indexOf('n',    index);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
121	[BUG]  [BUGGY]  int  input  =  firstChar.getAscent();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  input  =  firstChar.getAscent();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  input  =  firstChar.getAscent();	  Integer    input    =    firstChar.getAscent();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
122	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException( ", ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException( ", ");  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException( ", ");	  nfe    =    input.getNumberFormatException(   "   ");    	non-compiled	[CE]  <identifier>  expected	74	None	replace
123	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException( ".000 ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException( ".000 ");  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException( ".000 ");	  nfe    =    input.getNumberFormatException(   "   ");    	non-compiled	[CE]  <identifier>  expected	74	None	replace
124	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)&  1).toString(),  16;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)&  1).toString(),  16;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1)&  1).toString(),  16;	  Integer    entityValue    =    input.subSequence(start,    index    +    1).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
125	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)/  1).toString(),  16;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)/  1).toString(),  16;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1)/  1).toString(),  16;	  Integer    entityValue    =    input.subSequence(start,    index    +    1).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
126	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  start  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(start,  start  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start,  start  +  1);	  Integer    input    =    input.subSequence(start,    start);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
127	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  0);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(start,  0);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start,  0);	  Integer    input    =    input.subSequence(start,    start);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
128	[BUG]  [BUGGY]  Integer  input  =  input.getAscentInt()  *  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentInt()  *  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentInt()  *  1;	  Integer    input    =    input.getAscentInt()    -    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
129	[BUG]  [BUGGY]  Integer  input  =  input.substring(2)  +  1;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.substring(2)  +  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(2)  +  1;	  Integer    input    =    input.substring(2);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
130	[BUG]  [BUGGY]  int  end  =  start  +  3;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  start  +  3;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  start  +  3;	  int    end    =    index    +    3;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
131	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  1  -  start);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  1  -  start);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start,  index  +  1  -  start);	  Integer    input    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
132	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start  -  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  start  -  1);	  Integer    entityValue    =    input.subSequence(start,    index    -    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
133	[BUG]  [BUGGY]  char  end  =  input.indexOf('n',  index  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  input.indexOf('n',  index  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.indexOf('n',  index  +  1);	  int    end    =    input.indexOf('n',    index    +    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
134	[BUG]  [BUGGY]  Integer  input  =  input.getAscentIndex(start);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentIndex(start);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentIndex(start);	  Integer    input    =    input.getAscentIndex();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
135	[BUG]  [BUGGY]  Char  end  =  input.length();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Char  end  =  input.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Char  end  =  input.length();	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
136	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)&  1).toString();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)&  1).toString();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1)&  1).toString();	  Integer    entityValue    =    input.subSequence(start,    index    +    1).toString();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
137	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)/  1).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)/  1).toString();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1)/  1).toString();	  Integer    entityValue    =    input.subSequence(start,    index    +    1).toString();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
138	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  start  -  1  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.indexOf('n',  start  -  1  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  start  -  1  +  1);	  int    end    =    input.indexOf('n',    start    -    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
139	[BUG]  [BUGGY]  Integer  input  =  input.getAsInt();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAsInt();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAsInt();	  Integer    input    =    input.getKey();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
140	[BUG]  [BUGGY]  int  entityValue  =  input.charAt(start,  index  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  entityValue  =  input.charAt(start,  index  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  entityValue  =  input.charAt(start,  index  +  1);	  int    entityValue    =    input.subSequence(start,    index    +    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
141	[BUG]  [BUGGY]  int  start  =  input.length();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  start  =  input.length();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  start  =  input.length();	  int    start    =    index    +    2;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
142	[BUG]  [BUGGY]  int  end  =  1  <  <  input.length()  &&  input.charAt(start  +  1)  ==  '#')  {  start++;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  1  <  <  input.length()  &&  input.charAt(start  +  1)  ==  '#')  {  start++;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  1  <  <  input.length()  &&  input.charAt(start  +  1)  ==  '#')  {  start++;	  int    end    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
143	[BUG]  [BUGGY]  int  input  =  firstChar.getValue();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  input  =  firstChar.getValue();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  input  =  firstChar.getValue();	  Integer    input    =    firstChar.getValue();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
144	[BUG]  [BUGGY]  Integer  input  =  input.getImplicitReturn();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getImplicitReturn();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getImplicitReturn();	  Integer    input    =    input.getInt();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
145	[BUG]  [BUGGY]  Integer  input  =  input.getImmediateParentPointer();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getImmediateParentPointer();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getImmediateParentPointer();	  Integer    input    =    input.getAssignedValue();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
146	[BUG]  [BUGGY]  Integer  input  =  input.substring(start,  index  +  3);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.substring(start,  index  +  3);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(start,  index  +  3);	  Integer    input    =    input.substring(start,    index);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
147	[BUG]  [BUGGY]  Integer  input  =  input.getAscentIndex(index);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentIndex(index);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentIndex(index);	  Integer    input    =    input.getAscentIndex();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
148	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)/.toString();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1)/.toString();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1)/.toString();	  Integer    entityValue    =    input.subSequence(start,    index    +    1).toString();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
149	[BUG]  [BUGGY]  char  end  =  0x7F;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  char  end  =  0x7F;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  0x7F;	  char    end    =    0;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
150	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException( " ",  firstChar);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException( " ",  firstChar);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException( " ",  firstChar);	  nfe    =    input.getNumberFormatException(   "   ");    	non-compiled	[CE]  <identifier>  expected	74	None	replace
151	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf('n',  index  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  end  =  input.lastIndexOf('n',  index  +  1);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.lastIndexOf('n',  index  +  1);	  int    end    =    input.indexOf('n',    index    +    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
152	[BUG]  [BUGGY]  Integer  input  =  input.getImmediateParentPointer()  -  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getImmediateParentPointer()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getImmediateParentPointer()  -  1;	  Integer    input    =    input.getValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
153	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  0).toString(),  10;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  0).toString(),  10;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  0).toString(),  10;	  Integer    entityValue    =    input.subSequence(start,    index).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
154	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start).toString(),  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start).toString(),  16);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  start).toString(),  16);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
155	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl(index);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getAscentImpl(index);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentImpl(index);	  Integer    input    =    input.getAscentImpl();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
156	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start,  isHex);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  nfe  =  input.getNumberFormatException(start,  isHex);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start,  isHex);	  nfe    =    input.getNumberFormatException(start);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
157	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start).toString(),  16;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start).toString(),  16;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  start).toString(),  16;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
158	[BUG]  [BUGGY]  int  input  =  firstChar.getIntValue();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  int  input  =  firstChar.getIntValue();  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  input  =  firstChar.getIntValue();	  Integer    input    =    firstChar.getIntValue();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
159	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start  +  1,  index);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.subSequence(start  +  1,  index);  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start  +  1,  index);	  Integer    input    =    input.subSequence(start    +    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
160	[BUG]  [BUGGY]  Integer  input  =  input.getLongValue()  -  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getLongValue()  -  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getLongValue()  -  1;	  Integer    input    =    input.getIntValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
161	[BUG]  [BUGGY]  Integer  input  =  input.getKey()  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Integer  input  =  input.getKey()  +  1;  [BUGGY]      int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getKey()  +  1;	  Integer    input    =    input.getValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
162	[BUG]  [BUGGY]  Char  end  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Char  end  =  input.charAt(0);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Char  end  =  input.charAt(0);	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
163	[BUG]  [BUGGY]  Char  end  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }      [BUGGY]  Char  end  =  input.charAt(start);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Char  end  =  input.charAt(start);	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
