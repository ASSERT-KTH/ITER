bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  nfe  =  input.getNumberFormatException(start);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start);	      nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
2	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(index);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  nfe  =  input.getNumberFormatException(index);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(index);	      nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
3	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start,  index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  nfe  =  input.getNumberFormatException(start,  index);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start,  index);	      nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
4	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(index  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  nfe  =  input.getNumberFormatException(index  +  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(index  +  1);	      nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
5	[BUG]  [BUGGY]  char  end  =  0;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  char  end  =  0;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  0;	  int    end    =    0;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
6	[BUG]  [BUGGY]  int  end  =  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  1;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  1;	  int    end    =    0;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
7	[BUG]  [BUGGY]  int  end  =  -1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  -1;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  -1;	  int    end    =    0;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  int  end  =  index  +  2;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  index  +  2;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  index  +  2;	  int    end    =    index    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  int  end  =  index  +  3;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  index  +  3;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  index  +  3;	  int    end    =    index    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  int  end  =  start  +  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  start  +  1;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  start  +  1;	  int    end    =    index    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  Integer  input  =  input.getIntValue()  +  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getIntValue()  +  1;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getIntValue()  +  1;	      Integer    input    =    input.getIntValue();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  Integer  input  =  input.getIntValue()  -  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getIntValue()  -  1;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getIntValue()  -  1;	      Integer    input    =    input.getIntValue();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  Integer  input  =  firstChar.getIntValue();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  firstChar.getIntValue();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getIntValue();	      Integer    input    =    input.getIntValue();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
14	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  firstChar);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  input.indexOf('n',  firstChar);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  firstChar);	      int    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
15	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  start  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  input.indexOf('n',  start  +  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  start  +  1);	      int    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
16	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  index  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  input.indexOf('n',  index  +  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  index  +  1);	      int    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
17	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  input.indexOf('n',  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  1);	      int    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
18	[BUG]  [BUGGY]  Integer  input  =  input.getValue()  -  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getValue()  -  1;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getValue()  -  1;	      Integer    input    =    input.getValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  Integer  input  =  input.getValue()  +  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getValue()  +  1;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getValue()  +  1;	      Integer    input    =    input.getValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  Integer  input  =  firstChar.getValue();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  firstChar.getValue();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getValue();	      Integer    input    =    input.getValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1).toString();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1).toString();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1).toString();	      Integer    entityValue    =    input.subSequence(start,    index).toString();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
22	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString()  +  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString()  +  1;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index).toString()  +  1;	      Integer    entityValue    =    input.subSequence(start,    index).toString();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
23	[BUG]  [BUGGY]  Integer  input  =  input.getAscent()  +  1;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getAscent()  +  1;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscent()  +  1;	      Integer    input    =    input.getAscent();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
24	[BUG]  [BUGGY]  Integer  input  =  input.getAscent()  -  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getAscent()  -  1;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscent()  -  1;	      Integer    input    =    input.getAscent();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
25	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscent();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  firstChar.getAscent();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getAscent();	      Integer    input    =    input.getAscent();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
26	[BUG]  [BUGGY]  int  end  =  input.length()  -  1;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  input.length()  -  1;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.length()  -  1;	  int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
27	[BUG]  [BUGGY]  int  end  =  input.length()  +  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  input.length()  +  1;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.length()  +  1;	  int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
28	[BUG]  [BUGGY]  char  end  =  input.length();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  char  end  =  input.length();  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.length();	  int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
29	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  10;  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  10;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index).toString(),  10;	      Integer    entityValue    =    input.subSequence(start,    index).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  8;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  8;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index).toString(),  8;	      Integer    entityValue    =    input.subSequence(start,    index).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  12;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  12;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index).toString(),  12;	      Integer    entityValue    =    input.subSequence(start,    index).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  4;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString(),  4;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index).toString(),  4;	      Integer    entityValue    =    input.subSequence(start,    index).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  Integer  input  =  input.substring(1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.substring(1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(1);	      Integer    input    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
34	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.subSequence(start,  index);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start,  index);	      Integer    input    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
35	[BUG]  [BUGGY]  Integer  input  =  input.substring(2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.substring(2);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(2);	      Integer    input    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  Integer  input  =  input.substring(start,  index);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.substring(start,  index);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.substring(start,  index);	      Integer    input    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
37	[BUG]  [BUGGY]  int  start  =  index  +  2;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  start  =  index  +  2;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  start  =  index  +  2;	      int    start    =    index    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  int  start  =  index  +  3;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  start  =  index  +  3;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  start  =  index  +  3;	      int    start    =    index    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  int  start  =  index  +  4;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  start  =  index  +  4;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  start  =  index  +  4;	      int    start    =    index    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  char  end  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  char  end  =  input.charAt(start  +  1);  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.charAt(start  +  1);	  char    end    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  char  end  =  input.charAt(index  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  char  end  =  input.charAt(index  +  2);  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.charAt(index  +  2);	  char    end    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
42	[BUG]  [BUGGY]  char  end  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  char  end  =  input.charAt(0);  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.charAt(0);	  char    end    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
43	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1);	      Integer    entityValue    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  -  1);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  -  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  -  1);	      Integer    entityValue    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  2);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  2);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  2);	      Integer    entityValue    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  index  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  entityValue  =  input.subSequence(start,  index  +  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  entityValue  =  input.subSequence(start,  index  +  1);	      Integer    entityValue    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  char  end  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  char  end  =  input.charAt(start);  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.charAt(start);	  char    end    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
48	[BUG]  [BUGGY]  char  end  =  input.charAt(1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  char  end  =  input.charAt(1);  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.charAt(1);	  char    end    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
49	[BUG]  [BUGGY]  Integer  input  =  input.getAscentInt()  -  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getAscentInt()  -  1;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentInt()  -  1;	      Integer    input    =    input.getAscentInt();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
50	[BUG]  [BUGGY]  Integer  input  =  input.getAscentInt()  +  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getAscentInt()  +  1;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentInt()  +  1;	      Integer    input    =    input.getAscentInt();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
51	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscentInt();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  firstChar.getAscentInt();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  firstChar.getAscentInt();	      Integer    input    =    input.getAscentInt();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
52	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
54	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
55	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.subSequence(start  +  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start  +  1);	      Integer    input    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
56	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  start);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.subSequence(start,  start);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start,  start);	      Integer    input    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
57	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(start,  index  +  1);	      Integer    input    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
58	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  nfe  =  input.getNumberFormatException(start  +  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException(start  +  1);	      nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
59	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  start  -  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  input.indexOf('n',  start  -  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  start  -  1);	      int    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
60	[BUG]  [BUGGY]  char  end  =  input.indexOf('n',  start);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  char  end  =  input.indexOf('n',  start);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	char  end  =  input.indexOf('n',  start);	      int    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
61	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getAscentImpl();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentImpl();	      Integer    input    =    input.getAscent();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
62	[BUG]  [BUGGY]  Integer  input  =  input.getAscentIndex();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getAscentIndex();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentIndex();	      Integer    input    =    input.getAscentInt();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
63	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  start);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  start);	      Integer    entityValue    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
64	[BUG]  [BUGGY]  Integer  input  =  input.getLongValue();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getLongValue();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getLongValue();	      Integer    input    =    input.getIntValue();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
65	[BUG]  [BUGGY]  Integer  input  =  input.getAscentValue();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getAscentValue();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAscentValue();	      Integer    input    =    input.getValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
66	[BUG]  [BUGGY]  Integer  input  =  input.getAssignedValue();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getAssignedValue();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getAssignedValue();	      Integer    input    =    input.getValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
67	[BUG]  [BUGGY]  Integer  input  =  input.getKey();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getKey();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getKey();	      Integer    input    =    input.getValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
68	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1).toString(),  16;  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  1).toString(),  16;  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  1).toString(),  16;	      Integer    entityValue    =    input.subSequence(start,    index).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
69	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  0);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  0);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  0);	      Integer    entityValue    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
70	[BUG]  [BUGGY]  int  end  =  input.indexOf('n',  index);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  int  end  =  input.indexOf('n',  index);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	int  end  =  input.indexOf('n',  index);	      int    end    =    input.indexOf('n',    start);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
71	[BUG]  [BUGGY]  String  end  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  String  end  =  input.charAt(index  +  1);  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	String  end  =  input.charAt(index  +  1);	  char    end    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
72	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(index);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.subSequence(index);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(index);	      Integer    input    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
73	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(index  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.subSequence(index  +  1);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.subSequence(index  +  1);	      Integer    input    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
74	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException( " ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  nfe  =  input.getNumberFormatException( " ");  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	nfe  =  input.getNumberFormatException( " ");	      nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
75	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
76	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  2).toString();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index  +  2).toString();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  entityValue  =  input.subSequence(start,  index  +  2).toString();	      Integer    entityValue    =    input.subSequence(start,    index).toString();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
77	[BUG]  [BUGGY]  Integer  input  =  input.getInt();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    if(input.charAt(index)  ==  '&'  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }    [BUGGY]  Integer  input  =  input.getInt();  [BUGGY]    int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	Integer  input  =  input.getInt();	      Integer    input    =    input.getAscent();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
