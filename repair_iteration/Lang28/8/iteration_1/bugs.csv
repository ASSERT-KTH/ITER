bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }		non-compiled	[CE]  <identifier>  expected	17	None	add
2	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    char  firstChar  =  input.charAt(start);  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    char  firstChar  =  input.charAt(start);		non-compiled	[CE]  <identifier>  expected	17	None	add
3	[BUG]  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16;		non-compiled	[CE]  <identifier>  expected	17	None	add
4	[BUG]  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString();  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    Integer  entityValue  =  input.subSequence(start,  end).toString();		non-compiled	[CE]  <identifier>  expected	17	None	add
5	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }		non-compiled	[CE]  <identifier>  expected	17	None	add
6	[BUG]  [BUGGY]  int  end  =  input.length();  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  int  end  =  input.length();  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.length();	end++;  	non-compiled	[CE]  <identifier>  expected	16	None	replace
7	[BUG]  [BUGGY]  if(!isHex)  {  end++;  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  if(!isHex)  {  end++;  }  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  end++;  }	end++;  	non-compiled	[CE]  <identifier>  expected	16	None	replace
8	[BUG]  [BUGGY]  int  end  =  input.indexOf(';');  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  int  end  =  input.indexOf(';');  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';');	end++;  	non-compiled	[CE]  <identifier>  expected	16	None	replace
9	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    char  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    char  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }		non-compiled	[CE]  <identifier>  expected	17	None	add
10	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(start);  if(firstChar!=  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    char  firstChar  =  input.charAt(start);  if(firstChar!=  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    char  firstChar  =  input.charAt(start);  if(firstChar!=  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }		non-compiled	[CE]  <identifier>  expected	17	None	add
11	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    char  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    char  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }		non-compiled	[CE]  <identifier>  expected	17	None	add
12	[BUG]  [BUGGY]  end  =  input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  end  =  input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	end++;  	non-compiled	[CE]  <identifier>  expected	16	None	replace
13	[BUG]  [BUGGY]  end  =  input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  end  =  input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	end++;  	non-compiled	[CE]  <identifier>  expected	16	None	replace
14	[BUG]  [BUGGY]  end  =  input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul=  end;  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  end  =  input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul=  end;  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul=  end;	end++;  	non-compiled	[CE]  <identifier>  expected	16	None	replace
15	[BUG]  [BUGGY]    if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  }		non-compiled	[CE]  <identifier>  expected	17	None	add
16	[BUG]  [BUGGY]    if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }		non-compiled	[CE]  <identifier>  expected	17	None	add
17	[BUG]  [BUGGY]    if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }		non-compiled	[CE]  <identifier>  expected	17	None	add
18	[BUG]  [BUGGY]    if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	    if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }		non-compiled	[CE]  <identifier>  expected	17	None	add
19	[BUG]  [BUGGY]  end  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  end  =  input.charAt(end);  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end);	end++;  	non-compiled	[CE]  <identifier>  expected	16	None	replace
20	[BUG]  [BUGGY]  end  =  input.charAt(end)-  1;  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  end  =  input.charAt(end)-  1;  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end)-  1;	end++;  	non-compiled	[CE]  <identifier>  expected	16	None	replace
