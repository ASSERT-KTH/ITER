bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(end);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(end);	      char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(start  +  1);	      char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(index);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(index);	      char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(0);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(0);	      char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  String  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  String  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	String  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	      char    firstChar    =    input.charAt(end);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  end    =    input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul=    end;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
7	[BUG]  [BUGGY]  =uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  =uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	=uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  end    =    input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul=    end;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
8	[BUG]  [BUGGY]  Oiluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Oiluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Oiluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  end    =    input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul=    end;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
9	[BUG]  [BUGGY]  $uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  $uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	$uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  end    =    input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul=    end;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
10	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
11	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
12	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
13	[BUG]  [BUGGY]  while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(start,  end);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(start,  end);	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
14	[BUG]  [BUGGY]  int  end  =  input.length()  -  1;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  end  =  input.length()  -  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.length()  -  1;	  int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  int  end  =  input.length()  +  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  end  =  input.length()  +  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.length()  +  1;	  int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  int  end  =  input.length()  -  2;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  end  =  input.length()  -  2;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.length()  -  2;	  int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
17	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
18	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
19	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
20	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(end)!=  ';')  {  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
21	[BUG]  [BUGGY]  end  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(start);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(start);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
22	[BUG]  [BUGGY]  char  end  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  end  =  input.charAt(end);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.charAt(end);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
23	[BUG]  [BUGGY]  end  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(index);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(index);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
24	[BUG]  [BUGGY]  if(isHex)  {  end++;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(isHex)  {  end++;  }  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  end++;  }	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
25	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  =  input.subSequence(start,  end);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end);	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  =  input.subSequence(start,  end).toString();  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end).toString();	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  end  =  input.indexOf(';',  firstChar);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  firstChar);	  int    end    =    input.indexOf(';');    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  start);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  end  =  input.indexOf(';',  start);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  start);	  int    end    =    input.indexOf(';');    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  end  =  input.indexOf(';',  1);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  1);	  int    end    =    input.indexOf(';');    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  0);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  end  =  input.indexOf(';',  0);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  0);	  int    end    =    input.indexOf(';');    	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString()  +  1;	      Integer    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);	      Integer    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  String  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  String  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	String  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	      char    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
37	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  9;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  9;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  9;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	      if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
39	[BUG]  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	      if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
40	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;	      if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
41	[BUG]  [BUGGY]  if(isHex)  {  if(end!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(isHex)  {  if(end!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(end!=  ';')  {  start++;  isHex  =  true;  }	      if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
42	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }	      char    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  String  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  String  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	String  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }	      char    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }	      char    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  end  =  input.charAt(end)/  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end)/  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end)/  1;	  end    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
46	[BUG]  [BUGGY]  end  =  input.charAt(start)-  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(start)-  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(start)-  1;	  end    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
47	[BUG]  [BUGGY]  char  end  =  input.charAt(end)-  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  end  =  input.charAt(end)-  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.charAt(end)-  1;	  end    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
48	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
49	[BUG]  [BUGGY]  if(!isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(!isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
50	[BUG]  [BUGGY]  if(isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
51	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	      char    firstChar    =    input.charAt(index);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	      char    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	      char    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString()  +  10;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString()  +  10;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString()  +  10;	      Integer    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
55	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end);  if(firstChar!=  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(end);  if(firstChar!=  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(end);  if(firstChar!=  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	      char    firstChar    =    input.charAt(start);    if(firstChar!=    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
56	[BUG]  [BUGGY]  Espuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Espuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Espuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  end    =    input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul    	non-compiled	[CE]  <identifier>  expected	12	None	replace
57	[BUG]  [BUGGY]  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	      if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
58	[BUG]  [BUGGY]  if(!isHex)  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(!isHex)  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	      if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
59	[BUG]  [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	      if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
60	[BUG]  [BUGGY]  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
61	[BUG]  [BUGGY]  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
62	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1)/  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end  -  1)/  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  -  1)/  1;	  end    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
63	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }	      char    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
64	[BUG]  [BUGGY]  Esculeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Esculeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Esculeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  end    =    input.charAt(end)uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul=    end;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
65	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end  -  1);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  -  1);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
66	[BUG]  [BUGGY]  end  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end  +  1);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  +  1);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
67	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  end  =  input.subSequence(start,  end);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  end  =  input.subSequence(start,  end);	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
68	[BUG]  [BUGGY]  End  end  =  input.subSequence(start);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  end  =  input.subSequence(start);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  end  =  input.subSequence(start);	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
69	[BUG]  [BUGGY]  char  end  =  input.length();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  end  =  input.length();  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.length();	  int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
70	[BUG]  [BUGGY]  int  end  =  input.indexOf(';')+  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  end  =  input.indexOf(';')+  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';')+  1;	  int    end    =    input.indexOf(';');    	non-compiled	[CE]  <identifier>  expected	8	None	replace
71	[BUG]  [BUGGY]  if(!isHex)  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(!isHex)  {  start++;  isHex  =  true;  }  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  start++;  isHex  =  true;  }	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
72	[BUG]  [BUGGY]  if(!isHex)  {  start++;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(!isHex)  {  start++;  }  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  start++;  }	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
73	[BUG]  [BUGGY]  end  =  input.charAt(end  +  1)-  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end  +  1)-  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  +  1)-  1;	  end    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
74	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);	      Integer    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
75	[BUG]  [BUGGY]  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
76	[BUG]  [BUGGY]  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end).toString();  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
77	[BUG]  [BUGGY]  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
78	[BUG]  [BUGGY]  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
79	[BUG]  [BUGGY]  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
80	[BUG]  [BUGGY]  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  }	      if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
81	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf(';');  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  end  =  input.lastIndexOf(';');  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.lastIndexOf(';');	  int    end    =    input.indexOf(';');    	non-compiled	[CE]  <identifier>  expected	8	None	replace
82	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	      char    firstChar    =    input.charAt(end);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
83	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }	      char    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
