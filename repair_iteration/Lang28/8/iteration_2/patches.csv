bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
2	[BUG]  [BUGGY]  while(input.charAt(index)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(index)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(index)!=  ';')  {  start++;  isHex  =  true;  }	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
3	[BUG]  [BUGGY]  while(input.charAt(end)  ==  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  ==  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  ==  ';')  {  start++;  isHex  =  true;  }	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
4	[BUG]  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(isHex)    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
5	[BUG]  [BUGGY]  if(isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(isHex)    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
6	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;	  if(isHex)    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
7	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  -1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  -1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  -1);	  int    end    =    input.indexOf(';',    0);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
8	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  index);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  index);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  index);	  int    end    =    input.indexOf(';',    0);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
9	[BUG]  [BUGGY]  if(isHex)  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  start++;  isHex  =  true;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  start++;  isHex  =  true;  }	  if(!isHex)    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
10	[BUG]  [BUGGY]  if(start  ==  'x'  ||  end  ==  'X')  {  if(!isHex)  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  'x'  ||  end  ==  'X')  {  if(!isHex)  {  start++;  isHex  =  true;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  'x'  ||  end  ==  'X')  {  if(!isHex)  {  start++;  isHex  =  true;  }	  if(!isHex)    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
11	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	  if(!isHex)    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
12	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  if(isHex)  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)!=  ';')  {  if(isHex)  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  if(isHex)  {  start++;  isHex  =  true;  }	  if(isHex)    {    if(end!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
13	[BUG]  [BUGGY]  if(isHex)  {  if(end!=  ';'  ||  end  ==  '-')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(end!=  ';'  ||  end  ==  '-')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(end!=  ';'  ||  end  ==  '-')  {  start++;  isHex  =  true;  }	  if(isHex)    {    if(end!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
14	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  2);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  2);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  2);	  int    end    =    input.indexOf(';',    1);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
15	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  16);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  16);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  16);	  int    end    =    input.indexOf(';',    1);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
16	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(first);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(first);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(first);	  char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
17	[BUG]  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(!isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(!isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(!isHex)  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(!isHex)    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
18	[BUG]  [BUGGY]  if(!isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(!isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(!isHex)    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
19	[BUG]  [BUGGY]  uleiouleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  uleiouleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	uleiouleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  Oiluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  Olivenuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Olivenuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Olivenuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  Oiluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul    	non-compiled	[CE]  <identifier>  expected	8	None	replace
21	[BUG]  [BUGGY]  nulluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  nulluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	nulluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  $uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul    	non-compiled	[CE]  <identifier>  expected	9	None	replace
22	[BUG]  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(!isHex)  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(!isHex)  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(!isHex)  {  start++;  isHex  =  true;  }	  if(!isHex)    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
23	[BUG]  [BUGGY]  if(!isHex)  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(!isHex)  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }	  if(!isHex)    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
24	[BUG]  [BUGGY]  while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(start,  end).toString();	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
25	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(start)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(start)!=  ';')  {	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
26	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end).toString();	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
27	[BUG]  [BUGGY]  while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);	  if(input.charAt(end)    ==    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
28	[BUG]  [BUGGY]  int  end  =  output.length();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  output.length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  output.length();	  int    end    =    input.length()    -    2;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
29	[BUG]  [BUGGY]  if(isHex)  {  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start!=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
30	[BUG]  [BUGGY]  if(start!=  'x'  ||  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start!=  'x'  ||  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start!=  'x'  ||  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start!=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
31	[BUG]  [BUGGY]  if(isHex)  {  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start!=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
32	[BUG]  [BUGGY]  if(input.charAt(start)!=  ';')  {  if(end!=  'x'  &&  end  <  =  'z')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(input.charAt(start)!=  ';')  {  if(end!=  'x'  &&  end  <  =  'z')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input.charAt(start)!=  ';')  {  if(end!=  'x'  &&  end  <  =  'z')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start!=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
33	[BUG]  [BUGGY]  end  =  input.charAt(end)/  2;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)/  2;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end)/  2;	  end    =    input.charAt(end)/    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
34	[BUG]  [BUGGY]  end  =  input.charAt(start)/  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(start)/  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(start)/  1;	  end    =    input.charAt(end)/    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
35	[BUG]  [BUGGY]  end  =  input.charAt(end)/  3;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)/  3;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end)/  3;	  end    =    input.charAt(end)/    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
36	[BUG]  [BUGGY]  end  =  input.charAt(end)/  4;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)/  4;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end)/  4;	  end    =    input.charAt(end)/    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
37	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end  +  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(end  +  1);	  char    firstChar    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
38	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(start  +  2);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(start  +  2);	  char    firstChar    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
39	[BUG]  [BUGGY]  end  =  input.charAt(end)+  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)+  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end)+  1;	  end    =    input.charAt(end    +    1);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
40	[BUG]  [BUGGY]  end  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(start  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(start  +  1);	  end    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
41	[BUG]  [BUGGY]  while(in.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(in.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(in.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);	  while(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  char  end  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(start);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.charAt(start);	  char    end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
43	[BUG]  [BUGGY]  char  end  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(index);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.charAt(index);	  char    end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
44	[BUG]  [BUGGY]  char  end  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(end  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.charAt(end  +  1);	  char    end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
45	[BUG]  [BUGGY]  if(isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }	  if(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
46	[BUG]  [BUGGY]  while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(index,  end).toString();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(index,  end).toString();  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(index,  end).toString();  }	  while(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
47	[BUG]  [BUGGY]  while(input.charAt(start)  >=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(start)  >=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(start)  >=  ';')  {  input  =  input.subSequence(start,  end).toString();  }	  while(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
48	[BUG]  [BUGGY]  if(!isHex)  {  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(!isHex)  {  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(input.charAt(end)    ==    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
49	[BUG]  [BUGGY]  if(isHex)  {  if(end  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(end  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(end  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(input.charAt(end)    ==    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
50	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  end  =  input.subSequence(start,  end  +  1);	  End    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
51	[BUG]  [BUGGY]  End  end  =  input.subSequence(index,  end);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(index,  end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  end  =  input.subSequence(index,  end);	  End    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
52	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  end  =  input.subSequence(start,  end  -  1);	  End    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
53	[BUG]  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(firstChar  ==  'x'  ||  firstChar  ==  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
54	[BUG]  [BUGGY]  if(start  ==  'x'  ||  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  'x'  ||  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  'x'  ||  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
55	[BUG]  [BUGGY]  if(isHex)  {  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
56	[BUG]  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(end  <  =  'z')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(end  <  =  'z')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(end  <  =  'z')  {  start++;  isHex  =  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
57	[BUG]  [BUGGY]  while(input.charAt(index)!=  ';')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(index)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(index)!=  ';')  {	  while(input.charAt(end)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
58	[BUG]  [BUGGY]  while(input.charAt(end)  ==  ';')  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  ==  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  ==  ';')  {	  while(input.charAt(end)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
59	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
60	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  15);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  15);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  15);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
61	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf(';',  index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.lastIndexOf(';',  index);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.lastIndexOf(';',  index);	  int    end    =    input.lastIndexOf(';');    	non-compiled	[CE]  <identifier>  expected	81	None	replace
62	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf(';',  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.lastIndexOf(';',  16);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.lastIndexOf(';',  16);	  int    end    =    input.lastIndexOf(';');    	non-compiled	[CE]  <identifier>  expected	81	None	replace
63	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf(';',  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.lastIndexOf(';',  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.lastIndexOf(';',  1);	  int    end    =    input.lastIndexOf(';');    	non-compiled	[CE]  <identifier>  expected	81	None	replace
64	[BUG]  [BUGGY]  End  end  =  input.subSequence(index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(index);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  end  =  input.subSequence(index);	  End    end    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
65	[BUG]  [BUGGY]  End  end  =  input.subSequence(start  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  end  =  input.subSequence(start  +  1);	  End    end    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
66	[BUG]  [BUGGY]  End  end  =  input.subSequence(end);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  end  =  input.subSequence(end);	  End    end    =    input.subSequence(start);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
67	[BUG]  [BUGGY]  String  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  String  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	String  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }	  char    firstChar    =    input.charAt(end);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    false;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
68	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1)/  2;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  -  1)/  2;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  -  1)/  2;	  end    =    input.charAt(end    -    1)/    1;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
69	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1)/  4;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  -  1)/  4;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  -  1)/  4;	  end    =    input.charAt(end    -    1)/    1;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
70	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1)/  3;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  -  1)/  3;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  -  1)/  3;	  end    =    input.charAt(end    -    1)/    1;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
71	[BUG]  [BUGGY]  if(isHex)  {  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
72	[BUG]  [BUGGY]  if(start  ==  'x'  ||  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  'x'  ||  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  'x'  ||  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
73	[BUG]  [BUGGY]  if(isHex)  {  if(start  ==  'x'  ||  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(start  ==  'x'  ||  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(start  ==  'x'  ||  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
74	[BUG]  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'z')  {  if(end!=  'a'  &&  end  <  =  'z')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'z')  {  if(end!=  'a'  &&  end  <  =  'z')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(firstChar  ==  'x'  ||  firstChar  ==  'z')  {  if(end!=  'a'  &&  end  <  =  'z')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
75	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end).toString()  +  1;	  End    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
76	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end).toString(),  16;	  End    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
77	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end).toString(),  10);	  End    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
78	[BUG]  [BUGGY]  char  end  =  input.charAt(end)/  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(end)/  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.charAt(end)/  1;	  char    end    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
79	[BUG]  [BUGGY]  char  end  =  input.charAt(start)-  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(start)-  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.charAt(start)-  1;	  char    end    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
80	[BUG]  [BUGGY]  char  end  =  input.charAt(end  +  1)-  1;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(end  +  1)-  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.charAt(end  +  1)-  1;	  char    end    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
81	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  start  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  start  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  start  +  1);	  int    end    =    input.indexOf(';',    start);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
82	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  start++);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  start++);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  start++);	  int    end    =    input.indexOf(';',    start);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
83	[BUG]  [BUGGY]  end  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(index  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(index  +  1);	  end    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
84	[BUG]  [BUGGY]  int  end  =  input.indexOf(';')+  2;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';')+  2;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';')+  2;	  int    end    =    input.indexOf(';')+    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
85	[BUG]  [BUGGY]  int  end  =  input.indexOf(';')/  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';')/  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';')/  1;	  int    end    =    input.indexOf(';')+    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
86	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar)+  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  firstChar)+  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  firstChar)+  1;	  int    end    =    input.indexOf(';')+    1;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
87	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  firstChar  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  firstChar  +  1);	  int    end    =    input.indexOf(';',    firstChar);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
88	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  firstChar  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  firstChar  -  1);	  int    end    =    input.indexOf(';',    firstChar);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
89	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(index  +  1);	  char    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
90	[BUG]  [BUGGY]  if(isHex)  {  start++;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
91	[BUG]  [BUGGY]  ||  isHex)  {  start++;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  ||  isHex)  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	||  isHex)  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
92	[BUG]  [BUGGY]  while(!isHex)  {  start++;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(!isHex)  {  start++;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(!isHex)  {  start++;	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
93	[BUG]  [BUGGY]  end  =  input.charAt(index)-  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(index)-  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(index)-  1;	  end    =    input.charAt(start)-    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
94	[BUG]  [BUGGY]  end  =  input.charAt(start  -  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(start  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(start  -  1);	  end    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
95	[BUG]  [BUGGY]  end  =  input.charAt(end  +  1)/  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  +  1)/  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  +  1)/  1;	  end    =    input.charAt(end    +    1)-    1;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
96	[BUG]  [BUGGY]  end  =  input.charAt(start  +  1)-  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(start  +  1)-  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(start  +  1)-  1;	  end    =    input.charAt(end    +    1)-    1;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
97	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1)-  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  -  1)-  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  -  1)-  1;	  end    =    input.charAt(end    +    1)-    1;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
98	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
99	[BUG]  [BUGGY]  while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
100	[BUG]  [BUGGY]  String  end  =  input.length();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  String  end  =  input.length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	String  end  =  input.length();	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
101	[BUG]  [BUGGY]  char  end  =  input.length()  -  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.length()  -  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.length()  -  1;	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
102	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  firstChar  =  input.charAt(end);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }	  int    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    false;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
103	[BUG]  [BUGGY]  if(isHex)  {  if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(start    >=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
104	[BUG]  [BUGGY]  if(start  >=  'x'  ||  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  >=  'x'  ||  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  >=  'x'  ||  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(start    >=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
105	[BUG]  [BUGGY]  if(input.charAt(start)!=  ';')  {  if(end  >=  'x'  &&  end  <  =  'z')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(input.charAt(start)!=  ';')  {  if(end  >=  'x'  &&  end  <  =  'z')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input.charAt(start)!=  ';')  {  if(end  >=  'x'  &&  end  <  =  'z')  {  start++;  isHex  =  true;  }	  if(start    >=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
106	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  8);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
107	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  9);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  9);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  9);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
108	[BUG]  [BUGGY]  if(isHex)  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
109	[BUG]  [BUGGY]  if(isHex)  {  if(firstChar  ==  'X'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(firstChar  ==  'X'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(firstChar  ==  'X'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
110	[BUG]  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }	  if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
111	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
112	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end  +  1);	  End    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
113	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end  -  1);	  End    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
114	[BUG]  [BUGGY]  End  =  input.subSequence(index,  end);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(index,  end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(index,  end);	  End    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
115	[BUG]  [BUGGY]  End  =  input.subSequence(0,  end);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(0,  end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(0,  end);	  End    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
116	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
117	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';')  {  start++;  isHex  =  false;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)!=  ';')  {  start++;  isHex  =  false;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';')  {  start++;  isHex  =  false;	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
118	[BUG]  [BUGGY]  while(input.charAt(index)!=  ';')  {  start++;  isHex  =  true;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(index)!=  ';')  {  start++;  isHex  =  true;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(index)!=  ';')  {  start++;  isHex  =  true;	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
119	[BUG]  [BUGGY]  if(isHex)  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }	  if(!isHex)    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
120	[BUG]  [BUGGY]  if(start  ==  'x'  &&  end  <  =  'z')  {  if(!isHex)  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  'x'  &&  end  <  =  'z')  {  if(!isHex)  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  'x'  &&  end  <  =  'z')  {  if(!isHex)  {  start++;  isHex  =  true;  }	  if(!isHex)    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
121	[BUG]  [BUGGY]  if(isHex)  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(!isHex)    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
122	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end  -  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(end  -  1);	  char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
123	[BUG]  [BUGGY]  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
124	[BUG]  [BUGGY]  char  end  =  input.length()  +  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.length()  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.length()  +  1;	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
125	[BUG]  [BUGGY]  Char  end  =  input.length();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Char  end  =  input.length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Char  end  =  input.length();	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
126	[BUG]  [BUGGY]  if(!isHex)  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(!isHex)  {  start++;  isHex  =  false;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  start++;  isHex  =  false;  }	  if(!isHex)    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
127	[BUG]  [BUGGY]  if(start  >=  -1)  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  >=  -1)  {  start++;  isHex  =  true;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  >=  -1)  {  start++;  isHex  =  true;  }	  if(!isHex)    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
128	[BUG]  [BUGGY]  while(input.charAt(end)  ==  ';')  {  start++;  isHex  =  true;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  ==  ';')  {  start++;  isHex  =  true;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  ==  ';')  {  start++;  isHex  =  true;	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
129	[BUG]  [BUGGY]  while(input.charAt(end)  >=  ';')  {  start++;  isHex  =  true;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  >=  ';')  {  start++;  isHex  =  true;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  >=  ';')  {  start++;  isHex  =  true;	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
130	[BUG]  [BUGGY]  if(!isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(!isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  }	  if(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
131	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end);	  if(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
132	[BUG]  [BUGGY]  Illegaluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Illegaluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Illegaluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  Oiluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul    	non-compiled	[CE]  <identifier>  expected	8	None	replace
133	[BUG]  [BUGGY]  Oliveuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Oliveuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Oliveuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  Oiluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul    	non-compiled	[CE]  <identifier>  expected	8	None	replace
134	[BUG]  [BUGGY]  if(!isHex)  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(!isHex)  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex)  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
135	[BUG]  [BUGGY]  if(isHex)  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(isHex)  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(start)!=  ';')  {  start++;  isHex  =  true;  }	  if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
136	[BUG]  [BUGGY]  char  end  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(end  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  end  =  input.charAt(end  -  1);	  char    end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
137	[BUG]  [BUGGY]  if(!isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(!isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
138	[BUG]  [BUGGY]  if(!isHex  ||  firstChar  ==  'x'  ||  end  ==  ';')  {  start++;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(!isHex  ||  firstChar  ==  'x'  ||  end  ==  ';')  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex  ||  firstChar  ==  'x'  ||  end  ==  ';')  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
139	[BUG]  [BUGGY]  end  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(0);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(0);	  end    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
140	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  start  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  start  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  start  -  1);	  int    end    =    input.indexOf(';',    start);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
141	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  firstChar  =  input.charAt(index);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }	  char    firstChar    =    input.charAt(index);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    false;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
142	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf(';',  start);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.lastIndexOf(';',  start);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.lastIndexOf(';',  start);	  int    end    =    input.lastIndexOf(';');    	non-compiled	[CE]  <identifier>  expected	81	None	replace
143	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf(';',  -1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.lastIndexOf(';',  -1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.lastIndexOf(';',  -1);	  int    end    =    input.lastIndexOf(';');    	non-compiled	[CE]  <identifier>  expected	81	None	replace
144	[BUG]  [BUGGY]  while(input.charAt(end)  >=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  >=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  >=  ';')  {  start++;  isHex  =  true;  }	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
145	[BUG]  [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end  -  1)!=  ';')  {	  while(input.charAt(end)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
146	[BUG]  [BUGGY]  if(index  ==  -1)  {  if(input!=  null)  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(index  ==  -1)  {  if(input!=  null)  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(index  ==  -1)  {  if(input!=  null)  {  input  =  input.subSequence(start,  end).toString();  }	  if(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
147	[BUG]  [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end).toString();  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end).toString();	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
148	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1)/  8;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  -  1)/  8;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  -  1)/  8;	  end    =    input.charAt(end    -    1)/    1;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
149	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end  -  start);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end  -  start);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end  -  start);	  End    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
150	[BUG]  [BUGGY]  while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  }	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
151	[BUG]  [BUGGY]  Ilpuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Ilpuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Ilpuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  Espuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul    	non-compiled	[CE]  <identifier>  expected	56	None	replace
152	[BUG]  [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
153	[BUG]  [BUGGY]  end  =  input.charAt(end  -  2);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  -  2);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	end  =  input.charAt(end  -  2);	  end    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
154	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
155	[BUG]  [BUGGY]  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(input.charAt(end)    ==    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
156	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString()  +  index;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString()  +  index;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end).toString()  +  index;	  End    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
157	[BUG]  [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
158	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  17;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
159	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  <?>  end  =  input.subSequence(start,  end);	  if(isHex)    {    if(end!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
160	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString();  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  <?>  end  =  input.subSequence(start,  end).toString();	  if(isHex)    {    if(end!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
161	[BUG]  [BUGGY]  End  <  Object>  end  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <  Object>  end  =  input.subSequence(start,  end);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  <  Object>  end  =  input.subSequence(start,  end);	  if(isHex)    {    if(end!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
162	[BUG]  [BUGGY]  End  <  Object>  end  =  input.subSequence(start);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <  Object>  end  =  input.subSequence(start);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  <  Object>  end  =  input.subSequence(start);	  if(isHex)    {    if(end!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
163	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(1);	  char    firstChar    =    input.charAt(0);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
164	[BUG]  [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end).toString();  }	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
165	[BUG]  [BUGGY]  while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  ==  ';')  {  input  =  input.subSequence(start,  end).toString();  }	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
166	[BUG]  [BUGGY]  int  start  =  input.length();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  start  =  input.length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  start  =  input.length();	  int    end    =    input.length()    -    2;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
167	[BUG]  [BUGGY]  if(start  >=  'x'  &&  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  >=  'x'  &&  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  >=  'x'  &&  end  ==  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(start    >=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
168	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  result  =  input.subSequence(start,  end);	  if(isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
169	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	  char    firstChar    =    input.charAt(0);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
170	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0);  start++;  isHex  =  true;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(0);  start++;  isHex  =  true;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	char  firstChar  =  input.charAt(0);  start++;  isHex  =  true;	  char    firstChar    =    input.charAt(0);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
171	[BUG]  [BUGGY]  if(start  ==  'x'  ||  end  ==  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  'x'  ||  end  ==  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  'x'  ||  end  ==  ';')  {  start++;  isHex  =  true;  }	  if(!isHex)    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
172	[BUG]  [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end  -  1)!=  ';')  {  start++;  isHex  =  true;  }	  while(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
173	[BUG]  [BUGGY]  Escoruleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Escoruleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Escoruleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  uleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul    	non-compiled	[CE]  <identifier>  expected	6	None	replace
174	[BUG]  [BUGGY]  Integer  end  =  input.length();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  end  =  input.length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  end  =  input.length();	  int    end    =    input.length()    -    2;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
175	[BUG]  [BUGGY]  if(!isHex  ||  end  ==  ';')  {  start++;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(!isHex  ||  end  ==  ';')  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(!isHex  ||  end  ==  ';')  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
176	[BUG]  [BUGGY]  while(!isHex)  {  start++;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(!isHex)  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(!isHex)  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
177	[BUG]  [BUGGY]  While(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  While(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	While(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }	  while(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
178	[BUG]  [BUGGY]  while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(index)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }	  while(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
179	[BUG]  [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z')  {  if(end!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z')  {  if(end!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  >=  'x'  &&  end  <  =  'z')  {  if(end!=  ';')  {  start++;  isHex  =  true;  }	  if(isHex)    {    if(end!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
180	[BUG]  [BUGGY]  if(start!=  'x'  &&  end  <  =  'z')  {  if(end!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start!=  'x'  &&  end  <  =  'z')  {  if(end!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start!=  'x'  &&  end  <  =  'z')  {  if(end!=  ';')  {  start++;  isHex  =  true;  }	  if(isHex)    {    if(end!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
181	[BUG]  [BUGGY]  if(start  ==  'x'  ||  end  ==  'X')  {  if(end!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  'x'  ||  end  ==  'X')  {  if(end!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  'x'  ||  end  ==  'X')  {  if(end!=  ';')  {  start++;  isHex  =  true;  }	  if(isHex)    {    if(end!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
182	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	End  =  input.subSequence(start,  end).toString(),  16);	  End    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
183	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  firstChar  =  input.charAt(0);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  false;  }	  char    firstChar    =    input.charAt(0);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    false;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
184	[BUG]  [BUGGY]  if(input!=  null)  {  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(input!=  null)  {  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input!=  null)  {  if(start  ==  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start    ==    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
185	[BUG]  [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end);	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
186	[BUG]  [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end  -  1)!=  ';')  {  input  =  input.subSequence(start,  end).toString();	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
187	[BUG]  [BUGGY]  if(input.charAt(start)  ==  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(input.charAt(start)  ==  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input.charAt(start)  ==  ';')  {  input  =  input.subSequence(start,  end).toString();  }	  if(input.charAt(end)    ==    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
188	[BUG]  [BUGGY]  Char  end  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Char  end  =  input.charAt(end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Char  end  =  input.charAt(end);	  char    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
189	[BUG]  [BUGGY]  if(input!=  null)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(input!=  null)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input!=  null)  {  if(input.charAt(start)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(input.charAt(start)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
190	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)!=  ';'  &&  isHex)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)!=  ';'  &&  isHex)  {	  while(input.charAt(end)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
191	[BUG]  [BUGGY]  if(start  ==  '0'  &&  end  <  =  '9')  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  '0'  &&  end  <  =  '9')  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  ==  '0'  &&  end  <  =  '9')  {  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
192	[BUG]  [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end);  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end)  >=  ';')  {  input  =  input.subSequence(start,  end);  }	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
193	[BUG]  [BUGGY]  uleiuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  uleiuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	uleiuleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul	  Oiluleiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiululeiul    	non-compiled	[CE]  <identifier>  expected	8	None	replace
194	[BUG]  [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	while(input.charAt(end  -  1)!=  ';')  {  input  =  input.subSequence(start,  end).toString();  }	  while(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end).toString();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
195	[BUG]  [BUGGY]  Char  firstChar  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Char  firstChar  =  input.charAt(end  +  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Char  firstChar  =  input.charAt(end  +  1);	  char    firstChar    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
196	[BUG]  [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z'  ||  end  >  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z'  ||  end  >  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  >=  'x'  &&  end  <  =  'z'  ||  end  >  'z')  {  if(input.charAt(end)!=  ';')  {  start++;  isHex  =  true;  }	  if(start    >=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
197	[BUG]  [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)  ==  ';')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)  ==  ';')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(start  >=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)  ==  ';')  {  start++;  isHex  =  true;  }	  if(start    >=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
198	[BUG]  [BUGGY]  if(input!=  null)  {  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(input!=  null)  {  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	if(input!=  null)  {  if(start!=  'x'  &&  end  <  =  'z')  {  if(input.charAt(end)!=  ';')  {  input  =  input.subSequence(start,  end);  return  true;  }	  if(start!=    'x'    &&    end    <    =    'z')    {    if(input.charAt(end)!=    ';')    {    input    =    input.subSequence(start,    end);    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
199	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf(';',  firstChar);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.lastIndexOf(';',  firstChar);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.lastIndexOf(';',  firstChar);	  int    end    =    input.lastIndexOf(';');    	non-compiled	[CE]  <identifier>  expected	81	None	replace
200	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  startChar);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  end  =  input.indexOf(';',  startChar);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	int  end  =  input.indexOf(';',  startChar);	  int    end    =    input.indexOf(';',    firstChar);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
201	[BUG]  [BUGGY]  Integer  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	Integer  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }	  String    firstChar    =    input.charAt(start);    if(firstChar    ==    'x'    ||    firstChar    ==    'X')    {    start++;    isHex    =    true;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
