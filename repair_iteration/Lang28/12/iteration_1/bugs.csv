bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write('n');  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]  out.write('n');  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	out.write('n');	out.write(entityValue);  	non-compiled	[CE]  <identifier>  expected	24	None	replace
2	[BUG]  [BUGGY]  out.write(entityValue,  index);  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]  out.write(entityValue,  index);  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	out.write(entityValue,  index);	out.write(entityValue);  	non-compiled	[CE]  <identifier>  expected	24	None	replace
3	[BUG]  [BUGGY]  out.write('ufffd');  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]  out.write('ufffd');  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	out.write('ufffd');	out.write(entityValue);  	non-compiled	[CE]  <identifier>  expected	24	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	  	out.write(entityValue);  	non-compiled	[CE]  <identifier>  expected	24	None	replace
5	[BUG]  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);		non-compiled	[CE]  <identifier>  expected	25	None	add
6	[BUG]  [BUGGY]    int  entityValue  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    int  entityValue  =  input.subSequence(start,  end).toString();  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    int  entityValue  =  input.subSequence(start,  end).toString();		non-compiled	[CE]  <identifier>  expected	25	None	add
7	[BUG]  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;		non-compiled	[CE]  <identifier>  expected	25	None	add
8	[BUG]  [BUGGY]    int  entityValue  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    int  entityValue  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    int  entityValue  =  input.subSequence(start,  end).toString(),  10;		non-compiled	[CE]  <identifier>  expected	25	None	add
9	[BUG]  [BUGGY]    int  entityValue  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]            ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    int  entityValue  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    int  entityValue  =  input.subSequence(start,  end).toString(),  10);		non-compiled	[CE]  <identifier>  expected	25	None	add
10	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    char  firstChar  =  input.charAt(index);  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    char  firstChar  =  input.charAt(index);		non-compiled	[CE]  <identifier>  expected	25	None	add
11	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    char  firstChar  =  input.charAt(start);  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    char  firstChar  =  input.charAt(start);		non-compiled	[CE]  <identifier>  expected	25	None	add
12	[BUG]  [BUGGY]    int  start  =  input.lastIndexOf('.');  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    int  start  =  input.lastIndexOf('.');  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    int  start  =  input.lastIndexOf('.');		non-compiled	[CE]  <identifier>  expected	25	None	add
13	[BUG]  [BUGGY]    int  start  =  input.indexOf('  ');  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    int  start  =  input.indexOf('  ');  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    int  start  =  input.indexOf('  ');		non-compiled	[CE]  <identifier>  expected	25	None	add
14	[BUG]  [BUGGY]    int  start  =  input.indexOf('  ')+  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    int  start  =  input.indexOf('  ')+  1;  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    int  start  =  input.indexOf('  ')+  1;		non-compiled	[CE]  <identifier>  expected	25	None	add
15	[BUG]  [BUGGY]  out.write('  ');  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]  out.write('  ');  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	out.write('  ');	out.write(entityValue);  	non-compiled	[CE]  <identifier>  expected	24	None	replace
16	[BUG]  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString();  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    Integer  entityValue  =  input.subSequence(start,  end).toString();		non-compiled	[CE]  <identifier>  expected	25	None	add
17	[BUG]  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16;		non-compiled	[CE]  <identifier>  expected	25	None	add
18	[BUG]  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);		non-compiled	[CE]  <identifier>  expected	25	None	add
19	[BUG]  [BUGGY]  out.write(entityValue  +  1);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  [BUGGY]  out.write(entityValue  +  1);  [BUGGY]  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	out.write(entityValue  +  1);	out.write(entityValue);  	non-compiled	[CE]  <identifier>  expected	24	None	replace
