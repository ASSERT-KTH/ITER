bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
2	[BUG] [BUGGY] if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  [BUGGY] if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { [BUGGY] int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	37	37	1	replace	
3	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  [BUGGY] [BUGGY] if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	37	37	1	add	
4	[BUG] [BUGGY] int start = index + 2; [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { [BUGGY] int start = index + 2; [BUGGY] boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	38	38	1	replace	
5	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { [BUGGY] [BUGGY] int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	38	38	1	add	
6	[BUG] [BUGGY] boolean isHex = false; [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; [BUGGY] boolean isHex = false; [BUGGY]  char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	39	39	1	replace	
7	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; [BUGGY] [BUGGY] boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	39	39	1	add	
8	[BUG] [BUGGY] char firstChar = input.charAt(start); [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; [BUGGY] char firstChar = input.charAt(start); [BUGGY] if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; }  [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	41	41	1	replace	
9	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; [BUGGY] [BUGGY] char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; }  [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	41	41	1	add	
10	[BUG] [BUGGY] if(firstChar == 'x' || firstChar == 'X') { [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); [BUGGY] if(firstChar == 'x' || firstChar == 'X') { [BUGGY] start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; } int entityValue; [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	replace	
11	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public int translate(CharSequence input, int index, Writer out) throws IOException {  if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); [BUGGY] [BUGGY] if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; } int entityValue; [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	42	42	1	add	
12	[BUG] [BUGGY] int end = start; [FE] ComparisonFailure [CONTEXT] if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } [BUGGY] int end = start; [BUGGY] while(input.charAt(end) != ';') { end++; } int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	replace	
13	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } [BUGGY] [BUGGY] int end = start; while(input.charAt(end) != ';') { end++; } int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	47	47	1	add	
14	[BUG] [BUGGY] while(input.charAt(end) != ';') { [FE] ComparisonFailure [CONTEXT] int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; [BUGGY] while(input.charAt(end) != ';') { [BUGGY] end++; } int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	
15	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; [BUGGY] [BUGGY] while(input.charAt(end) != ';') { end++; } int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	add	
16	[BUG] [BUGGY] end++; [FE] ComparisonFailure [CONTEXT] boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { [BUGGY] end++; [BUGGY] } int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	replace	
17	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { [BUGGY] [BUGGY] end++; } int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	49	49	1	add	
18	[BUG] [BUGGY] if(isHex) { [FE] ComparisonFailure [CONTEXT] isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; } int entityValue; try { [BUGGY] if(isHex) { [BUGGY] entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; } out.write(entityValue); return 2 + (end - start) + (isHex ? 1 : 0) + 1; [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	
19	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; } int entityValue; try { [BUGGY] [BUGGY] if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; } out.write(entityValue); return 2 + (end - start) + (isHex ? 1 : 0) + 1; [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	add	
20	[BUG] [BUGGY] entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); [FE] ComparisonFailure [CONTEXT] if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { [BUGGY] entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); [BUGGY] } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	57	57	1	replace	
21	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { [BUGGY] [BUGGY] entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	57	57	1	add	
22	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; [BUGGY] } [BUGGY]  out.write(entityValue); return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0; } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	
23	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; [BUGGY] [BUGGY] } out.write(entityValue); return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0; } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	add	
24	[BUG] [BUGGY] out.write(entityValue); [FE] ComparisonFailure [CONTEXT] try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; } [BUGGY] out.write(entityValue); [BUGGY] return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0; } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	replace	
25	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; } [BUGGY] [BUGGY] out.write(entityValue); return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0; } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	63	63	1	add	
26	[BUG] [BUGGY] return 2 + (end - start) + (isHex ? 1 : 0) + 1; [FE] ComparisonFailure [CONTEXT] if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; } out.write(entityValue); [BUGGY] return 2 + (end - start) + (isHex ? 1 : 0) + 1; [BUGGY] } return 0; } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	replace	
27	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; } out.write(entityValue); [BUGGY] [BUGGY] return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0; } [CLASS] NumericEntityUnescaper [METHOD] translate [RETURN_TYPE] int  CharSequence input int index Writer out [VARIABLES] boolean isHex CharSequence input char firstChar NumberFormatException nfe int end entityValue index start Writer out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	64	64	1	add	
