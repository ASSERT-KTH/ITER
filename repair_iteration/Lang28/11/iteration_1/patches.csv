bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  char  firstChar  =  input.charAt(index);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(index);	  int    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.charAt(index  +  1);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(index  +  1);	  int    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
3	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.charAt(index  -  1);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(index  -  1);	  int    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.charAt(0);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(0);	  int    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  nfe.printStackTrace(start);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe.printStackTrace(start);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe.printStackTrace(start);	  nfe.printStackTrace();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  nfe.printStackTrace(out);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe.printStackTrace(out);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe.printStackTrace(out);	  nfe.printStackTrace();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
8	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
9	[BUG]  [BUGGY]  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
10	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
11	[BUG]  [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    15);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    15);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  EntityCollection  entities  =  input.getEntityCollection();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  EntityCollection  entities  =  input.getEntityCollection();  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	EntityCollection  entities  =  input.getEntityCollection();	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    15);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    15);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  out.write('0');  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  out.write('0');  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0');	  out.write(entityValue);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
16	[BUG]  [BUGGY]  out.write('  ');  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  out.write('  ');  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('  ');	  out.write(entityValue);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
17	[BUG]  [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	20	None	replace
19	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	20	None	replace
20	[BUG]  [BUGGY]  int  firstChar  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	20	None	replace
21	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
22	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString();  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  entityValue  =  input.subSequence(start,  end).toString();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  10;	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  16;	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('  ');  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  start  =  input.lastIndexOf('  ');  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('  ');	  int    start    =    input.indexOf('    ');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  index);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  start  =  input.indexOf('  ',  index);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  index);	  int    start    =    input.indexOf('    ');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  16);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  start  =  input.indexOf('  ',  16);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  16);	  int    start    =    input.indexOf('    ');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  start  =  input.indexOf('  ',  1);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  1);	  int    start    =    input.indexOf('    ');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
29	[BUG]  [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString());  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString());  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  Integer.parseInt(input.subSequence(start,  end).toString());	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
31	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
32	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
33	[BUG]  [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    12);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
34	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  end).toString();	  int    end    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
35	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString()  +  1;	  int    end    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
36	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  16;	  int    end    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
37	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.subSequence(start,  end).toString();	      int    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
38	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end).toString()  +  1;	      int    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
39	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(index,  end).toString();	      int    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
40	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
41	[BUG]  [BUGGY]  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
42	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
43	[BUG]  [BUGGY]  out.write('#');  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  out.write('#');  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('#');	  out.write('n');    	non-compiled	[CE]  <identifier>  expected	10	None	replace
44	[BUG]  [BUGGY]  out.write(entityValue);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  out.write(entityValue);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    2    +    (end    -    start)    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue);  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    2    +    (end    -    start)    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  out.write('n');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  out.write('n');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    2    +    (end    -    start)    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
47	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
48	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
49	[BUG]  [BUGGY]  int  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
50	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
51	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
52	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
53	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
54	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	20	None	replace
55	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString()  -  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(start,  end).toString()  -  1;  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString()  -  1;	  int    end    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
56	[BUG]  [BUGGY]  out.write(entityValue  +  1);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  out.write(entityValue  +  1);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue  +  1);	  out.write(entityValue);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
58	[BUG]  [BUGGY]  if(isHex)  {  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(isHex)  {  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
59	[BUG]  [BUGGY]  int  start  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  start  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
60	[BUG]  [BUGGY]  out.write('ufffd');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  out.write('ufffd');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('ufffd');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    2    +    (end    -    start)    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
61	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	      int    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
62	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end).toString(),  16;	      int    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
63	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString();	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    15);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
64	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString(),  16;	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    15);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
65	[BUG]  [BUGGY]  nfe  =  NumberFormat.getNumberInstance();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe  =  NumberFormat.getNumberInstance();  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  NumberFormat.getNumberInstance();	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    15);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
66	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  char  firstChar  =  input.charAt(start);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(start);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
67	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('.');  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  start  =  input.lastIndexOf('.');  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('.');	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
68	[BUG]  [BUGGY]  nfe.printStackTrace(index);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  nfe.printStackTrace(index);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe.printStackTrace(index);	  nfe.printStackTrace();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
69	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  firstChar);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  start  =  input.indexOf('  ',  firstChar);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  firstChar);	  int    start    =    input.indexOf('    ');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
70	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  firstChar  =  input.subSequence(start,  end);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
71	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  Integer  end  =  input.subSequence(start,  end);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
72	[BUG]  [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
76	[BUG]  [BUGGY]  if(nextChar  ==  '.')  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(nextChar  ==  '.')  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(nextChar  ==  '.')  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
77	[BUG]  [BUGGY]  if(nextChar  ==  '.')  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(nextChar  ==  '.')  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(nextChar  ==  '.')  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
78	[BUG]  [BUGGY]  out.write('n',  firstChar);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  out.write('n',  firstChar);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n',  firstChar);	  out.write('n');    	non-compiled	[CE]  <identifier>  expected	10	None	replace
79	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  end);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  start  =  input.indexOf('  ',  end);  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  end);	  int    start    =    input.indexOf('    ');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
80	[BUG]  [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  }	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    15);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
81	[BUG]  [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  out.write(entityValue);  }	  out.write(entityValue);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
82	[BUG]  [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  out.write(entityValue);  }  else  {  throw  new  NumberFormatException( " ");  }	  out.write(entityValue);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
83	[BUG]  [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  }  else  {  return  1;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  }  else  {  return  1;  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  out.write(entityValue);  }  else  {  return  1;  }	  out.write(entityValue);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
84	[BUG]  [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  }  [BUGGY]    }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(nfe!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  }	      if(nfe    ==    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    12);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
85	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
86	[BUG]  [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }	  out.write(entityValue);    return    2    +    (end    -    start)    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
87	[BUG]  [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;    [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [BUGGY]      out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue  ==  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }	  out.write(entityValue);    return    2    +    (end    -    start)    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
