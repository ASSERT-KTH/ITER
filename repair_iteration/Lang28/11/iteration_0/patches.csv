bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write(entityValue);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  out.write(entityValue);  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue);	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
2	[BUG]  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex?  1  :  0)+  1;  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex?  1  :  0)+  1;	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
3	[BUG]  [BUGGY]  nfe.printStackTrace();  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  nfe.printStackTrace();  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe.printStackTrace();	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	  	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
5	[BUG]  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }		non-compiled	[CE]  <identifier>  expected	23	None	add
6	[BUG]  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }		non-compiled	[CE]  <identifier>  expected	23	None	add
7	[BUG]  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  }  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  }		non-compiled	[CE]  <identifier>  expected	23	None	add
8	[BUG]  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }		non-compiled	[CE]  <identifier>  expected	23	None	add
9	[BUG]  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  }  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    if(nfe  ==  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  }		non-compiled	[CE]  <identifier>  expected	23	None	add
10	[BUG]  [BUGGY]  out.write('n');  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  out.write('n');  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n');	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
11	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  int  firstChar  =  input.charAt(index);  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(index);	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
12	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ');  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  int  start  =  input.indexOf('  ');  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ');	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
13	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
14	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString();	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
15	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
16	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]    out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	}  	non-compiled	[CE]  <identifier>  expected	22	None	replace
17	[BUG]  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }		non-compiled	[CE]  <identifier>  expected	23	None	add
18	[BUG]  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }		non-compiled	[CE]  <identifier>  expected	23	None	add
19	[BUG]  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    int  firstChar  =  input.subSequence(start,  end).toString();		non-compiled	[CE]  <identifier>  expected	23	None	add
20	[BUG]  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()		non-compiled	[CE]  <identifier>  expected	23	None	add
21	[BUG]  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure  [CONTEXT]  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  [BUGGY]    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [BUGGY]  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	    int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }		non-compiled	[CE]  <identifier>  expected	23	None	add
