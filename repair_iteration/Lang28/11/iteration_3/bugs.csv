bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(index,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
2	[BUG]  [BUGGY]  int  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
3	[BUG]  [BUGGY]  if(entityValue  ==  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue  ==  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue  ==  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
4	[BUG]  [BUGGY]  int  end  =  input.length();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.length();  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
5	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  1).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(index,  1).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  1).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(index,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	10	None	replace
6	[BUG]  [BUGGY]  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(index,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	10	None	replace
7	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(index,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(index,  end);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(index,  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(index,  end);	  int    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
9	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.subSequence(start,  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.subSequence(start,  end);	  int    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
10	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  index);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(start,  index);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  index);	  int    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
11	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(start,  end);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.charAt(start,  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(start,  end);	  int    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
12	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(index,  end).toString();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(index,  end).toString();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(index,  end).toString();	  Integer    end    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
13	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString()  +  1;	  Integer    end    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
14	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  entityValue  =  input.subSequence(start,  end).toString()  +  1;	  int    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
15	[BUG]  [BUGGY]  char  entityValue  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  entityValue  =  input.subSequence(start,  end).toString();  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  entityValue  =  input.subSequence(start,  end).toString();	  int    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
16	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  end).toString()  -  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(index,  end).toString()  -  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  end).toString()  -  1;	  int    end    =    input.subSequence(start,    end).toString()    -    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
17	[BUG]  [BUGGY]  char  end  =  input.subSequence(start,  end).toString()  -  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  end  =  input.subSequence(start,  end).toString()  -  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  end  =  input.subSequence(start,  end).toString()  -  1;	  int    end    =    input.subSequence(start,    end).toString()    -    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
18	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index).toString();	  int    end    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
19	[BUG]  [BUGGY]  char  end  =  input.subSequence(index,  end).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  end  =  input.subSequence(index,  end).toString();  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  end  =  input.subSequence(index,  end).toString();	  int    end    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
20	[BUG]  [BUGGY]  out.write(''+  firstChar);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(''+  firstChar);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(''+  firstChar);	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	16	None	replace
21	[BUG]  [BUGGY]  out.write('  ',  firstChar);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('  ',  firstChar);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('  ',  firstChar);	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	16	None	replace
22	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
23	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
24	[BUG]  [BUGGY]  Integer  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    end    =    input.length();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
25	[BUG]  [BUGGY]  int  end  =  input.length()  -  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.length()  -  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length()  -  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    end    =    input.length();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
26	[BUG]  [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    end    =    input.length();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
27	[BUG]  [BUGGY]  int  firstChar  =  input.length();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.length();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.length();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	20	None	replace
28	[BUG]  [BUGGY]  int  firstChar  =  input.length();  if(start  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.length();  if(start  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.length();  if(start  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	20	None	replace
29	[BUG]  [BUGGY]  char  firstChar  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	20	None	replace
30	[BUG]  [BUGGY]  if(isHex)  {  int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  int  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	52	None	replace
31	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(index,  end);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(index,  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(index,  end);	  Integer    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
32	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  index);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  index);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  index);	  Integer    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
33	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(0,  end);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(0,  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(0,  end);	  Integer    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
34	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(entityValue,  end);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(entityValue,  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(entityValue,  end);	  Integer    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
35	[BUG]  [BUGGY]  if(isHex)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  if(nextChar    ==    '.')    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
36	[BUG]  [BUGGY]  if(isHex)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  if(nextChar    ==    '.')    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
37	[BUG]  [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  if(nextChar    ==    '.')    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
38	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  10;	  int    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
39	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  8;	  int    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
40	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  12;	  int    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
41	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  9;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  9;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  9;	  int    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
42	[BUG]  [BUGGY]  if(isHex)  {  if(entityValue!=  null)  {  out.write(entityValue);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  if(entityValue!=  null)  {  out.write(entityValue);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  if(entityValue!=  null)  {  out.write(entityValue);  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    else    {    return    1;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
43	[BUG]  [BUGGY]  if(isHex)  {  if(entityValue!=  null)  {  out.write(entityValue);  }  else  {  return  1;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  if(entityValue!=  null)  {  out.write(entityValue);  }  else  {  return  1;  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  if(entityValue!=  null)  {  out.write(entityValue);  }  else  {  return  1;  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    else    {    return    1;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
44	[BUG]  [BUGGY]  out.write('n');  return  2  +  (start  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('n');  return  2  +  (start  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n');  return  2  +  (start  -  start)+  (isHex?  1  :  0)+  1;	  out.write('n');    return    2    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
45	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  if(isHex)    {    int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
46	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(index,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    end    =    input.subSequence(start,    end).toString(),    16;    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
47	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    end    =    input.subSequence(start,    end).toString(),    16;    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
48	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  3);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  3);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  3);	  int    end    =    input.subSequence(start,    end).toString(),    16;    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
49	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  10);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('  ',  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  10);	  int    start    =    input.indexOf('    ',    16);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
50	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  12);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('  ',  12);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  12);	  int    start    =    input.indexOf('    ',    16);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
51	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('  ',  16);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('  ',  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('  ',  16);	  int    start    =    input.indexOf('    ',    16);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
52	[BUG]  [BUGGY]  nfe.printStackTrace(out,  index);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe.printStackTrace(out,  index);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe.printStackTrace(out,  index);	  nfe.printStackTrace(out);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
53	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString(),  10;	  Integer    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
54	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString(),  8;	  Integer    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
55	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString(),  12;	  Integer    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
56	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  9;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  9;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString(),  9;	  Integer    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
57	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString()  /  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString()  /  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString()  /  1;	  int    end    =    input.subSequence(start,    end).toString()    +    1;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
58	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
59	[BUG]  [BUGGY]  int  firstChar  =  input.length();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.length();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.length();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
60	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  ==  1)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  ==  1)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index).toString();  if(end  ==  1)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    index).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	53	None	replace
61	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('  ',  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('  ',  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('  ',  1);	  int    start    =    input.indexOf('    ',    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
62	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(0);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(0);	  char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
63	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(start  +  1);	  char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
64	[BUG]  [BUGGY]  char  firstChar  =  input.charAtIndex(start);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAtIndex(start);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAtIndex(start);	  char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
65	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString()  -  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString()  -  1;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end).toString()  -  1;	  int    firstChar    =    input.subSequence(start,    end).toString()    +    1;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
66	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end).toString(),  10;	  int    firstChar    =    input.subSequence(start,    end).toString()    +    1;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
67	[BUG]  [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  index).toString());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  index).toString());  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  Integer.parseInt(input.subSequence(start,  index).toString());	  nfe    =    Integer.parseInt(input.subSequence(start,    end).toString());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
68	[BUG]  [BUGGY]  out.write('0');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('0');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write('ufffd');    return    2    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
69	[BUG]  [BUGGY]  out.write('$');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('$');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('$');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write('ufffd');    return    2    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
70	[BUG]  [BUGGY]  out.write('H');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('H');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('H');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write('ufffd');    return    2    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
71	[BUG]  [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  8);  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  8);	  nfe    =    Integer.parseInt(input.subSequence(start,    end).toString(),    15);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
72	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(1);	  int    firstChar    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
73	[BUG]  [BUGGY]  char  entityValue  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  entityValue  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  entityValue  =  input.subSequence(start,  end).toString(),  10;	  int    entityValue    =    input.subSequence(start,    end).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
74	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(index,  1).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(index,  1).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(index,  1).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.subSequence(index,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	18	None	replace
75	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.subSequence(index,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.subSequence(index,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	18	None	replace
76	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.subSequence(index,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	18	None	replace
77	[BUG]  [BUGGY]  int  start  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    start    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
78	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('.');  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('.');  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('.');  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    start    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
79	[BUG]  [BUGGY]  Integer  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    start    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
80	[BUG]  [BUGGY]  int  start  =  input.indexOf(':')+  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf(':')+  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf(':')+  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    start    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
81	[BUG]  [BUGGY]  nfe  =  NumberFormat.getNumberInstance(index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  NumberFormat.getNumberInstance(index);  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  NumberFormat.getNumberInstance(index);	  nfe    =    NumberFormat.getNumberInstance();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
82	[BUG]  [BUGGY]  nfe  =  NumberFormat.getInstance();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  NumberFormat.getInstance();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  NumberFormat.getInstance();	  nfe    =    NumberFormat.getNumberInstance();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
83	[BUG]  [BUGGY]  nfe  =  NumberFormat.getNumberInstance(0);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  NumberFormat.getNumberInstance(0);  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  NumberFormat.getNumberInstance(0);	  nfe    =    NumberFormat.getNumberInstance();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
84	[BUG]  [BUGGY]  String  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  String  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	String  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  }	  char    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
85	[BUG]  [BUGGY]  String  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  String  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	String  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  char    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
86	[BUG]  [BUGGY]  out.write('#'  +  input.subSequence(start,  end).toString());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('#'  +  input.subSequence(start,  end).toString());  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('#'  +  input.subSequence(start,  end).toString());	  out.write('#');    	non-compiled	[CE]  <identifier>  expected	43	None	replace
87	[BUG]  [BUGGY]  out.write('#'  +  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('#'  +  input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('#'  +  input.subSequence(start,  end).toString(),  10);	  out.write('#');    	non-compiled	[CE]  <identifier>  expected	43	None	replace
88	[BUG]  [BUGGY]  out.write('#'  +  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('#'  +  input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('#'  +  input.subSequence(start,  end).toString(),  16);	  out.write('#');    	non-compiled	[CE]  <identifier>  expected	43	None	replace
89	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('  ',  index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('  ',  index);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('  ',  index);	  int    start    =    input.lastIndexOf('    ');    	non-compiled	[CE]  <identifier>  expected	25	None	replace
90	[BUG]  [BUGGY]  char  entityValue  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  entityValue  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  entityValue  =  input.subSequence(start,  end).toString(),  16;	  int    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
91	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  8;	  int    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
92	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  12;	  int    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
93	[BUG]  [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue  ==  null)  {  out.write(entityValue);  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
94	[BUG]  [BUGGY]  if(isHex)  {  out.write(entityValue);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  out.write(entityValue);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  out.write(entityValue);  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
95	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(index  -  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(index  -  1);	  int    firstChar    =    input.charAt(index    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
96	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  -  1  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.charAt(index  -  1  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(index  -  1  +  1);	  int    firstChar    =    input.charAt(index    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
97	[BUG]  [BUGGY]  String  firstChar  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  String  firstChar  =  input.subSequence(start,  end).toString();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	String  firstChar  =  input.subSequence(start,  end).toString();	  char    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
98	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.subSequence(start,  end).toString()  +  1;	  char    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
99	[BUG]  [BUGGY]  Char  firstChar  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Char  firstChar  =  input.subSequence(start,  end).toString();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Char  firstChar  =  input.subSequence(start,  end).toString();	  char    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
100	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('  ',  end);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('  ',  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('  ',  end);	  int    start    =    input.indexOf('    ',    end);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
101	[BUG]  [BUGGY]  int  firstChar  =  input.length();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.length();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.length();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
102	[BUG]  [BUGGY]  out.write(entityValue);  return  1  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(entityValue);  return  1  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue);  return  1  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    2    +    (end    -    start)+    1    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
103	[BUG]  [BUGGY]  out.write(entityValue);  return  2  +  (start  -  start)+  1  +  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(entityValue);  return  2  +  (start  -  start)+  1  +  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue);  return  2  +  (start  -  start)+  1  +  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    2    +    (end    -    start)+    1    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
104	[BUG]  [BUGGY]  out.write('n');  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('n');  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n');  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    2    +    (end    -    start)+    1    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
105	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);	  int    end    =    input.subSequence(index,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
106	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.subSequence(start,    index).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
107	[BUG]  [BUGGY]  if(isHex)  {  if(!isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  if(!isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  if(!isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  if(nextChar    ==    '.')    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
108	[BUG]  [BUGGY]  if(isHex)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  15);  }	  if(nextChar    ==    '.')    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
109	[BUG]  [BUGGY]  if(isHex)  {  out.write(entityValue);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  out.write(entityValue);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  out.write(entityValue);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }	  out.write(entityValue);    return    1    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
110	[BUG]  [BUGGY]  out.write(entityValue);  return  1  +  (start  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(entityValue);  return  1  +  (start  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue);  return  1  +  (start  -  start)+  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    1    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
111	[BUG]  [BUGGY]  nfe.printStackTrace(entityValue);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe.printStackTrace(entityValue);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe.printStackTrace(entityValue);	  nfe.printStackTrace(index);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
112	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(0).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	54	None	replace
113	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0);  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(0);  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(0);  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	54	None	replace
114	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(index  +  1);	  char    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
115	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(index  +  2);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(index  +  2);	  char    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
116	[BUG]  [BUGGY]  OutputStream  out  =  new  OutputStreamWriter(input.subSequence(start,  end).toString());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  OutputStream  out  =  new  OutputStreamWriter(input.subSequence(start,  end).toString());  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	OutputStream  out  =  new  OutputStreamWriter(input.subSequence(start,  end).toString());	  if(entityValue!=    null)    {    out.write(entityValue);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
117	[BUG]  [BUGGY]  if(entityValue  ==  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue  ==  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue  ==  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
118	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  index  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('  ',  index  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  index  +  1);	  int    start    =    input.indexOf('    ',    index);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
119	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  entityValue);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('  ',  entityValue);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  entityValue);	  int    start    =    input.indexOf('    ',    index);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
120	[BUG]  [BUGGY]  nfe.printStackTrace(start,  index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe.printStackTrace(start,  index);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe.printStackTrace(start,  index);	  nfe.printStackTrace(start);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
121	[BUG]  [BUGGY]  if(isHex)  {  if(entityValue!=  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  if(entityValue!=  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  if(entityValue!=  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }	  if(entityValue!=    null)    {    out.write(entityValue);    return    2    +    (end    -    start)+    (isHex?    1    :    0)+    1;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
122	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(start).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(start).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  char    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	19	None	replace
123	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  Integer    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
124	[BUG]  [BUGGY]  out.write(index  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(index  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(index  +  1);	  out.write(entityValue    +    1);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
125	[BUG]  [BUGGY]  out.write(entityValue  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(entityValue  -  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue  -  1);	  out.write(entityValue    +    1);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
126	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(index,  end).toString();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.subSequence(index,  end).toString();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.subSequence(index,  end).toString();	  int    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
127	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  index).toString();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(start,  index).toString();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  index).toString();	  int    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
128	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('.',  index);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('.',  index);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('.',  index);	  int    start    =    input.lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	67	None	replace
129	[BUG]  [BUGGY]  int  start  =  input.indexOf('.');  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('.');  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('.');	  int    start    =    input.lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	67	None	replace
130	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('.',  16);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('.',  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('.',  16);	  int    start    =    input.lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	67	None	replace
131	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('.',  1);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('.',  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('.',  1);	  int    start    =    input.lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	67	None	replace
132	[BUG]  [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  17);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  17);  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  Integer.parseInt(input.subSequence(start,  end).toString(),  17);	  nfe    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
133	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.subSequence(start,  end).toString(),  16;	  int    firstChar    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
134	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end).toString(),  8;	  int    firstChar    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
135	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end).toString(),  12;	  int    firstChar    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
136	[BUG]  [BUGGY]  String  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  String  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	String  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  char    firstChar    =    input.subSequence(start,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
137	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.charAt(index  +  2);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(index  +  2);	  int    firstChar    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
138	[BUG]  [BUGGY]  out.write('n',  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('n',  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n',  1);	  out.write('n',    firstChar);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
139	[BUG]  [BUGGY]  out.write('n',  firstChar  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('n',  firstChar  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n',  firstChar  +  1);	  out.write('n',    firstChar);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
140	[BUG]  [BUGGY]  out.write('n',  index);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('n',  index);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n',  index);	  out.write('n',    firstChar);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
141	[BUG]  [BUGGY]  EntityCollection  entities  =  input!=  null?  null  :  input.getEntityCollection();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  EntityCollection  entities  =  input!=  null?  null  :  input.getEntityCollection();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	EntityCollection  entities  =  input!=  null?  null  :  input.getEntityCollection();	  EntityCollection    entities    =    input.getEntityCollection();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
142	[BUG]  [BUGGY]  EntityCollection  entities  =  input  ==  null?  null  :  input.getEntityCollection();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  EntityCollection  entities  =  input  ==  null?  null  :  input.getEntityCollection();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	EntityCollection  entities  =  input  ==  null?  null  :  input.getEntityCollection();	  EntityCollection    entities    =    input.getEntityCollection();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
143	[BUG]  [BUGGY]  EntityCollection  entities  =  this.input.getEntityCollection();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  EntityCollection  entities  =  this.input.getEntityCollection();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	EntityCollection  entities  =  this.input.getEntityCollection();	  EntityCollection    entities    =    input.getEntityCollection();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
144	[BUG]  [BUGGY]  out.write('0'  +  firstChar);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('0'  +  firstChar);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0'  +  firstChar);	  out.write('0');    	non-compiled	[CE]  <identifier>  expected	15	None	replace
145	[BUG]  [BUGGY]  out.write('0',  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('0',  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0',  1);	  out.write('0');    	non-compiled	[CE]  <identifier>  expected	15	None	replace
146	[BUG]  [BUGGY]  out.write('0',  nfe);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('0',  nfe);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0',  nfe);	  out.write('0');    	non-compiled	[CE]  <identifier>  expected	15	None	replace
147	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('  ',  firstChar);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('  ',  firstChar);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('  ',  firstChar);	  int    start    =    input.indexOf('    ',    firstChar);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
148	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  firstChar  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('  ',  firstChar  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  firstChar  +  1);	  int    start    =    input.indexOf('    ',    firstChar);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
149	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  firstChar).length();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('  ',  firstChar).length();  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  firstChar).length();	  int    start    =    input.indexOf('    ',    firstChar);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
150	[BUG]  [BUGGY]  if(index  ==  0)  {  out.write(entityValue);  }  else  {  return  1;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(index  ==  0)  {  out.write(entityValue);  }  else  {  return  1;  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(index  ==  0)  {  out.write(entityValue);  }  else  {  return  1;  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    else    {    return    1;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
151	[BUG]  [BUGGY]  if(index  ==  0)  {  out.write(entityValue);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(index  ==  0)  {  out.write(entityValue);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(index  ==  0)  {  out.write(entityValue);  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    else    {    return    1;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
152	[BUG]  [BUGGY]  OutputStream  out  =  input.getOutputStream();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  OutputStream  out  =  input.getOutputStream();  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	OutputStream  out  =  input.getOutputStream();	  if(entityValue!=    null)    {    out.write(entityValue);    }    else    {    return    1;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
153	[BUG]  [BUGGY]  int  start  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    end    =    input.subSequence(start,    end).toString(),    16;    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
154	[BUG]  [BUGGY]  if(isHex)  {  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.subSequence(start,    end).toString(),    16;    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
155	[BUG]  [BUGGY]  int  start  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    end    =    input.subSequence(index,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
156	[BUG]  [BUGGY]  int  firstChar  =  input.length();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.length();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.length();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	20	None	replace
157	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  Integer    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
158	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(index,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  Integer    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
159	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  Integer    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
160	[BUG]  [BUGGY]  out.write(',');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(',');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(',');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write('ufffd');    return    2    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
161	[BUG]  [BUGGY]  out.write('[');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('[');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('[');  return  2  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write('ufffd');    return    2    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
162	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(start,  end  -  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end  -  1);	  int    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
163	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(start,  end  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end  +  1);	  int    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
164	[BUG]  [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  }	  out.write(entityValue);    return    2    +    (end    -    start)+    1    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
165	[BUG]  [BUGGY]  int  end  =  input.subSequence(index,  start).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(index,  start).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(index,  start).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    index).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	53	None	replace
166	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index  +  1).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  index  +  1).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index  +  1).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    index).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	53	None	replace
167	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  <  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  <  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index).toString();  if(end  <  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    index).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	53	None	replace
168	[BUG]  [BUGGY]  int  start  =  input.subSequence(start,  end).toString();  if(start  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.subSequence(start,  end).toString();  if(start  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.subSequence(start,  end).toString();  if(start  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	52	None	replace
169	[BUG]  [BUGGY]  int  start  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.subSequence(start,  end).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(index,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
170	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0).toString();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(0).toString();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(0).toString();	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
171	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString();	  int    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
172	[BUG]  [BUGGY]  int  start  =  input.subSequence(index,  end).toString();  if(start  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.subSequence(index,  end).toString();  if(start  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.subSequence(index,  end).toString();  if(start  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(index,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	10	None	replace
173	[BUG]  [BUGGY]  int  start  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(index,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	10	None	replace
174	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  -  1)+  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.charAt(index  -  1)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(index  -  1)+  1;	  int    firstChar    =    input.charAt(index    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
175	[BUG]  [BUGGY]  out.write(start  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(start  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(start  +  1);	  out.write(entityValue    +    1);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
176	[BUG]  [BUGGY]  out.write(entityValue  /  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(entityValue  /  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(entityValue  /  1);	  out.write(entityValue    +    1);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
177	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start,  end);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(start,  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(start,  end);	  char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
178	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString(),  16  +  1;	  Integer    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
179	[BUG]  [BUGGY]  if(isHex)  {  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  if(isHex)    {    int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
180	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  if(isHex)    {    int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
181	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  index).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    end    =    input.subSequence(start,    index).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
182	[BUG]  [BUGGY]  Integer  end  =  input.length();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.length();  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.length();	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
183	[BUG]  [BUGGY]  EntityCollection  entities  =  input.entities();  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  EntityCollection  entities  =  input.entities();  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	EntityCollection  entities  =  input.entities();	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
184	[BUG]  [BUGGY]  int  start  =  input.indexOf(':')-  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf(':')-  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf(':')-  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    start    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
185	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ')-  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('  ')-  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ')-  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    start    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
186	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end  +  1);	  Integer    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
187	[BUG]  [BUGGY]  Integer  end  =  input.subSequence(start,  end  -  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  end  =  input.subSequence(start,  end  -  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  end  =  input.subSequence(start,  end  -  1);	  Integer    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
188	[BUG]  [BUGGY]  int  end  =  input.length();  if(end  <  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.length();  if(end  <  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();  if(end  <  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
189	[BUG]  [BUGGY]  int  end  =  input.length();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.length();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
190	[BUG]  [BUGGY]  if(nfe!=  null)  {  if(!isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(nfe!=  null)  {  if(!isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(nfe!=  null)  {  if(!isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  if(nfe!=    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
191	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('  ',  index  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('  ',  index  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('  ',  index  +  1);	  int    start    =    input.lastIndexOf('    ');    	non-compiled	[CE]  <identifier>  expected	25	None	replace
192	[BUG]  [BUGGY]  char  end  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  end  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  end  =  input.subSequence(start,  end).toString()  +  1;	  int    end    =    input.subSequence(start,    end).toString()    +    1;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
193	[BUG]  [BUGGY]  nfe  =  NumberFormat.getNumberInstance( "UTF-8 ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  NumberFormat.getNumberInstance( "UTF-8 ");  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  NumberFormat.getNumberInstance( "UTF-8 ");	  nfe    =    NumberFormat.getNumberInstance();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
194	[BUG]  [BUGGY]  nfe  =  NumberFormat.getNumberInstance(DEFAULT_TIME_ZONE);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  NumberFormat.getNumberInstance(DEFAULT_TIME_ZONE);  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  NumberFormat.getNumberInstance(DEFAULT_TIME_ZONE);	  nfe    =    NumberFormat.getNumberInstance();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
195	[BUG]  [BUGGY]  int  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);	  int    end    =    input.length();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
196	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('.',  index  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('.',  index  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('.',  index  +  1);	  int    start    =    input.lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	67	None	replace
197	[BUG]  [BUGGY]  out.write('#'  +  firstChar);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('#'  +  firstChar);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('#'  +  firstChar);	  out.write('#');    	non-compiled	[CE]  <identifier>  expected	43	None	replace
198	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  16  +  1;	  int    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
199	[BUG]  [BUGGY]  OutputStream  out  =  input.outputStream();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  OutputStream  out  =  input.outputStream();  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	OutputStream  out  =  input.outputStream();	  if(entityValue!=    null)    {    out.write(entityValue);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
200	[BUG]  [BUGGY]  out.write('n');  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('n');  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n');  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write('n');    return    2    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
201	[BUG]  [BUGGY]  out.write('n',  firstChar  -  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('n',  firstChar  -  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n',  firstChar  -  1);	  out.write('n',    firstChar);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
202	[BUG]  [BUGGY]  if(isHex)  {  if(nextChar  ==  '.')  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(isHex)  {  if(nextChar  ==  '.')  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(isHex)  {  if(nextChar  ==  '.')  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  if(nextChar    ==    '.')    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
203	[BUG]  [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue,  index);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue,  index);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  out.write(entityValue,  index);  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
204	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar!=  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(firstChar!=  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(0).toString();  if(firstChar!=  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	54	None	replace
205	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(0).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(0).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	54	None	replace
206	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  0);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('  ',  0);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  0);	  int    start    =    input.indexOf('    ',    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
207	[BUG]  [BUGGY]  out.write(''+  input.subSequence(start,  end).toString());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(''+  input.subSequence(start,  end).toString());  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(''+  input.subSequence(start,  end).toString());	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	16	None	replace
208	[BUG]  [BUGGY]  out.write(''+  input.subSequence(start,  end)+  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(''+  input.subSequence(start,  end)+  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(''+  input.subSequence(start,  end)+  1);	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	16	None	replace
209	[BUG]  [BUGGY]  out.write('0'  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('0'  +  1);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0'  +  1);	  out.write('0');    	non-compiled	[CE]  <identifier>  expected	15	None	replace
210	[BUG]  [BUGGY]  out.write('0'  -  start);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('0'  -  start);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0'  -  start);	  out.write('0');    	non-compiled	[CE]  <identifier>  expected	15	None	replace
211	[BUG]  [BUGGY]  out.write(start);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(start);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(start);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    1    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
212	[BUG]  [BUGGY]  out.write('  ');  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('  ');  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('  ');  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;	  out.write(entityValue);    return    1    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
213	[BUG]  [BUGGY]  out.write('.');  return  2  +  (end  -  start)  +  (isHex?  1  :  0)+  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('.');  return  2  +  (end  -  start)  +  (isHex?  1  :  0)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('.');  return  2  +  (end  -  start)  +  (isHex?  1  :  0)+  1;	  out.write('ufffd');    return    2    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
214	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index);  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.charAt(index);  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(index);  if(firstChar  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	54	None	replace
215	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index).toString();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    end    =    input.subSequence(start,    index).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
216	[BUG]  [BUGGY]  if(entityValue  ==  firstChar)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue  ==  firstChar)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue  ==  firstChar)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  if(nextChar    ==    '.')    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
217	[BUG]  [BUGGY]  out.write('n',  start);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('n',  start);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n',  start);	  out.write('n',    firstChar);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
218	[BUG]  [BUGGY]  out.write('n',  nfe);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('n',  nfe);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('n',  nfe);	  out.write('n',    firstChar);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
219	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  10);	  int    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
220	[BUG]  [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue  +  1);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue  +  1);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  out.write(entityValue  +  1);  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
221	[BUG]  [BUGGY]  if(input!=  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(input!=  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(input!=  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
222	[BUG]  [BUGGY]  if(input!=  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(input!=  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(input!=  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
223	[BUG]  [BUGGY]  if(nfe!=  null)  {  if(!isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(nfe!=  null)  {  if(!isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(nfe!=  null)  {  if(!isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  if(nfe!=    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
224	[BUG]  [BUGGY]  int  start  =  input.indexOf(':');  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf(':');  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf(':');  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    start    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
225	[BUG]  [BUGGY]  int  start  =  input.indexOf('  ',  firstChar)+  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.indexOf('  ',  firstChar)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.indexOf('  ',  firstChar)+  1;	  int    start    =    input.indexOf('    ',    firstChar);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
226	[BUG]  [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue  ==  null)  {  out.write(entityValue);  return  2  +  (end  -  start)+  1  +  (isHex?  1  :  0)+  1;  }	  out.write(entityValue);    return    2    +    (end    -    start)+    1    +    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
227	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  +  1)+  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.charAt(index  +  1)+  1;  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(index  +  1)+  1;	  int    firstChar    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
228	[BUG]  [BUGGY]  EntityCollection  entities  =  input.getImplicitReturn();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  EntityCollection  entities  =  input.getImplicitReturn();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	EntityCollection  entities  =  input.getImplicitReturn();	  EntityCollection    entities    =    input.getEntityCollection();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
229	[BUG]  [BUGGY]  EntityCollection  entities  =  input.getOwner();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  EntityCollection  entities  =  input.getOwner();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	EntityCollection  entities  =  input.getOwner();	  EntityCollection    entities    =    input.getEntityCollection();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
230	[BUG]  [BUGGY]  int  firstChar  =  input.length();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.length();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.length();	  int    firstChar    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	20	None	replace
231	[BUG]  [BUGGY]  Integer  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  Integer  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	Integer  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    end    =    input.length();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
232	[BUG]  [BUGGY]  int  start  =  input.lastIndexOf('.',  end);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  start  =  input.lastIndexOf('.',  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  start  =  input.lastIndexOf('.',  end);	  int    start    =    input.lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	67	None	replace
233	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0).toString();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.charAt(0).toString();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(0).toString();	  int    firstChar    =    input.charAt(0).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    11);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
234	[BUG]  [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  }  else  {  return  1;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  }  else  {  return  1;  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue  ==  null)  {  out.write(entityValue);  }  else  {  return  1;  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    else    {    return    1;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
235	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  0).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  0).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  0).toString();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(index,    end).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	10	None	replace
236	[BUG]  [BUGGY]  out.write(''+  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write(''+  input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write(''+  input.subSequence(start,  end).toString(),  10);	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	16	None	replace
237	[BUG]  [BUGGY]  if(entityValue!=  null)  {  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue!=  null)  {  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  if(isHex)    {    int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
238	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index++);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  char  firstChar  =  input.charAt(index++);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	char  firstChar  =  input.charAt(index++);	  char    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
239	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar!=  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar!=  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.subSequence(start,  end).toString();  if(firstChar!=  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    firstChar    =    input.subSequence(index,    end).toString();    if(firstChar    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	18	None	replace
240	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16  +  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16  +  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  16  +  1;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);	  int    end    =    input.subSequence(start,    end).toString(),    16;    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
241	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  12);	  int    end    =    input.subSequence(start,    end).toString(),    16;    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
242	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  8);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString(),  16;  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  8);	  int    end    =    input.subSequence(start,    end).toString(),    16;    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
243	[BUG]  [BUGGY]  out.write('0'  +  input.subSequence(start,  end).toString());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('0'  +  input.subSequence(start,  end).toString());  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0'  +  input.subSequence(start,  end).toString());	  out.write('0');    	non-compiled	[CE]  <identifier>  expected	15	None	replace
244	[BUG]  [BUGGY]  out.write('0'  +  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('0'  +  input.subSequence(start,  end).toString(),  10);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0'  +  input.subSequence(start,  end).toString(),  10);	  out.write('0');    	non-compiled	[CE]  <identifier>  expected	15	None	replace
245	[BUG]  [BUGGY]  out.write('0'  +  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  out.write('0'  +  input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	out.write('0'  +  input.subSequence(start,  end).toString(),  16);	  out.write('0');    	non-compiled	[CE]  <identifier>  expected	15	None	replace
246	[BUG]  [BUGGY]  nfe  =  NumberFormat.getNumberInstance(index,  nfe);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  NumberFormat.getNumberInstance(index,  nfe);  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  NumberFormat.getNumberInstance(index,  nfe);	  nfe    =    NumberFormat.getNumberInstance();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
247	[BUG]  [BUGGY]  nfe  =  NumberFormat.getNumberInstance(input);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe  =  NumberFormat.getNumberInstance(input);  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe  =  NumberFormat.getNumberInstance(input);	  nfe    =    NumberFormat.getNumberInstance();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
248	[BUG]  [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue!=  null)  {  out.write(entityValue);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  out.write(entityValue);  return  1  +  (end  -  start)+  (isHex?  1  :  0)+  1;  }	  out.write(entityValue);    return    1    +    (end    -    start)+    (isHex?    1    :    0)+    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
249	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  end).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  11);	  int    end    =    input.subSequence(index,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
250	[BUG]  [BUGGY]  if(entityValue!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  if(nfe!=    null)    {    if(isHex)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
251	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index,  end).toString();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  firstChar  =  input.charAt(index,  end).toString();  [BUGGY]      }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  firstChar  =  input.charAt(index,  end).toString();	  int    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
252	[BUG]  [BUGGY]  nfe.printStackTrace(start,  end);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  nfe.printStackTrace(start,  end);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	nfe.printStackTrace(start,  end);	  nfe.printStackTrace(start);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
253	[BUG]  [BUGGY]  if(entityValue!=  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue!=  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue!=  null)  {  int  end  =  input.length();  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
254	[BUG]  [BUGGY]  int  end  =  input.length();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.length();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.length();  if(end  >  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }	  int    end    =    input.length();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    10);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
255	[BUG]  [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  if(entityValue  ==  null)  {  out.write(entityValue);  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	if(entityValue  ==  null)  {  out.write(entityValue);  }  else  {  throw  new  NumberFormatException( " ");  }	  if(entityValue!=    null)    {    out.write(entityValue);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
256	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index)-  1;  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  index)-  1;  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index)-  1;  if(end  ==  0)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString()	  int    end    =    input.subSequence(start,    index).toString();    if(end    ==    0)    {    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString()    	non-compiled	[CE]  <identifier>  expected	53	None	replace
257	[BUG]  [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;      [BUGGY]  int  end  =  input.subSequence(start,  index).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [BUGGY]        out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	61	61	1	replace	int  end  =  input.subSequence(start,  index).toString();  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);	  int    end    =    input.subSequence(start,    end).toString();    entityValue    =    Integer.parseInt(input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
