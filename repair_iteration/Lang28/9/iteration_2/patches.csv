bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(0,  index).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(0,  index).toString();  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(0,  index).toString();	  Integer    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
2	[BUG]  [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.subSequence(start,  end).toString();  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.subSequence(start,  end).toString();	  Integer    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
3	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(0,  end).toString();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(0,  end).toString();  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(0,  end).toString();	  Integer    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
4	[BUG]  [BUGGY]  if(!isHex  &&  isDecimal(entityValue,  end))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isDecimal(entityValue,  end))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isDecimal(entityValue,  end))  {	  if(!isHex    &&    isDecimal(start,    end))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
5	[BUG]  [BUGGY]  if(isHex  ||  isDecimal(start,  end))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  isDecimal(start,  end))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  isDecimal(start,  end))  {	  if(!isHex    &&    isDecimal(start,    end))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
6	[BUG]  [BUGGY]  if(!isHex  &&  isDecimal(start,  end  +  1))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isDecimal(start,  end  +  1))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isDecimal(start,  end  +  1))  {	  if(!isHex    &&    isDecimal(start,    end))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
7	[BUG]  [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isDecimal(start,  end))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isDecimal(start,  end))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isDecimal(start,  end)||  isDecimal(start,  end))  {	  if(!isHex    &&    isDecimal(start,    end))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
8	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start)  ==  '-')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  input.charAt(start)  ==  '-')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start)  ==  '-')  {	  if(isHex    &&    input.charAt(start)    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
9	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(index)  ==  '-')  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(index)  ==  '-')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(index)  ==  '-')  {	  if(isHex    &&    input.charAt(start)    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
10	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start  +  1)  ==  '-')  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start  +  1)  ==  '-')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start  +  1)  ==  '-')  {	  if(isHex    &&    input.charAt(start)    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
11	[BUG]  [BUGGY]  if(isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
12	[BUG]  [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
13	[BUG]  [BUGGY]  if(!isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
14	[BUG]  [BUGGY]  if(isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
15	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start  +  1)!=  '-')  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  input.charAt(start  +  1)!=  '-')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start  +  1)!=  '-')  {	  if(isHex    &&    input.charAt(start    +    1)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
16	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start  +  1)!=  '-')  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start  +  1)!=  '-')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start  +  1)!=  '-')  {	  if(isHex    &&    input.charAt(start    +    1)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
17	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAt(end  +  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(end  +  1);	  char    firstChar    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
18	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(index  +  1);	  char    firstChar    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
19	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  end  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(start,  end  +  2);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(start,  end  +  2);	  Integer    input    =    input.subSequence(start,    end    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(index,  end  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(index,  end  +  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(index,  end  +  1);	  Integer    input    =    input.subSequence(start,    end    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  16;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
22	[BUG]  [BUGGY]  Integer  input  =  input.getAscent()  -  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.getAscent()  -  1;  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.getAscent()  -  1;	  Integer    input    =    input.getAscent();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
23	[BUG]  [BUGGY]  Integer  input  =  input.getAscent()  +  1;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.getAscent()  +  1;  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.getAscent()  +  1;	  Integer    input    =    input.getAscent();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
24	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl();  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.getAscentImpl();  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.getAscentImpl();	  Integer    input    =    input.getAscent();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
25	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(index,  end);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(index,  end);  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(index,  end);	  Integer    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
26	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  index);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  index);  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  index);	  Integer    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
27	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end  +  1);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end  +  1);  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end  +  1);	  Integer    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
28	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(0,  end);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(0,  end);  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(0,  end);	  Integer    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
29	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  10;	  Integer    firstChar    =    input.subSequence(start,    end).toString()    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
30	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  '-')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  '-')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)  ==  '-')  {	  if(!isHex    &&    input.charAt(start)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
31	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(index)  ==  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(index)  ==  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(index)  ==  ';')  {	  if(isHex    &&    input.charAt(start)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
32	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start  +  1)  ==  ';')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start  +  1)  ==  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start  +  1)  ==  ';')  {	  if(isHex    &&    input.charAt(start)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start  +  1)!=  ';')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  input.charAt(start  +  1)!=  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start  +  1)!=  ';')  {	  if(isHex    &&    input.charAt(start    +    1)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
34	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start  +  1)!=  ';')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start  +  1)!=  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start  +  1)!=  ';')  {	  if(isHex    &&    input.charAt(start    +    1)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
35	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  10);	  Integer    firstChar    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
36	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  12);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  12);	  Integer    firstChar    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
37	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  8);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  8);	  Integer    firstChar    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
38	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  9);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  9);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  9);	  Integer    firstChar    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
39	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(0,  index);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(0,  index);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(0,  index);	  Integer    input    =    input.subSequence(0,    end);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(1,  end);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(1,  end);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(1,  end);	  Integer    input    =    input.subSequence(0,    end);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(0,  end  +  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(0,  end  +  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(0,  end  +  1);	  Integer    input    =    input.subSequence(0,    end);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(0,  end  -  1);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(0,  end  -  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(0,  end  -  1);	  Integer    input    =    input.subSequence(0,    end);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(index)!=  ':')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  input.charAt(index)!=  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(index)!=  ':')  {	  if(isHex    ||    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  8);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
45	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
46	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  10);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
47	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.charAt(end  +  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAt(end  +  1);	  int    firstChar    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
48	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)!=  ':'  ||  isHex)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start)!=  ':'  ||  isHex)  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)!=  ':'  ||  isHex)  {	  if(isHex    &&    input.charAt(start)!=    ':'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
49	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start)!=  ':'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  input.charAt(start)!=  ':'  &&  isHex)  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start)!=  ':'  &&  isHex)  {	  if(isHex    &&    input.charAt(start)!=    ':'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
50	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(index)!=  ':'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(index)!=  ':'  &&  isHex)  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(index)!=  ':'  &&  isHex)  {	  if(isHex    &&    input.charAt(start)!=    ':'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
51	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index++);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAt(index++);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(index++);	  char    firstChar    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
52	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAt(index  -  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(index  -  1);	  char    firstChar    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
53	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  -  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAt(start  -  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(start  -  1);	  char    firstChar    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
54	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  -  1  +  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAt(end  -  1  +  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(end  -  1  +  1);	  char    firstChar    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
55	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  8;	  Integer    firstChar    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
56	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  12;	  Integer    firstChar    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
57	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  9;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  9;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  9;	  Integer    firstChar    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
58	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start  +  1)!=  ':')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start  +  1)!=  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start  +  1)!=  ':')  {	  if(!isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
59	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)  ==  ':')  {	  if(!isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
60	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(index)!=  ':')  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(index)!=  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(index)!=  ':')  {	  if(!isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
61	[BUG]  [BUGGY]  char  firstChar  =  input.charAtIndex(start);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAtIndex(start);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAtIndex(start);	  int    firstChar    =    input.charAtIndex(start);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
62	[BUG]  [BUGGY]  char  firstChar  =  input.charAtIndex(index);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAtIndex(index);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAtIndex(index);	  int    firstChar    =    input.charAtIndex(start);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
63	[BUG]  [BUGGY]  int  firstChar  =  input.charAtIndex(index);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.charAtIndex(index);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAtIndex(index);	  int    firstChar    =    input.charAtIndex(start);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
64	[BUG]  [BUGGY]  int  firstChar  =  input.charAtIndex(start  +  1);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.charAtIndex(start  +  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAtIndex(start  +  1);	  int    firstChar    =    input.charAtIndex(start);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
65	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(index,  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(index,  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(index,  1);	  Integer    input    =    input.subSequence(index,    end);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
66	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(index)  ==  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  input.charAt(index)  ==  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(index)  ==  ';')  {	  if(isHex    ||    input.charAt(start)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
67	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  ';')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)  ==  ';')  {	  if(isHex    ||    input.charAt(start)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
68	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  16);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
69	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start  +  1)  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start  +  1)  ==  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start  +  1)  ==  ':')  {	  if(isHex    &&    input.charAt(start    +    1)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
70	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start  +  1)!=  ':')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  input.charAt(start  +  1)!=  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start  +  1)!=  ':')  {	  if(isHex    &&    input.charAt(start    +    1)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
71	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start  +  1)!=  ':'  ||  input.charAt(start  +  1)  ==  ':')  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start  +  1)!=  ':'  ||  input.charAt(start  +  1)  ==  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start  +  1)!=  ':'  ||  input.charAt(start  +  1)  ==  ':')  {	  if(isHex    &&    input.charAt(start    +    1)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
72	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.charAt(index  +  2);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAt(index  +  2);	  int    firstChar    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
73	[BUG]  [BUGGY]  if(isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
74	[BUG]  [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
75	[BUG]  [BUGGY]  if(!isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
76	[BUG]  [BUGGY]  char  firstChar  =  input.charAtIndex(0,  end);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAtIndex(0,  end);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAtIndex(0,  end);	  char    firstChar    =    input.charAtIndex(end);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
77	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(index  +  1)!=  ':')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(index  +  1)!=  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(index  +  1)!=  ':')  {	  if(isHex    &&    input.charAt(index)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
78	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(index)!=  ':'  ||  input.charAt(index  +  1)!=  ':')  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(index)!=  ':'  ||  input.charAt(index  +  1)!=  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(index)!=  ':'  ||  input.charAt(index  +  1)!=  ':')  {	  if(isHex    &&    input.charAt(index)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
79	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  -  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.charAt(index  -  2);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAt(index  -  2);	  int    firstChar    =    input.charAt(index    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
80	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(index,  end  -  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(index,  end  -  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(index,  end  -  1);	  Integer    input    =    input.subSequence(start,    end    -    1);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
81	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(start,  index  +  1);	  Integer    input    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
82	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  -  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(start,  index  -  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(start,  index  -  1);	  Integer    input    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
83	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)!=  'n'  ||  input.charAt(end)  ==  'r')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start)!=  'n'  ||  input.charAt(end)  ==  'r')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)!=  'n'  ||  input.charAt(end)  ==  'r')  {	  if(!isHex    &&    input.charAt(start)!=    'n'    &&    input.charAt(end)    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
84	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  'n'  ||  input.charAt(end)  ==  'r')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  'n'  ||  input.charAt(end)  ==  'r')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)  ==  'n'  ||  input.charAt(end)  ==  'r')  {	  if(!isHex    &&    input.charAt(start)!=    'n'    &&    input.charAt(end)    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
85	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)!=  'n'  ||  input.charAt(end)  ==  'r')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start)!=  'n'  ||  input.charAt(end)  ==  'r')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)!=  'n'  ||  input.charAt(end)  ==  'r')  {	  if(!isHex    &&    input.charAt(start)!=    'n'    &&    input.charAt(end)    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
86	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(index)!=  ';')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(index)!=  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(index)!=  ';')  {	  if(!isHex    &&    input.charAt(start)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
87	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start)  ==  ':')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  input.charAt(start)  ==  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start)  ==  ':')  {	  if(isHex    &&    input.charAt(start)    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
88	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(index)  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(index)  ==  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(index)  ==  ':')  {	  if(isHex    &&    input.charAt(start)    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
89	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ':'  ||  input.charAt(start)  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ':'  ||  input.charAt(start)  ==  ':')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)  ==  ':'  ||  input.charAt(start)  ==  ':')  {	  if(isHex    &&    input.charAt(start)    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
90	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAt(1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(1);	  int    firstChar    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
91	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)!=  ';'  ||  isHex)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start)!=  ';'  ||  isHex)  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)!=  ';'  ||  isHex)  {	  if(isHex    &&    input.charAt(start)!=    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
92	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start)!=  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  ||  input.charAt(start)!=  ';'  &&  isHex)  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start)!=  ';'  &&  isHex)  {	  if(isHex    &&    input.charAt(start)!=    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
93	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ';'  &&  isHex)  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)  ==  ';'  &&  isHex)  {	  if(isHex    &&    input.charAt(start)!=    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
94	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ':'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ':'  &&  isHex)  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)  ==  ':'  &&  isHex)  {	  if(isHex    &&    input.charAt(start)!=    ':'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
95	[BUG]  [BUGGY]  if(start  ||  input.charAt(start)  ==  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(start  ||  input.charAt(start)  ==  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(start  ||  input.charAt(start)  ==  ';')  {	  if(isHex    ||    input.charAt(start)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
96	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  'n'  &&  input.charAt(end)  ==  'r')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start)  ==  'n'  &&  input.charAt(end)  ==  'r')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)  ==  'n'  &&  input.charAt(end)  ==  'r')  {	  if(!isHex    &&    input.charAt(start)!=    'n'    &&    input.charAt(end)    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
97	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)!=  'n'  &&  input.charAt(end)  >=  'r')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start)!=  'n'  &&  input.charAt(end)  >=  'r')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)!=  'n'  &&  input.charAt(end)  >=  'r')  {	  if(!isHex    &&    input.charAt(start)!=    'n'    &&    input.charAt(end)    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
98	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end  -  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end  -  1);  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end  -  1);	  Integer    firstChar    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
99	[BUG]  [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  firstChar  ==  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  firstChar  ==  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  firstChar  ==  ';')  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
100	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(start  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.charAt(start  -  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAt(start  -  1);	  int    firstChar    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
101	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  end  +  1  -  start);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(start,  end  +  1  -  start);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(start,  end  +  1  -  start);	  Integer    input    =    input.subSequence(start,    end    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
102	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  -  1)+  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.charAt(index  -  1)+  1;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAt(index  -  1)+  1;	  int    firstChar    =    input.charAt(index    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
103	[BUG]  [BUGGY]  int  firstChar  =  input.charAtIndex(start  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.charAtIndex(start  -  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAtIndex(start  -  1);	  int    firstChar    =    input.charAtIndex(start);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
104	[BUG]  [BUGGY]  if(!isHex  ||  isDecimal(start,  end))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  ||  isDecimal(start,  end))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  ||  isDecimal(start,  end))  {	  if(!isHex    &&    isDecimal(start,    end))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
105	[BUG]  [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isInfinite(start,  end))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isInfinite(start,  end))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isDecimal(start,  end)||  isInfinite(start,  end))  {	  if(!isHex    &&    isDecimal(start,    end))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
106	[BUG]  [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isEquivalentTo(start,  end))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isEquivalentTo(start,  end))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isDecimal(start,  end)||  isEquivalentTo(start,  end))  {	  if(!isHex    &&    isDecimal(start,    end))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
107	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  16  +  1;	  Integer    firstChar    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
108	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  index).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  index).toString();  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  index).toString();	  Integer    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
109	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  start).toString();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  start).toString();  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  start).toString();	  Integer    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
110	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(0,  start);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(0,  start);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(0,  start);	  Integer    input    =    input.subSequence(0,    end);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
111	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  start);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(start,  start);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(start,  start);	  Integer    input    =    input.subSequence(index,    end);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
112	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString()  -  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString()  -  1;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString()  -  1;	  Integer    firstChar    =    input.subSequence(start,    end).toString()    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
113	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  16  +  1;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
114	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  end  -  1  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.subSequence(start,  end  -  1  +  1);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(start,  end  -  1  +  1);	  Integer    input    =    input.subSequence(start,    end    -    1);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
115	[BUG]  [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  firstChar))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  firstChar))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  firstChar))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
116	[BUG]  [BUGGY]  if(isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
117	[BUG]  [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FACTOR))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FACTOR))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FACTOR))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
118	[BUG]  [BUGGY]  Integer  input  =  input.getValue();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.getValue();  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.getValue();	  Integer    input    =    input.subSequence(index,    end);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
119	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
120	[BUG]  [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isSameAssign(start,  end))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isSameAssign(start,  end))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isDecimal(start,  end)||  isSameAssign(start,  end))  {	  if(!isHex    &&    isDecimal(start,    end))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
121	[BUG]  [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isSameGrandparent(start,  end))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isDecimal(start,  end)||  isSameGrandparent(start,  end))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isDecimal(start,  end)||  isSameGrandparent(start,  end))  {	  if(!isHex    &&    isDecimal(start,    end))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
122	[BUG]  [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.subSequence(start,  end).toString();  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.subSequence(start,  end).toString();	  Integer    firstChar    =    input.subSequence(index,    end).toString();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
123	[BUG]  [BUGGY]  if(input.charAt(start)!=  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(input.charAt(start)!=  ';')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(input.charAt(start)!=  ';')  {	  if(isHex    &&    input.charAt(start)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
124	[BUG]  [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_VALUES))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_VALUES))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_VALUES))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
125	[BUG]  [BUGGY]  char  firstChar  =  input.charAtIndex();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  char  firstChar  =  input.charAtIndex();  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAtIndex();	  char    firstChar    =    input.charAtIndex(end);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
126	[BUG]  [BUGGY]  Integer  input  =  input.read();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  input  =  input.read();  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.read();	  Integer    input    =    input.getAscent();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
127	[BUG]  [BUGGY]  if(!isHex  &&  input.enabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.enabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.enabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
128	[BUG]  [BUGGY]  if(!isHex  &&  input.equals(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.equals(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.equals(Feature.QUOTE_FIELD_NAME))  {	  if(!isHex    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
129	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  17;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
130	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)  ==  '-'  ||  input.charAt(start)  ==  '+')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(isHex  &&  input.charAt(start)  ==  '-'  ||  input.charAt(start)  ==  '+')  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)  ==  '-'  ||  input.charAt(start)  ==  '+')  {	  if(isHex    &&    input.charAt(start)    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
131	[BUG]  [BUGGY]  int  firstChar  =  input.charAtIndex(end);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  int  firstChar  =  input.charAtIndex(end);  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAtIndex(end);	  int    firstChar    =    input.charAtIndex(start);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
132	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)!=  ':'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  if(!isHex  &&  input.charAt(start)!=  ':'  &&  isHex)  {  [BUGGY]      entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)!=  ':'  &&  isHex)  {	  if(!isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
133	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  4;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  4;  [BUGGY]      if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  4;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    8;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
