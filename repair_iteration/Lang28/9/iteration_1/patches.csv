bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  char  firstChar  =  input.charAt(index);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(index);	      char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
2	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  char  firstChar  =  input.charAt(0);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(0);	      char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
3	[BUG]  [BUGGY]  char  firstChar  =  input.charAtIndex(end);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  char  firstChar  =  input.charAtIndex(end);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAtIndex(end);	      char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(index,  end);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  input  =  input.subSequence(index,  end);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(index,  end);	      Integer    input    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
5	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  input  =  input.subSequence(start,  index);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(start,  index);	      Integer    input    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
6	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  end  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  input  =  input.subSequence(start,  end  +  1);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(start,  end  +  1);	      Integer    input    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
7	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(0,  end);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  input  =  input.subSequence(0,  end);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(0,  end);	      Integer    input    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ';')  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ';')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)  ==  ';')  {	  if(isHex    &&    input.charAt(start)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start  +  1)!=  ';')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  &&  input.charAt(start  +  1)!=  ';')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start  +  1)!=  ';')  {	  if(isHex    &&    input.charAt(start)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  int  firstChar  =  input.charAt(index  +  1);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAt(index  +  1);	      int    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
11	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  int  firstChar  =  input.charAt(index  -  1);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAt(index  -  1);	      int    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
12	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  int  firstChar  =  input.charAt(0);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAt(0);	      int    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
13	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start)!=  ':')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  ||  input.charAt(start)!=  ':')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start)!=  ':')  {	  if(isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
14	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start  +  1)!=  ':')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  &&  input.charAt(start  +  1)!=  ':')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start  +  1)!=  ':')  {	  if(isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
15	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(index)!=  ':')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  &&  input.charAt(index)!=  ':')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(index)!=  ':')  {	  if(isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
16	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString()  +  1;	      Integer    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  10);	      Integer    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString()  +  1;	      Integer    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
19	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  16;	      Integer    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(index,  end).toString();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  firstChar  =  input.subSequence(index,  end).toString();  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(index,  end).toString();	      Integer    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
22	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
23	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  9;  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  9;  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  9;	      Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
25	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)!=  ';')  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(!isHex  &&  input.charAt(start)!=  ';')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)!=  ';')  {	  if(isHex    ||    input.charAt(start)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
26	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start)  ==  ';')  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  ||  input.charAt(start)  ==  ';')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start)  ==  ';')  {	  if(isHex    ||    input.charAt(start)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
27	[BUG]  [BUGGY]  if(!isHex  &&  isDecimal(start,  end))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(!isHex  &&  isDecimal(start,  end))  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isDecimal(start,  end))  {	  if(!isHex)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(start  +  1);	      char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
29	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start)!=  '-')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  ||  input.charAt(start)!=  '-')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start)!=  '-')  {	  if(isHex    &&    input.charAt(start)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)  ==  '-')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  &&  input.charAt(start)  ==  '-')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)  ==  '-')  {	  if(isHex    &&    input.charAt(start)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start  +  1)!=  '-')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  &&  input.charAt(start  +  1)!=  '-')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start  +  1)!=  '-')  {	  if(isHex    &&    input.charAt(start)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  int  firstChar  =  input.charAtIndex(start);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  int  firstChar  =  input.charAtIndex(start);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAtIndex(start);	      int    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end);  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!isHex)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
35	[BUG]  [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isHex)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)!=  '-')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(!isHex  &&  input.charAt(start)!=  '-')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)!=  '-')  {	  if(!isHex)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ':')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  &&  input.charAt(start)  ==  ':')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)  ==  ':')  {	  if(isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)!=  ':')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(!isHex  &&  input.charAt(start)!=  ':')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)!=  ':')  {	  if(isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)!=  ':'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  &&  input.charAt(start)!=  ':'  &&  isHex)  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)!=  ':'  &&  isHex)  {	  if(isHex    &&    input.charAt(start)!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
40	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  int  firstChar  =  input.charAt(start  +  1);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	int  firstChar  =  input.charAt(start  +  1);	      int    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  end  -  1);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  input  =  input.subSequence(start,  end  -  1);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.subSequence(start,  end  -  1);	      Integer    input    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
42	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  char  firstChar  =  input.charAt(end  -  1);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	char  firstChar  =  input.charAt(end  -  1);	      char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
43	[BUG]  [BUGGY]  Integer  input  =  input.getAscent();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  input  =  input.getAscent();  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  input  =  input.getAscent();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  16);	      Integer    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
45	[BUG]  [BUGGY]  if(!isHex  &&  input.charAt(start)!=  'n'  &&  input.charAt(end)  ==  'r')  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(!isHex  &&  input.charAt(start)!=  'n'  &&  input.charAt(end)  ==  'r')  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex  &&  input.charAt(start)!=  'n'  &&  input.charAt(end)  ==  'r')  {	  if(!isHex)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)!=  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  if(isHex  &&  input.charAt(start)!=  ';'  &&  isHex)  {  [BUGGY]    entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)!=  ';'  &&  isHex)  {	  if(isHex    &&    input.charAt(start)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
47	[BUG]  [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {    [BUGGY]  Integer  firstChar  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]    if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	Integer  firstChar  =  input.subSequence(start,  end).toString(),  16);	      Integer    firstChar    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
