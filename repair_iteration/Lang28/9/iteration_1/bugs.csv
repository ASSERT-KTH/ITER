bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!isHex)  {  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]  if(!isHex)  {  [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(!isHex)  {	if(isHex)  {  	non-compiled	[CE]  <identifier>  expected	18	None	replace
2	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)!=  ';')  {  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]  if(isHex  &&  input.charAt(start)!=  ';')  {  [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)!=  ';')  {	if(isHex)  {  	non-compiled	[CE]  <identifier>  expected	18	None	replace
3	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)!=  ':')  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]  if(isHex  &&  input.charAt(start)!=  ':')  {  [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)!=  ':')  {	if(isHex)  {  	non-compiled	[CE]  <identifier>  expected	18	None	replace
4	[BUG]  [BUGGY]  if(isHex  &&  input.charAt(start)!=  '-')  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]  if(isHex  &&  input.charAt(start)!=  '-')  {  [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  &&  input.charAt(start)!=  '-')  {	if(isHex)  {  	non-compiled	[CE]  <identifier>  expected	18	None	replace
5	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]            ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	  	if(isHex)  {  	non-compiled	[CE]  <identifier>  expected	18	None	replace
6	[BUG]  [BUGGY]    Integer  firstChar  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    Integer  firstChar  =  input.subSequence(start,  end).toString();  [BUGGY]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	    Integer  firstChar  =  input.subSequence(start,  end).toString();		non-compiled	[CE]  <identifier>  expected	19	None	add
7	[BUG]  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	    Integer  entityValue  =  input.subSequence(start,  end).toString(),  16;		non-compiled	[CE]  <identifier>  expected	19	None	add
8	[BUG]  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    Integer  entityValue  =  input.subSequence(start,  end).toString();  [BUGGY]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	    Integer  entityValue  =  input.subSequence(start,  end).toString();		non-compiled	[CE]  <identifier>  expected	19	None	add
9	[BUG]  [BUGGY]    int  firstChar  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    int  firstChar  =  input.charAt(start);  [BUGGY]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	    int  firstChar  =  input.charAt(start);		non-compiled	[CE]  <identifier>  expected	19	None	add
10	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    char  firstChar  =  input.charAt(start);  [BUGGY]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	    char  firstChar  =  input.charAt(start);		non-compiled	[CE]  <identifier>  expected	19	None	add
11	[BUG]  [BUGGY]    int  firstChar  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    int  firstChar  =  input.charAt(end);  [BUGGY]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	    int  firstChar  =  input.charAt(end);		non-compiled	[CE]  <identifier>  expected	19	None	add
12	[BUG]  [BUGGY]    int  firstChar  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    int  firstChar  =  input.charAt(index);  [BUGGY]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	    int  firstChar  =  input.charAt(index);		non-compiled	[CE]  <identifier>  expected	19	None	add
13	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    char  firstChar  =  input.charAt(end);  [BUGGY]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	    char  firstChar  =  input.charAt(end);		non-compiled	[CE]  <identifier>  expected	19	None	add
14	[BUG]  [BUGGY]  if(isHex  ||  input.charAt(start)!=  ';')  {  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]  if(isHex  ||  input.charAt(start)!=  ';')  {  [BUGGY]  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	if(isHex  ||  input.charAt(start)!=  ';')  {	if(isHex)  {  	non-compiled	[CE]  <identifier>  expected	18	None	replace
15	[BUG]  [BUGGY]    Integer  input  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  [BUGGY]    Integer  input  =  input.subSequence(start,  end);  [BUGGY]  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  return  0;  }  out.write(entityValue);  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	54	54	1	replace	    Integer  input  =  input.subSequence(start,  end);		non-compiled	[CE]  <identifier>  expected	19	None	add
