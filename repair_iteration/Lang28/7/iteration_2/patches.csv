bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  16);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
2	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  12);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
3	[BUG]  [BUGGY]  Integer  input  =  input.getIntValue()  /  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getIntValue()  /  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getIntValue()  /  1;	  Integer    input    =    input.getIntValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
4	[BUG]  [BUGGY]  while(input.charAt(index  +  1)  ==  ';')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(index  +  1)  ==  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(index  +  1)  ==  ';')  {	  while(input.charAt(index)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  while(input.charAt(index  -  1)  ==  ';')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(index  -  1)  ==  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(index  -  1)  ==  ';')  {	  while(input.charAt(index)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  while(input.charAt(start  -  1)  ==  ';')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start  -  1)  ==  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start  -  1)  ==  ';')  {	  while(input.charAt(end    -    1)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
7	[BUG]  [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end  -  1)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end  -  1)!=  ';')  {	  while(input.charAt(end    -    1)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
8	[BUG]  [BUGGY]  while(input.charAt(start)  >=  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  >=  ';'  &&  isHex)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  >=  ';'  &&  isHex)  {	  while(input.charAt(end)    >=    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
9	[BUG]  [BUGGY]  int  end  =  output.length();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  output.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  output.length();	  int    end    =    input.length()    +    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  Integer  end  =  input.length();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  end  =  input.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  end  =  input.length();	  int    end    =    input.length()    +    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  Integer  input  =  input.substring(0,  end);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.substring(0,  end);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.substring(0,  end);	  Integer    input    =    input.substring(start,    end);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
12	[BUG]  [BUGGY]  Integer  input  =  input.substring(start,  end  +  1);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.substring(start,  end  +  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.substring(start,  end  +  1);	  Integer    input    =    input.substring(start,    end);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
13	[BUG]  [BUGGY]  Integer  input  =  input.substring(start,  index);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.substring(start,  index);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.substring(start,  index);	  Integer    input    =    input.substring(start,    end);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
14	[BUG]  [BUGGY]  Integer  input  =  input.substring(start,  end  -  1);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.substring(start,  end  -  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.substring(start,  end  -  1);	  Integer    input    =    input.substring(start,    end);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
15	[BUG]  [BUGGY]  int  end  =  input.indexOf(';')/  2;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';')/  2;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';')/  2;	  int    end    =    input.indexOf(';')+    2;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
16	[BUG]  [BUGGY]  int  end  =  input.indexOf(';')-  2;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';')-  2;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';')-  2;	  int    end    =    input.indexOf(';')+    2;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
17	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar)+  2;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  firstChar)+  2;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  firstChar)+  2;	  int    end    =    input.indexOf(';')+    2;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
18	[BUG]  [BUGGY]  Integer  input  =  firstChar.getValue()  -  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  firstChar.getValue()  -  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  firstChar.getValue()  -  1;	  Integer    input    =    input.getValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
19	[BUG]  [BUGGY]  Integer  input  =  input.getKey()  -  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getKey()  -  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getKey()  -  1;	  Integer    input    =    input.getValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
20	[BUG]  [BUGGY]  Integer  input  =  firstChar.getValue();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  firstChar.getValue();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  firstChar.getValue();	  Integer    input    =    input.getValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
21	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  &&  isHex)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  &&  isHex)  {	  while(input.charAt(end)    ==    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  while(input.charAt(index)  ==  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(index)  ==  ';'  &&  isHex)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(index)  ==  ';'  &&  isHex)  {	  while(input.charAt(end)    ==    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  while(input.charAt(end)  ==  ';'  ||  isHex)  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end)  ==  ';'  ||  isHex)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end)  ==  ';'  ||  isHex)  {	  while(input.charAt(end)    ==    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  end)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  end)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  &&  end  >=  end)  {	  while(input.charAt(end)    ==    ';'    &&    start    >=    end)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
25	[BUG]  [BUGGY]  while(input.charAt(index)  ==  ';'  &&  start  >=  end)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(index)  ==  ';'  &&  start  >=  end)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(index)  ==  ';'  &&  start  >=  end)  {	  while(input.charAt(end)    ==    ';'    &&    start    >=    end)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
26	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end!=  end)  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end!=  end)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  &&  end!=  end)  {	  while(input.charAt(end)    ==    ';'    &&    start    >=    end)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
27	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  &&  start  >=  end)  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  &&  start  >=  end)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  &&  start  >=  end)  {	  while(input.charAt(end)    ==    ';'    &&    start    >=    end)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
28	[BUG]  [BUGGY]  out.write('n',  firstChar);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  out.write('n',  firstChar);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	out.write('n',  firstChar);	  out.write('n');    	non-compiled	[CE]  <identifier>  expected	36	None	replace
29	[BUG]  [BUGGY]  out.write('x');  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  out.write('x');  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	out.write('x');	  out.write('n');    	non-compiled	[CE]  <identifier>  expected	36	None	replace
30	[BUG]  [BUGGY]  out.write('0');  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  out.write('0');  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	out.write('0');	  out.write('n');    	non-compiled	[CE]  <identifier>  expected	36	None	replace
31	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  -1);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  -1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  -1);	  int    end    =    input.indexOf(';',    0);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
32	[BUG]  [BUGGY]  Integer  input  =  input.getInt()  -  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getInt()  -  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getInt()  -  1;	  Integer    input    =    input.getAscent()    -    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscent()  -  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  firstChar.getAscent()  -  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  firstChar.getAscent()  -  1;	  Integer    input    =    input.getAscent()    -    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
34	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAscent();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  firstChar.getAscent();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  firstChar.getAscent();	  Integer    input    =    input.getAscent()    -    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
35	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString()  +  1;	  Integer    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  index).toString();  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  entityValue  =  input.subSequence(start,  index).toString();	  Integer    entityValue    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
37	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  ||  firstChar  ==  '-')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  ||  firstChar  ==  '-')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  ||  firstChar  ==  '-')  {	  while(input.charAt(start)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  nfe  =  input.getNumber();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  nfe  =  input.getNumber();  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	nfe  =  input.getNumber();	  nfe    =    input.getNumberInput();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
39	[BUG]  [BUGGY]  nfe  =  input.getNumberInput()  +  1;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  nfe  =  input.getNumberInput()  +  1;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	nfe  =  input.getNumberInput()  +  1;	  nfe    =    input.getNumberInput();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
40	[BUG]  [BUGGY]  nfe  =  input.getNumberChar();  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  nfe  =  input.getNumberChar();  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	nfe  =  input.getNumberChar();	  nfe    =    input.getNumberInput();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
41	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  start  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  start  +  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  start  +  1);	  int    end    =    input.indexOf(';',    start);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
42	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  index);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  index);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  index);	  int    end    =    input.indexOf(';',    start);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
43	[BUG]  [BUGGY]  Integer  input  =  input.getImplicitValue();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getImplicitValue();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getImplicitValue();	  Integer    input    =    input.getKey();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
44	[BUG]  [BUGGY]  int  start  =  input.length();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  start  =  input.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  start  =  input.length();	  int    end    =    input.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  2);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  2);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  2);	  int    end    =    input.indexOf(';',    1);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
46	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  3);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  3);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  3);	  int    end    =    input.indexOf(';',    1);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
47	[BUG]  [BUGGY]  while(input.charAt(index  +  1)!=  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(index  +  1)!=  ';'  &&  isHex)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(index  +  1)!=  ';'  &&  isHex)  {	  while(input.charAt(index)!=    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
48	[BUG]  [BUGGY]  Integer  input  =  input.getValue()  /  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getValue()  /  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getValue()  /  1;	  Integer    input    =    input.getValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
49	[BUG]  [BUGGY]  while(input.charAt(end  +  1)!=  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end  +  1)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end  +  1)!=  ';')  {	  while(input.charAt(index    +    1)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  while(input.charAt(start  +  1)!=  ';')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start  +  1)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start  +  1)!=  ';')  {	  while(input.charAt(index    +    1)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  out.write(''+  firstChar);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  out.write(''+  firstChar);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	out.write(''+  firstChar);	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	39	None	replace
52	[BUG]  [BUGGY]  out.write('  ',  firstChar);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  out.write('  ',  firstChar);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	out.write('  ',  firstChar);	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	39	None	replace
53	[BUG]  [BUGGY]  out.write(firstChar);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  out.write(firstChar);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	out.write(firstChar);	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	39	None	replace
54	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  nfe  =  input.getNumberFormatException(start);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	nfe  =  input.getNumberFormatException(start);	  nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
55	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(index);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  nfe  =  input.getNumberFormatException(index);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	nfe  =  input.getNumberFormatException(index);	  nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
56	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start,  end);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  nfe  =  input.getNumberFormatException(start,  end);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	nfe  =  input.getNumberFormatException(start,  end);	  nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
57	[BUG]  [BUGGY]  nfe  =  input.getNumberFormatException(start  +  1);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  nfe  =  input.getNumberFormatException(start  +  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	nfe  =  input.getNumberFormatException(start  +  1);	  nfe    =    input.getNumberFormatException();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
58	[BUG]  [BUGGY]  Integer  input  =  firstChar.getIntValue()  -  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  firstChar.getIntValue()  -  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  firstChar.getIntValue()  -  1;	  Integer    input    =    input.getIntValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
59	[BUG]  [BUGGY]  Integer  input  =  firstChar.getIntValue();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  firstChar.getIntValue();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  firstChar.getIntValue();	  Integer    input    =    input.getIntValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
60	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  8);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
61	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  10);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
62	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  firstChar  +  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  firstChar  +  1);	  int    end    =    input.indexOf(';',    firstChar);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
63	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar  -  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  firstChar  -  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  firstChar  -  1);	  int    end    =    input.indexOf(';',    firstChar);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
64	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  10;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
65	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  8;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
66	[BUG]  [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  entityValue  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  entityValue  =  input.subSequence(start,  end).toString(),  10;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
67	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  12;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
68	[BUG]  [BUGGY]  Integer  input  =  input.getAssignedValue()  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAssignedValue()  +  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAssignedValue()  +  1;	  Integer    input    =    input.getAssignedValue();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
69	[BUG]  [BUGGY]  Integer  input  =  input.getAssignedValue()  -  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAssignedValue()  -  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAssignedValue()  -  1;	  Integer    input    =    input.getAssignedValue();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
70	[BUG]  [BUGGY]  Integer  input  =  firstChar.getAssignedValue();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  firstChar.getAssignedValue();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  firstChar.getAssignedValue();	  Integer    input    =    input.getAssignedValue();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
71	[BUG]  [BUGGY]  Integer  input  =  input.getUpperBound();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getUpperBound();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getUpperBound();	  Integer    input    =    input.getLongValue();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
72	[BUG]  [BUGGY]  while(input.charAt(start)  >=  ';'  &&  end  <  =  '9')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  >=  ';'  &&  end  <  =  '9')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  >=  ';'  &&  end  <  =  '9')  {	  while(input.charAt(start)!=    ';'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
73	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';'  &&  end  ==  '9')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)!=  ';'  &&  end  ==  '9')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)!=  ';'  &&  end  ==  '9')  {	  while(input.charAt(start)!=    ';'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
74	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';'  &&  end  >=  '9')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)!=  ';'  &&  end  >=  '9')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)!=  ';'  &&  end  >=  '9')  {	  while(input.charAt(start)!=    ';'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
75	[BUG]  [BUGGY]  while(input!=  null  &&  input.charAt(index  +  1)!=  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input!=  null  &&  input.charAt(index  +  1)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input!=  null  &&  input.charAt(index  +  1)!=  ';')  {	  while(input!=    null    &&    input.charAt(index)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
76	[BUG]  [BUGGY]  while(input!=  null  &&  input.charAt(end)!=  ';')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input!=  null  &&  input.charAt(end)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input!=  null  &&  input.charAt(end)!=  ';')  {	  while(input!=    null    &&    input.charAt(index)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
77	[BUG]  [BUGGY]  while(input!=  null  &&  input.charAt(start)!=  ';')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input!=  null  &&  input.charAt(start)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input!=  null  &&  input.charAt(start)!=  ';')  {	  while(input!=    null    &&    input.charAt(index)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
78	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl()  -  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAscentImpl()  -  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAscentImpl()  -  1;	  Integer    input    =    input.getAscentImpl();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
79	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl()  +  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAscentImpl()  +  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAscentImpl()  +  1;	  Integer    input    =    input.getAscentImpl();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
80	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl(),  index  +  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAscentImpl(),  index  +  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAscentImpl(),  index  +  1;	  Integer    input    =    input.getAscentImpl();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
81	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  end  +  2);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(start,  end  +  2);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(start,  end  +  2);	  Integer    input    =    input.subSequence(start,    end    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
82	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(start,  index  +  1);	  Integer    input    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
83	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(0,  index);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(0,  index);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(0,  index);	  Integer    input    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
84	[BUG]  [BUGGY]  char  end  =  input.length();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  char  end  =  input.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	char  end  =  input.length();	  int    end    =    input.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
85	[BUG]  [BUGGY]  int  end  =  firstChar.length();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  firstChar.length();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  firstChar.length();	  int    end    =    input.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
86	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(0,  end);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(0,  end);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(0,  end);	  Integer    input    =    input.subSequence(index,    end);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
87	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(index,  end  -  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(index,  end  -  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(index,  end  -  1);	  Integer    input    =    input.subSequence(start,    end    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
88	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  -  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(start,  index  -  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(start,  index  -  1);	  Integer    input    =    input.subSequence(start,    end    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
89	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar)/  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  firstChar)/  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  firstChar)/  1;	  int    end    =    input.indexOf(';')/    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
90	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf(';')/  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.lastIndexOf(';')/  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.lastIndexOf(';')/  1;	  int    end    =    input.indexOf(';')/    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
91	[BUG]  [BUGGY]  int  end  =  input.indexOf(';')/  3;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';')/  3;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';')/  3;	  int    end    =    input.indexOf(';')/    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
92	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  ||  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  ||  firstChar  ==  'x')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  ||  firstChar  ==  'x')  {	  while(input.charAt(end)    ==    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
93	[BUG]  [BUGGY]  while(input.charAt(index)  ==  ';'  ||  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(index)  ==  ';'  ||  firstChar  ==  'x')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(index)  ==  ';'  ||  firstChar  ==  'x')  {	  while(input.charAt(end)    ==    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
94	[BUG]  [BUGGY]  while(input.charAt(end)  ==  ';'  &&  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end)  ==  ';'  &&  firstChar  ==  'x')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end)  ==  ';'  &&  firstChar  ==  'x')  {	  while(input.charAt(end)    ==    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
95	[BUG]  [BUGGY]  Integer  input  =  input.getAscentInt();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAscentInt();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAscentInt();	  Integer    input    =    input.getAscentValue();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
96	[BUG]  [BUGGY]  Integer  input  =  input.getAscentValue()  +  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAscentValue()  +  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAscentValue()  +  1;	  Integer    input    =    input.getAscentValue();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
97	[BUG]  [BUGGY]  Integer  input  =  input.getAscentValue()  -  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAscentValue()  -  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAscentValue()  -  1;	  Integer    input    =    input.getAscentValue();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
98	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar)+  3;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  firstChar)+  3;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  firstChar)+  3;	  int    end    =    input.indexOf(';',    firstChar)+    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
99	[BUG]  [BUGGY]  int  end  =  input.lastIndexOf(';',  firstChar)+  1;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.lastIndexOf(';',  firstChar)+  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.lastIndexOf(';',  firstChar)+  1;	  int    end    =    input.indexOf(';',    firstChar)+    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
100	[BUG]  [BUGGY]  while(input.charAt(end)  >=  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end)  >=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end)  >=  ';')  {	  while(input.charAt(start)    >=    ';')    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
101	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  index  +  2);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  index  +  2);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  index  +  2);	  int    end    =    input.indexOf(';',    index    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
102	[BUG]  [BUGGY]  Integer  input  =  input.getIntValue()  *  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getIntValue()  *  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getIntValue()  *  1;	  Integer    input    =    input.getIntValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
103	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  <  =  '9')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  <  =  '9')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  &&  end  <  =  '9')  {	  while(input.charAt(start)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
104	[BUG]  [BUGGY]  while(input.charAt(end)  >=  ';'  &&  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end)  >=  ';'  &&  firstChar  ==  'x')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end)  >=  ';'  &&  firstChar  ==  'x')  {	  while(input.charAt(end)    ==    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
105	[BUG]  [BUGGY]  while(input.charAt(end)!=  ';'  &&  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end)!=  ';'  &&  firstChar  ==  'x')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end)!=  ';'  &&  firstChar  ==  'x')  {	  while(input.charAt(end)    ==    ';'    ||    firstChar    ==    'x')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
106	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  end  -  1  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(start,  end  -  1  +  1);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(start,  end  -  1  +  1);	  Integer    input    =    input.subSequence(start,    end    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
107	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  end  -  2);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(start,  end  -  2);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(start,  end  -  2);	  Integer    input    =    input.subSequence(start,    end    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
108	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  start)/  1;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  start)/  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  start)/  1;	  int    end    =    input.indexOf(';')/    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
109	[BUG]  [BUGGY]  int  end  =  input.indexOf(';')-  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';')-  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';')-  1;	  int    end    =    input.indexOf(';')/    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
110	[BUG]  [BUGGY]  while(input.charAt(end  -  1)  ==  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end  -  1)  ==  ';'  &&  isHex)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end  -  1)  ==  ';'  &&  isHex)  {	  while(input.charAt(end    -    1)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
111	[BUG]  [BUGGY]  while(input.charAt(end  -  1)  ==  ';'  ||  firstChar  ==  'x')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end  -  1)  ==  ';'  ||  firstChar  ==  'x')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end  -  1)  ==  ';'  ||  firstChar  ==  'x')  {	  while(input.charAt(end    -    1)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
112	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  start)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  start)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  &&  end  >=  start)  {	  while(input.charAt(end)    ==    ';'    &&    start    >=    end)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
113	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  input.charAt(end))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  input.charAt(end))  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  &&  end  >=  input.charAt(end))  {	  while(input.charAt(end)    ==    ';'    &&    start    >=    end)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
114	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  17);	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    10);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
115	[BUG]  [BUGGY]  out.write('  ',  start);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  out.write('  ',  start);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	out.write('  ',  start);	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	39	None	replace
116	[BUG]  [BUGGY]  while(input.charAt(start)!=  ';'  &&  end  ==  ')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)!=  ';'  &&  end  ==  ')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)!=  ';'  &&  end  ==  ')  {	  while(input.charAt(start)!=    ';'    &&    isHex)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
117	[BUG]  [BUGGY]  int  input  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  input  =  input.subSequence(start,  end);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  input  =  input.subSequence(start,  end);	  Integer    input    =    input.subSequence(index,    end);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
118	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  start);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(start,  start);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(start,  start);	  Integer    input    =    input.subSequence(index,    end);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
119	[BUG]  [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  entityValue  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  entityValue  =  input.subSequence(start,  end).toString(),  16  +  1;	  Integer    entityValue    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
120	[BUG]  [BUGGY]  Integer  input  =  input.getImpl();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getImpl();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getImpl();	  Integer    input    =    input.getLongValue();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
121	[BUG]  [BUGGY]  Integer  input  =  input.getInput();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getInput();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getInput();	  Integer    input    =    input.getKey();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
122	[BUG]  [BUGGY]  Integer  input  =  input.getAscentImpl(index);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAscentImpl(index);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAscentImpl(index);	  Integer    input    =    input.getAscentImpl();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
123	[BUG]  [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.subSequence(start,  index  +  2);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.subSequence(start,  index  +  2);	  Integer    input    =    input.subSequence(start,    index);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
124	[BUG]  [BUGGY]  while(input!=  null  &&  input.charAt(index)  ==  ';')  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input!=  null  &&  input.charAt(index)  ==  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input!=  null  &&  input.charAt(index)  ==  ';')  {	  while(input.charAt(index)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
125	[BUG]  [BUGGY]  out.write('n',  start);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  out.write('n',  start);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	out.write('n',  start);	  out.write('n');    	non-compiled	[CE]  <identifier>  expected	36	None	replace
126	[BUG]  [BUGGY]  while(input.charAt(start)  >=  ';'  &&  end  ==  '9')  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  >=  ';'  &&  end  ==  '9')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  >=  ';'  &&  end  ==  '9')  {	  while(input.charAt(start)!=    ';'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
127	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar)+  0;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  firstChar)+  0;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  firstChar)+  0;	  int    end    =    input.indexOf(';',    firstChar)+    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
128	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  start  +  2);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  start  +  2);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  start  +  2);	  int    end    =    input.indexOf(';',    start);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
129	[BUG]  [BUGGY]  while(input.charAt(end  -  1)  ==  ';'  ||  input.charAt(end  -  1)  ==  ':')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(end  -  1)  ==  ';'  ||  input.charAt(end  -  1)  ==  ':')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(end  -  1)  ==  ';'  ||  input.charAt(end  -  1)  ==  ':')  {	  while(input.charAt(end    -    1)    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
130	[BUG]  [BUGGY]  Integer  input  =  input.getAscent()  /  1;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getAscent()  /  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getAscent()  /  1;	  Integer    input    =    input.getAscent()    +    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
131	[BUG]  [BUGGY]  Integer  input  =  input.getImmediateParentPointer();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getImmediateParentPointer();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getImmediateParentPointer();	  Integer    input    =    input.getAssignedValue();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
132	[BUG]  [BUGGY]  while(input!=  null  &&  input.charAt(0)!=  ';')  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input!=  null  &&  input.charAt(0)!=  ';')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input!=  null  &&  input.charAt(0)!=  ';')  {	  while(input!=    null    &&    input.charAt(index)!=    ';')    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
133	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  1)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  1)  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  &&  end  >=  1)  {	  while(input.charAt(end)    ==    ';'    &&    start    >=    end)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
134	[BUG]  [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  =  '-')  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  while(input.charAt(start)  ==  ';'  &&  end  >=  =  '-')  {  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	while(input.charAt(start)  ==  ';'  &&  end  >=  =  '-')  {	  while(input.charAt(end)    ==    ';'    &&    start    >=    end)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
135	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar)/  2;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  firstChar)/  2;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  firstChar)/  2;	  int    end    =    input.indexOf(';')/    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
136	[BUG]  [BUGGY]  Integer  input  =  input.getImplicitReturn();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getImplicitReturn();  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getImplicitReturn();	  Integer    input    =    input.getKey();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
137	[BUG]  [BUGGY]  out.append('  ');  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  out.append('  ');  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	out.append('  ');	  out.write('    ');    	non-compiled	[CE]  <identifier>  expected	39	None	replace
138	[BUG]  [BUGGY]  int  end  =  input.indexOf(';',  firstChar).charAt(0);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  int  end  =  input.indexOf(';',  firstChar).charAt(0);  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	int  end  =  input.indexOf(';',  firstChar).charAt(0);	  int    end    =    input.indexOf(';',    firstChar);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
139	[BUG]  [BUGGY]  Integer  input  =  input.getLongValue()  -  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;      [BUGGY]  Integer  input  =  input.getLongValue()  -  1;  [BUGGY]      while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  start  Writer  out  	projects/Lang28/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	48	48	1	replace	Integer  input  =  input.getLongValue()  -  1;	  Integer    input    =    input.getIntValue()    -    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
