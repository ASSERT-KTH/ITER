bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
2	[BUG]  [BUGGY]  if(inPos!=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos!=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos!=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
3	[BUG]  [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
4	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inavail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inavail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inavail;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	111	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  this.inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  this.inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  this.inAvail;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	111	None	replace
7	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  0,  len  =  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0,  len  =  inAvail;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	111	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	15	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  inAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	15	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  inPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	15	None	replace
11	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
12	[BUG]  [BUGGY]  if(inPos!=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos!=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos!=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
13	[BUG]  [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
14	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
15	[BUG]  [BUGGY]  if(inPos  >>  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >>  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >>  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
16	[BUG]  [BUGGY]  if(inPos  >  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
17	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  else  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  else  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  else  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  +  8;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inPos  +  8;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  +  8;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    8;    i++)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  16;  i++)  {  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  16;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  +  16;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    8;    i++)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  5;  i++)  {  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  5;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  +  5;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    8;    i++)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
21	[BUG]  [BUGGY]  resizeBytes(buffer,  pos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBytes(buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(buffer,  pos);	  resizeBytes(pos);    	non-compiled	[CE]  ';'  expected	83	None	replace
22	[BUG]  [BUGGY]  resizeBytes(pos,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBytes(pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(pos,  inAvail);	  resizeBytes(pos);    	non-compiled	[CE]  ';'  expected	83	None	replace
23	[BUG]  [BUGGY]  resizeBytes(pos  +  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBytes(pos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(pos  +  1);	  resizeBytes(pos);    	non-compiled	[CE]  ';'  expected	83	None	replace
24	[BUG]  [BUGGY]  resizeBytes(inPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBytes(inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(inPos);	  resizeBytes(pos);    	non-compiled	[CE]  ';'  expected	83	None	replace
25	[BUG]  [BUGGY]  resizeBytes(b);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBytes(b);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(b);	  resizeBytes(pos);    	non-compiled	[CE]  ';'  expected	83	None	replace
26	[BUG]  [BUGGY]  resizeBytes(buffer);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBytes(buffer);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(buffer);	  resizeBytes(pos);    	non-compiled	[CE]  ';'  expected	83	None	replace
27	[BUG]  [BUGGY]  resizeBytes(inAvail);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBytes(inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(inAvail);	  resizeBytes(pos);    	non-compiled	[CE]  ';'  expected	83	None	replace
28	[BUG]  [BUGGY]  resizeBytes(pos,  inPos);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBytes(pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(pos,  inPos);	  resizeBytes(pos);    	non-compiled	[CE]  ';'  expected	83	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	89	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	89	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	89	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos  +  1);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos  +  1);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	89	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  outAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  outAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  outAvail;  i++)  {	  for(int    i    =    0;    i    <    outAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  outAvail;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  outAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  outAvail;  i++)  {	  for(int    i    =    0;    i    <    outAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos,  inAvail);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	13	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  2);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	13	None	replace
37	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
38	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
39	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
40	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
41	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  outPos);  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  outPos);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
42	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
43	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
44	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.length;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  in.length;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  in.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    input.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	178	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  input.length;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  input.length;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  input.length;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    input.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	178	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  input.length;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  input.length;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  input.length;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    input.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	178	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  lineSeparator.length;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  lineSeparator.length;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  lineSeparator.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    input.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	178	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    input.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	178	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inPos  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  2);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  pos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  pos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  outAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  outAvail);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  -  inPos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  -  inPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  3);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1,  inAvail);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	106	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  3);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  3);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	106	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  inAvail);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	106	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  in;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  in;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    outPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	117	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inSize;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inSize;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inSize;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    outPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	117	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  outAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  outAvail;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    outPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	117	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos,  inAvail);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos,  inAvail);	  System.arraycopy(in,    0,    buffer,    inPos,    b);    	non-compiled	[CE]  ';'  expected	156	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  b  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  b  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  b  +  1);	  System.arraycopy(in,    0,    buffer,    inPos,    b);    	non-compiled	[CE]  ';'  expected	156	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  inPos,  inAvail);	  System.arraycopy(in,    0,    buffer,    inPos,    b);    	non-compiled	[CE]  ';'  expected	156	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    b);    	non-compiled	[CE]  ';'  expected	156	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  1);	  System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  base64);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  base64);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  base64);	  System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  outPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  outPos);	  System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  1);	  System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  1;  i  >=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  >=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  >=  inAvail;  i++)  {	  for(int    i    =    0;    i    >=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  inPos  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inPos  +  1;  i++)  {	  for(int    i    =    1;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inAvail  +  2;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  inAvail  +  2;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inAvail  +  2;  i++)  {	  for(int    i    =    1;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  inAvail  +  1;  i++)  {  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  2;  i  <  inAvail  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2;  i  <  inAvail  +  1;  i++)  {	  for(int    i    =    1;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inPos  +  2;  i++)  {  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  inPos  +  2;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inPos  +  2;  i++)  {	  for(int    i    =    1;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inAvail  +  3;  i++)  {  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  inAvail  +  3;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inAvail  +  3;  i++)  {	  for(int    i    =    1;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inAvail  +  4;  i++)  {  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  inAvail  +  4;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inAvail  +  4;  i++)  {	  for(int    i    =    1;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator.length,  inAvail);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length,    inPos);    	non-compiled	[CE]  ';'  expected	57	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  inPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length,    inPos);    	non-compiled	[CE]  ';'  expected	57	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  inPos  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  inPos  +  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length,    inPos);    	non-compiled	[CE]  ';'  expected	57	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length,    inPos);    	non-compiled	[CE]  ';'  expected	57	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length,    inPos);    	non-compiled	[CE]  ';'  expected	57	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  inAvail);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length,    inPos);    	non-compiled	[CE]  ';'  expected	57	None	replace
91	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  inPos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	129	None	replace
92	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	129	None	replace
93	[BUG]  [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	129	None	replace
94	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	129	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  >=  len;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  >=  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  >=  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    len;    i++)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i!=  len;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i!=  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i!=  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    len;    i++)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  ==  len;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  ==  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  ==  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    len;    i++)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  >=  len;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  >=  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  +  inPos;  i  >=  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    len;    i++)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  >>  len;  i++)  {  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  >>  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  >>  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    len;    i++)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	53	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	53	None	replace
102	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	53	None	replace
103	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	53	None	replace
104	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	53	None	replace
105	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  encodeSize);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	174	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	174	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  3;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  3;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  3;  i  <  inPos;  i++)  {	  for(int    i    =    1;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	118	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineLength  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	204	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineLength,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	204	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength  -  inPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineLength  -  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	204	None	replace
111	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	139	None	replace
112	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	139	None	replace
113	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	139	None	replace
114	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail  +  1);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail  +  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	139	None	replace
115	[BUG]  [BUGGY]  b  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  b  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	b  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	139	None	replace
116	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	139	None	replace
117	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSize  +  1);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSize  +  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	139	None	replace
118	[BUG]  [BUGGY]  if(inAvail  <  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	164	None	replace
119	[BUG]  [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	164	None	replace
120	[BUG]  [BUGGY]  if(inAvail  >=  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >=  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >=  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	164	None	replace
121	[BUG]  [BUGGY]  if(inAvail  ==  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  ==  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  ==  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	164	None	replace
122	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	164	None	replace
123	[BUG]  [BUGGY]  if(inAvail!=  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail!=  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail!=  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	164	None	replace
124	[BUG]  [BUGGY]  Integer  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  Integer  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	Integer  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	164	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  inAvail;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inAvail;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inAvail;  i  <  outPos;  i++)  {	  for(int    i    =    inPos;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0,  outPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos;  i  <  inAvail;  i++)  {	  for(int    i    =    inPos;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
127	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	70	None	replace
128	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	70	None	replace
129	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	70	None	replace
130	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	70	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	70	None	replace
132	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	70	None	replace
133	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	70	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1,  len  =  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1,  len  =  inPos;  i  <  len;  i++)  {	  for(int    i    =    1,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	115	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  inAvail;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1,  len  =  inAvail;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1,  len  =  inAvail;  i  <  inPos;  i++)  {	  for(int    i    =    1,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	115	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  4,  len  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  4,  len  =  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  4,  len  =  inAvail;  i  <  len;  i++)  {	  for(int    i    =    1,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	115	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  2,  len  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  2,  len  =  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2,  len  =  inAvail;  i  <  len;  i++)  {	  for(int    i    =    1,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	115	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  10,  len  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  10,  len  =  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  10,  len  =  inAvail;  i  <  len;  i++)  {	  for(int    i    =    1,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	115	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  3,  len  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  3,  len  =  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  3,  len  =  inAvail;  i  <  len;  i++)  {	  for(int    i    =    1,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	115	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  4;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  4;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  4;  i  <  inAvail;  i++)  {	  for(int    i    =    2;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	119	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inputPos;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  inputPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inputPos;  i++)  {	  for(int    i    =    0;    i    <    inputPos;    i++)    {    	non-compiled	[CE]  ';'  expected	147	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inputPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inputPos  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inputPos  +  1;  i++)  {	  for(int    i    =    0;    i    <    inputPos;    i++)    {    	non-compiled	[CE]  ';'  expected	147	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outAvail,  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  outAvail,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	151	None	replace
144	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  2);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    2);    	non-compiled	[CE]  ';'  expected	4	None	replace
145	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  3);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  3);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    2);    	non-compiled	[CE]  ';'  expected	4	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  4);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  4);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    2);    	non-compiled	[CE]  ';'  expected	4	None	replace
147	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length;	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    2);    	non-compiled	[CE]  ';'  expected	4	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  *  2);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  *  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  *  2);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    2);    	non-compiled	[CE]  ';'  expected	4	None	replace
149	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
150	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
151	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
152	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  lineSeparator.length);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	184	None	replace
154	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  encodeSize  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	184	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  decodeSize);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  decodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	184	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  2;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  2;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2;  i  >=  inPos;  i++)  {	  for(int    i    =    1;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	125	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  2;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  2;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2;  i!=  inPos;  i++)  {	  for(int    i    =    1;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	125	None	replace
158	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	107	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  2);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	107	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	107	None	replace
161	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outPos  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  outPos  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	122	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	122	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	122	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	122	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  -  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  -  inPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  -  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  -  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos  -  inAvail);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
168	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  -  inPos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize  -  inPos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  encodeSize  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
170	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize  -  inPos);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  -  inPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
172	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  +  inPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  +  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos  +  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
173	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos  -  inAvail);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos  -  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  pos  -  inAvail);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  <  inPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  <  inPos  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inAvail;  i  <  inPos  +  1;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  inPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  inPos  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inPos;  i  <  inPos  +  1;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  outPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  outPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  outPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  1;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  1;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  1;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  inAvail;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
181	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	1	None	replace
182	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1,  encodeSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	1	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  1,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  1,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  1,  lineSeparator.length  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	1	None	replace
184	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	1	None	replace
185	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(codeTable,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	175	None	replace
186	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  pos,  inAvail);	  System.arraycopy(codeTable,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	175	None	replace
187	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(codeTable,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	175	None	replace
188	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize  +  1);	  System.arraycopy(codeTable,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	175	None	replace
189	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  pos,  1);	  System.arraycopy(codeTable,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	175	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos  +  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos  +  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
192	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  inAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
193	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  encodeSize);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
195	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineLength);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineLength);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
196	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  1,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  1,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  1,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
197	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
198	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
199	[BUG]  [BUGGY]  if(inPos  >=  0)  {  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
200	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
201	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator,  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator,  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	124	None	replace
203	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	124	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outPos,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  outPos,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	124	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  0,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  0,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  0,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	124	None	replace
206	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	200	None	replace
207	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator.length  -  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	200	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	200	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inPos  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inPos  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	200	None	replace
210	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  -  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	200	None	replace
211	[BUG]  [BUGGY]  if(inPos  >=  0)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
212	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
213	[BUG]  [BUGGY]  if(inPos  <  0)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  0)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  0)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
214	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
215	[BUG]  [BUGGY]  if(inPos  >=  0)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
216	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  1);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	109	None	replace
218	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  2);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	109	None	replace
219	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  1,  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  1,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	109	None	replace
220	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  0,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  0,  lineSeparator.length  -  1);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	109	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos.length;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos.length;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail.length;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail.length;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail.length;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail.length  -  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail.length  -  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail.length  -  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail.length  +  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail.length  +  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail.length  +  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail.length;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail.length;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail.length;  i  <  outPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  inAvail.length;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1,  len  =  inAvail.length;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1,  len  =  inAvail.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inputPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputPos;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inputPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	176	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  -  2);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	56	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length  -  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	56	None	replace
230	[BUG]  [BUGGY]  b  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  b  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	b  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	171	None	replace
231	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	171	None	replace
232	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos  +  1,  outAvail);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos  +  1,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos  +  1,  outAvail);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	171	None	replace
233	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  4);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  4);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	188	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inAvail;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  len;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  len;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  len;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  inPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  inPos  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i  <  inPos  +  1;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail  =  len;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail  =  len;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail  =  len;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
239	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
240	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  return;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  return;  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  return;	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
241	[BUG]  [BUGGY]  if(inPos!=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos!=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos!=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
242	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
243	[BUG]  [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
244	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  0,  inPos);  return;  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  0,  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  0,  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
245	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  break;  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  break;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  break;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
246	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(chunks,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	38	None	replace
247	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);	  System.arraycopy(chunks,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	38	None	replace
248	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(chunks,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	38	None	replace
249	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  1);	  System.arraycopy(chunks,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	38	None	replace
250	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineLength);	  System.arraycopy(chunks,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	38	None	replace
251	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  encodeSize  +  1);	  System.arraycopy(chunks,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	38	None	replace
252	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  4);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  4);	  System.arraycopy(chunks,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	38	None	replace
253	[BUG]  [BUGGY]  resizeSize(inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeSize(inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize(inPos);	  resizeSize();    	non-compiled	[CE]  ';'  expected	82	None	replace
254	[BUG]  [BUGGY]  resizeLength();  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeLength();  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeLength();	  resizeSize();    	non-compiled	[CE]  ';'  expected	82	None	replace
255	[BUG]  [BUGGY]  resizeFullSize();  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeFullSize();  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeFullSize();	  resizeSize();    	non-compiled	[CE]  ';'  expected	82	None	replace
256	[BUG]  [BUGGY]  resizeFullBuffer();  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeFullBuffer();  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeFullBuffer();	  resizeSize();    	non-compiled	[CE]  ';'  expected	82	None	replace
257	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
258	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
259	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  }	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
260	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  }	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
261	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  }	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail  =  len;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail  =  len;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail  =  len;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	120	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	120	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  inAvail;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	120	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  outAvail;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  outAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  <  outAvail;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	120	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  outPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  outPos;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	120	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  inPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1,  len  =  inPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1,  len  =  inPos;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	120	None	replace
270	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  inPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
271	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
272	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
273	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
274	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos  +  1);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos  +  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
275	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail,  inPos);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
276	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  inPos);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
277	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos);	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
278	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos);	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
279	[BUG]  [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  pos);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  pos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  pos);  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
280	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  pos);  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  pos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  pos);  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
281	[BUG]  [BUGGY]  pos  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  pos  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	pos  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
282	[BUG]  [BUGGY]  b  =  System.arraycopy(buffer,  0,  buffer,  pos);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  b  =  System.arraycopy(buffer,  0,  buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	b  =  System.arraycopy(buffer,  0,  buffer,  pos);	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
283	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
284	[BUG]  [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
285	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  0,  lineSeparator.length);	  System.arraycopy(buffer,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	22	None	replace
286	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  pos,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  pos,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  pos,  0,  lineSeparator.length);	  System.arraycopy(buffer,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	22	None	replace
287	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  0,  lineSeparator.length);	  System.arraycopy(buffer,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	22	None	replace
288	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  0,  lineSeparator.length);	  System.arraycopy(buffer,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	22	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  2;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2;  i  <  outPos;  i++)  {	  for(int    i    =    1;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  3;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  3;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  3;  i  <  outPos;  i++)  {	  for(int    i    =    1;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
291	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	144	None	replace
292	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	144	None	replace
293	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inPos);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inPos);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	144	None	replace
294	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos  +  encodeSize);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos  +  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos  +  encodeSize);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	144	None	replace
295	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	144	None	replace
296	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  4);  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  4);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	144	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  1;  i  ==  inAvail;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  ==  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  ==  inAvail;  i++)  {	  for(int    i    =    1;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  3;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  3;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  3;  i!=  inPos;  i++)  {	  for(int    i    =    1;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  len;  i++)  {	  for(int    i    =    0;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	137	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inSize;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inSize;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inSize;  i++)  {	  for(int    i    =    0;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	137	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  2;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2;  i  <  len;  i++)  {	  for(int    i    =    0;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	137	None	replace
302	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
303	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
304	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  4);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
305	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  3);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
306	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  2);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
307	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
308	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
309	[BUG]  [BUGGY]  resizeFields(pos);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeFields(pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeFields(pos);	  resizeFields();    	non-compiled	[CE]  ';'  expected	85	None	replace
310	[BUG]  [BUGGY]  resizeFields(pos,  inAvail);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeFields(pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeFields(pos,  inAvail);	  resizeFields();    	non-compiled	[CE]  ';'  expected	85	None	replace
311	[BUG]  [BUGGY]  resizeFields(inAvail);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeFields(inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeFields(inAvail);	  resizeFields();    	non-compiled	[CE]  ';'  expected	85	None	replace
312	[BUG]  [BUGGY]  resizeField(pos,  inAvail);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeField(pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeField(pos,  inAvail);	  resizeFields();    	non-compiled	[CE]  ';'  expected	85	None	replace
313	[BUG]  [BUGGY]  resizeFields(inPos);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeFields(inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeFields(inPos);	  resizeFields();    	non-compiled	[CE]  ';'  expected	85	None	replace
314	[BUG]  [BUGGY]  resizeFields(pos,  encodeSize);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeFields(pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeFields(pos,  encodeSize);	  resizeFields();    	non-compiled	[CE]  ';'  expected	85	None	replace
315	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	37	None	replace
316	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  1);	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	37	None	replace
317	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  lineLength);	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	37	None	replace
318	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize  +  1);	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	37	None	replace
319	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  decodeSize);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  decodeSize);	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	37	None	replace
320	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
321	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
322	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineLength);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
323	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  inAvail);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
324	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
325	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  1,  inAvail);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  1,  inAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	18	None	replace
326	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  1,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  1,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  1,  lineSeparator.length  +  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	18	None	replace
327	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  3);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  3);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	18	None	replace
328	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  encodeSize);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	150	None	replace
329	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  0,  encodeSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  0,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  0,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	150	None	replace
330	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  encodeSize);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	150	None	replace
331	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos,  encodeSize);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  outPos,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	150	None	replace
332	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  outPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  outPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	150	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  inAvail;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  len;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  len;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  len;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
335	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  <  outPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
336	[BUG]  [BUGGY]  for(int  i  =  0,  off  =  inAvail;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  off  =  inAvail;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  off  =  inAvail;  i  <  outPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
337	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  outPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
338	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  encodeSize,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inPos);    	non-compiled	[CE]  ';'  expected	75	None	replace
339	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  0,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  0,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  0,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inPos);    	non-compiled	[CE]  ';'  expected	75	None	replace
340	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inPos,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inPos);    	non-compiled	[CE]  ';'  expected	75	None	replace
341	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
342	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
343	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  inPos);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
344	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
345	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
346	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
347	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
348	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
349	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  outPos);	  System.arraycopy(inPos,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
350	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  2);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    2);    	non-compiled	[CE]  ';'  expected	157	None	replace
351	[BUG]  [BUGGY]  resizePos(pos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizePos(pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos(pos);	  resizePos();    	non-compiled	[CE]  ';'  expected	79	None	replace
352	[BUG]  [BUGGY]  resizePos(1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizePos(1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos(1);	  resizePos();    	non-compiled	[CE]  ';'  expected	79	None	replace
353	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    <    inAvail)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
354	[BUG]  [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    <    inAvail)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
355	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }	  if(inPos    <    inAvail)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
356	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  3);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  3);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    3);    	non-compiled	[CE]  ';'  expected	187	None	replace
357	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  -  3);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  -  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  -  3);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    3);    	non-compiled	[CE]  ';'  expected	187	None	replace
358	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  }	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	161	None	replace
359	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	161	None	replace
360	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  }	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	161	None	replace
361	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize);  outPos  +=  inPos;	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	161	None	replace
362	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	161	None	replace
363	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize  +  1);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize  +  1);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize  +  1);  outPos  +=  inAvail;	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	161	None	replace
364	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineLength);	  System.arraycopy(inAvail,    0,    buffer,    pos,    outPos);    	non-compiled	[CE]  ';'  expected	180	None	replace
365	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outPos  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  outPos  +  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    outPos);    	non-compiled	[CE]  ';'  expected	180	None	replace
366	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	34	None	replace
367	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  fileSeparator.length);	  System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	34	None	replace
368	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  fileSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	34	None	replace
369	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  +  3;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inPos  +  3;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  +  3;  i++)  {	  for(int    i    =    0;    i    <    inPos    +    2;    i++)    {    	non-compiled	[CE]  ';'  expected	153	None	replace
370	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  +  4;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inPos  +  4;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  +  4;  i++)  {	  for(int    i    =    0;    i    <    inPos    +    2;    i++)    {    	non-compiled	[CE]  ';'  expected	153	None	replace
371	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  +  6;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inPos  +  6;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  +  6;  i++)  {	  for(int    i    =    0;    i    <    inPos    +    2;    i++)    {    	non-compiled	[CE]  ';'  expected	153	None	replace
372	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  +  5;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inPos  +  5;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  +  5;  i++)  {	  for(int    i    =    0;    i    <    inPos    +    2;    i++)    {    	non-compiled	[CE]  ';'  expected	153	None	replace
373	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  encodeSize;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  encodeSize;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  encodeSize;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    encodeSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	203	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  encodeSize;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  encodeSize;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  encodeSize;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    encodeSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	203	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  encodeSize.length;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  encodeSize.length;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  encodeSize.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    encodeSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	203	None	replace
376	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  1;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  1;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  1;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    encodeSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	203	None	replace
377	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  pos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  pos);	  System.arraycopy(in,    0,    buffer,    inPos,    outAvail);    	non-compiled	[CE]  ';'  expected	42	None	replace
378	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  encodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  encodeSize);	  System.arraycopy(in,    0,    buffer,    inPos,    outAvail);    	non-compiled	[CE]  ';'  expected	42	None	replace
379	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  -  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  -  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  -  lineSeparator.length);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
380	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSize);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
381	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  -  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  -  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
382	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	190	None	replace
383	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	190	None	replace
384	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	190	None	replace
385	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	190	None	replace
386	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	190	None	replace
387	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail-1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail-1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail-1);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
388	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos-1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos-1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos-1);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
389	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail-2);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail-2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail-2);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
390	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail-1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail-1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail-1);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
391	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  2);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
392	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outAvail  +  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  outAvail  +  1);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
393	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1,  encodeSize);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1,  encodeSize);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
394	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  encodeSize  +  1);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
395	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	201	None	replace
396	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  *  2);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  *  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  *  2);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	201	None	replace
397	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  2);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  2);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	201	None	replace
398	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  2);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  2);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	201	None	replace
399	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail  +  2);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail  +  2);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	201	None	replace
400	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
401	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  inAvail);	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
402	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
403	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length);	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
404	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
405	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
406	[BUG]  [BUGGY]  b  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  b  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	b  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
407	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileLength);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  fileLength);	  System.arraycopy(in,    0,    buffer,    pos,    fileLength);    	non-compiled	[CE]  ';'  expected	182	None	replace
408	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  fileSize);	  System.arraycopy(in,    0,    buffer,    pos,    fileLength);    	non-compiled	[CE]  ';'  expected	182	None	replace
409	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileLength  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileLength  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  fileLength  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    fileLength);    	non-compiled	[CE]  ';'  expected	182	None	replace
410	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
411	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
412	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
413	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
414	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
415	[BUG]  [BUGGY]  System.arraycopy(out,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(out,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(out,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(buffer,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
416	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	160	None	replace
417	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	160	None	replace
418	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	160	None	replace
419	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	160	None	replace
420	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	186	None	replace
421	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  inPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	186	None	replace
422	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length  -  inPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	186	None	replace
423	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  -  inPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	186	None	replace
424	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	142	None	replace
425	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	142	None	replace
426	[BUG]  [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	142	None	replace
427	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  outPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    outPos);    	non-compiled	[CE]  ';'  expected	17	None	replace
428	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
429	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
430	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
431	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
432	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
433	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
434	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
435	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  pos);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  pos);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  pos);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
436	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  -=  pos;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  -=  pos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos);  outPos  -=  pos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
437	[BUG]  [BUGGY]  if(inPos!=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos!=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos!=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >=    inAvail)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
438	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }	  if(inPos    >=    inAvail)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
439	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }	  if(inPos    >=    inAvail)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
440	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  >=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
441	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i!=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
442	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inPos;  i  >=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
443	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  1;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  1;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  1;  i  >=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
444	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	49	None	replace
445	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	49	None	replace
446	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	49	None	replace
447	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	49	None	replace
448	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  2);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	104	None	replace
449	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	104	None	replace
450	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail  +  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	104	None	replace
451	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineLength  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineLength  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineLength  +  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	104	None	replace
452	[BUG]  [BUGGY]  for(int  i  =  1;  i  ==  inPos;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  ==  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  ==  inPos;  i++)  {	  for(int    i    =    0;    i    ==    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
453	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  outPos  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	71	None	replace
454	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	71	None	replace
455	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	71	None	replace
456	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	67	None	replace
457	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	67	None	replace
458	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	67	None	replace
459	[BUG]  [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inAvail)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	67	None	replace
460	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  else  {  return;  }	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	67	None	replace
461	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  outAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  outAvail);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	165	None	replace
462	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	165	None	replace
463	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  pos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  pos);	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    buffer,    pos);    	non-compiled	[CE]  ';'  expected	167	None	replace
464	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos  +  2);	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	32	None	replace
465	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
466	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inPos,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
467	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  0,  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  0,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  0,  inAvail);	  System.arraycopy(in,    0,    buffer,    inPos,    pos);    	non-compiled	[CE]  ';'  expected	40	None	replace
468	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  p,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  p,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  p,  lineSeparator.length);	  System.arraycopy(buffer,    0,    lineSeparator,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
469	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
470	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  decodeSize);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  decodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
471	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
472	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodePos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodePos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodePos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
473	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  4);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  4);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
474	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
475	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  decodeSize;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  decodeSize;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  decodeSize;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    decodeSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	116	None	replace
476	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos  +  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	128	None	replace
477	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  *  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  *  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	128	None	replace
478	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	128	None	replace
479	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineLength  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineLength  +  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	128	None	replace
480	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail  +  1);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail  +  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	128	None	replace
481	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	128	None	replace
482	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos  +  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos  +  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos  +  inAvail;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
483	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  1;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  1;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  +  1;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
484	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  *  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail  *  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  *  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
485	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  len.length;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  len.length;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  len.length;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
486	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  2;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  2;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  +  2;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
487	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  inAvail  +  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1,  len  =  inAvail  +  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1,  len  =  inAvail  +  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
488	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos  +  1;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos  +  1;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos  +  1;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
489	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.length  +  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  in.length  +  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  in.length  +  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
490	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos,  encodeSize);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	134	None	replace
491	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inPos);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	134	None	replace
492	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  0,  encodeSize);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  0,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  0,  encodeSize);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	134	None	replace
493	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  decodeSize);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  decodeSize);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	134	None	replace
494	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	134	None	replace
495	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  1);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	134	None	replace
496	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i!=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
497	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  1;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  1;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  1;  i!=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
498	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  outPos;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  outPos;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  outPos;  i!=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
499	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  *  1;  i++)  {  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inPos  *  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  *  1;  i++)  {	  for(int    i    =    0;    i    <    inAvail    *    1;    i++)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
500	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  *  2;  i++)  {  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inAvail  *  2;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  *  2;  i++)  {	  for(int    i    =    0;    i    <    inAvail    *    1;    i++)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
501	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  *  2;  i++)  {  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inPos  *  2;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  *  2;  i++)  {	  for(int    i    =    0;    i    <    inAvail    *    1;    i++)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
502	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  *  4;  i++)  {  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inAvail  *  4;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  *  4;  i++)  {	  for(int    i    =    0;    i    <    inAvail    *    1;    i++)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
503	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  *  3;  i++)  {  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inAvail  *  3;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  *  3;  i++)  {	  for(int    i    =    0;    i    <    inAvail    *    1;    i++)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
504	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  *  3;  i++)  {  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inPos  *  3;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  *  3;  i++)  {	  for(int    i    =    0;    i    <    inAvail    *    1;    i++)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
505	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  /  1;  i++)  {  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inAvail  /  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  /  1;  i++)  {	  for(int    i    =    0;    i    <    inAvail    *    1;    i++)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
506	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    inAvail);    	non-compiled	[CE]  ';'  expected	5	None	replace
507	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inAvail  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    inAvail);    	non-compiled	[CE]  ';'  expected	5	None	replace
508	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  outPos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  outPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    inAvail);    	non-compiled	[CE]  ';'  expected	5	None	replace
509	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    inAvail);    	non-compiled	[CE]  ';'  expected	5	None	replace
510	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(b,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	39	None	replace
511	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  inAvail);	  System.arraycopy(b,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	39	None	replace
512	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  1);	  System.arraycopy(b,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	39	None	replace
513	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  b,  pos,  encodeSize);	  System.arraycopy(b,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	39	None	replace
514	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  fileSeparator.length);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  fileSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  fileSeparator.length);	  System.arraycopy(b,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	39	None	replace
515	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  4);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  4);	  System.arraycopy(b,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	39	None	replace
516	[BUG]  [BUGGY]  for(int  i  =  0,  len;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
517	[BUG]  [BUGGY]  for(int  i  =  0,  inPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
518	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail  =  inPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail  =  inPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail  =  inPos;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
519	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail  +  inPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail  +  inPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail  +  inPos;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
520	[BUG]  [BUGGY]  for(int  i  =  0,  off;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  off;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  off;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
521	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputSize;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inputSize;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputSize;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inputSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	177	None	replace
522	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputSize;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inputSize;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputSize;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    inputSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	177	None	replace
523	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputSize  +  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inputSize  +  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputSize  +  inAvail;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inputSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	177	None	replace
524	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputSize  +  1;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inputSize  +  1;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputSize  +  1;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inputSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	177	None	replace
525	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputSize.length;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inputSize.length;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputSize.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inputSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	177	None	replace
526	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  len;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  len;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  len;  i  >=  inPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	126	None	replace
527	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  >=  len;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  >=  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inAvail;  i  >=  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	126	None	replace
528	[BUG]  [BUGGY]  for(int  i  =  inAvail;  i  <  0;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inAvail;  i  <  0;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inAvail;  i  <  0;  i++)  {	  for(int    i    =    inPos;    i    <    0;    i++)    {    	non-compiled	[CE]  ';'  expected	159	None	replace
529	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  >=  0;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  >=  0;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  >=  0;  i++)  {	  for(int    i    =    inPos;    i    <    0;    i++)    {    	non-compiled	[CE]  ';'  expected	159	None	replace
530	[BUG]  [BUGGY]  for(int  i  =  inPos;  i!=  0;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i!=  0;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i!=  0;  i++)  {	  for(int    i    =    inPos;    i    <    0;    i++)    {    	non-compiled	[CE]  ';'  expected	159	None	replace
531	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  2;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  2;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  2;  i++)  {	  for(int    i    =    inPos;    i    <    0;    i++)    {    	non-compiled	[CE]  ';'  expected	159	None	replace
532	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  1;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  1;  i++)  {	  for(int    i    =    inPos;    i    <    0;    i++)    {    	non-compiled	[CE]  ';'  expected	159	None	replace
533	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  4;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  4;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  4;  i++)  {	  for(int    i    =    inPos;    i    <    0;    i++)    {    	non-compiled	[CE]  ';'  expected	159	None	replace
534	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  ==  0;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  ==  0;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  ==  0;  i++)  {	  for(int    i    =    inPos;    i    <    0;    i++)    {    	non-compiled	[CE]  ';'  expected	159	None	replace
535	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  3;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  3;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  3;  i++)  {	  for(int    i    =    inPos;    i    <    0;    i++)    {    	non-compiled	[CE]  ';'  expected	159	None	replace
536	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineLength);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineLength);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	158	None	replace
537	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  +  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	158	None	replace
538	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  -  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  -  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	158	None	replace
539	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  2;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  2;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  inAvail  +  2;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	90	None	replace
540	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  3;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  3;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  inAvail  +  3;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	90	None	replace
541	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  4;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  4;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  inAvail  +  4;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	90	None	replace
542	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  len  +  1;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  len  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  len  +  1;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	90	None	replace
543	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  *  1;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  *  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  inAvail  *  1;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	90	None	replace
544	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  8;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  8;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  inAvail  +  8;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	90	None	replace
545	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  0;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0;  i  <  inPos;  i++)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
546	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  1;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  1;  i  <  inAvail;  i++)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
547	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inAvail  +  1;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  0;  i  <  inAvail  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0;  i  <  inAvail  +  1;  i++)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
548	[BUG]  [BUGGY]  For(int  i  =  inPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  inPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  inPos;  i  <  inAvail;  i++)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
549	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  0;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0;  i  <  outPos;  i++)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
550	[BUG]  [BUGGY]  For(int  i  =  0;  i!=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  0;  i!=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0;  i!=  inAvail;  i++)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
551	[BUG]  [BUGGY]  resize(pos  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(pos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(pos  +  1);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
552	[BUG]  [BUGGY]  resize(buffer,  pos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(buffer,  pos);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
553	[BUG]  [BUGGY]  resize(pos,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(pos,  inAvail);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
554	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
555	[BUG]  [BUGGY]  resize(buffer);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(buffer);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(buffer);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
556	[BUG]  [BUGGY]  resize(pos,  inPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(pos,  inPos);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
557	[BUG]  [BUGGY]  resize(pos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(pos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(pos  +  1,  inAvail);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
558	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    <    inAvail)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
559	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    <    inAvail)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
560	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    <    inAvail)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
561	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }	  if(inPos    <    inAvail)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
562	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inAvail  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inAvail  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length,    inAvail);    	non-compiled	[CE]  ';'  expected	108	None	replace
563	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  lineSeparator.length,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  lineSeparator.length,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length,    inAvail);    	non-compiled	[CE]  ';'  expected	108	None	replace
564	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  outPos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  outPos);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length,    inAvail);    	non-compiled	[CE]  ';'  expected	108	None	replace
565	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  -  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	2	None	replace
566	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	2	None	replace
567	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
568	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
569	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
570	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
571	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  outAvail,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  outAvail,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  outAvail,  pos,  inAvail);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
572	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
573	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
574	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  3;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  3;  i++)  {	  for(int    i    =    0;    i    <    4;    i++)    {    	non-compiled	[CE]  ';'  expected	198	None	replace
575	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  2;  i++)  {	  for(int    i    =    0;    i    <    4;    i++)    {    	non-compiled	[CE]  ';'  expected	198	None	replace
576	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  6;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  6;  i++)  {	  for(int    i    =    0;    i    <    4;    i++)    {    	non-compiled	[CE]  ';'  expected	198	None	replace
577	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  5;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  5;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  5;  i++)  {	  for(int    i    =    0;    i    <    4;    i++)    {    	non-compiled	[CE]  ';'  expected	198	None	replace
578	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  8;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  8;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  8;  i++)  {	  for(int    i    =    0;    i    <    4;    i++)    {    	non-compiled	[CE]  ';'  expected	198	None	replace
579	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  1;  i++)  {	  for(int    i    =    0;    i    <    4;    i++)    {    	non-compiled	[CE]  ';'  expected	198	None	replace
580	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  10;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  10;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  10;  i++)  {	  for(int    i    =    0;    i    <    4;    i++)    {    	non-compiled	[CE]  ';'  expected	198	None	replace
581	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
582	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
583	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
584	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
585	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
586	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
587	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
588	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
589	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
590	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
591	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail,  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail,  inPos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail,  inPos);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
592	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  32);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  32);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  32);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
593	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
594	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
595	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inPos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  inPos);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
596	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  4);  outPos  +=  4;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  4);  outPos  +=  4;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  4);  outPos  +=  4;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
597	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  1);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  1);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  1);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
598	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize,  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize,  inPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	35	None	replace
599	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	185	None	replace
600	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	185	None	replace
601	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	185	None	replace
602	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }	  if(inPos    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	185	None	replace
603	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	185	None	replace
604	[BUG]  [BUGGY]  resize(inPos  +  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos  +  1);	  resize(inPos);    	non-compiled	[CE]  ';'  expected	84	None	replace
605	[BUG]  [BUGGY]  resize(inPos,  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos,  inAvail);	  resize(inPos);    	non-compiled	[CE]  ';'  expected	84	None	replace
606	[BUG]  [BUGGY]  resize(inPos,  pos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos,  pos);	  resize(inPos);    	non-compiled	[CE]  ';'  expected	84	None	replace
607	[BUG]  [BUGGY]  resize(inPos++);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos++);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos++);	  resize(inPos);    	non-compiled	[CE]  ';'  expected	84	None	replace
608	[BUG]  [BUGGY]  resizeInt(inPos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeInt(inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeInt(inPos);	  resize(inPos);    	non-compiled	[CE]  ';'  expected	84	None	replace
609	[BUG]  [BUGGY]  resize(inPos  +  2);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos  +  2);	  resize(inPos);    	non-compiled	[CE]  ';'  expected	84	None	replace
610	[BUG]  [BUGGY]  resize(inPos  +  3);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos  +  3);	  resize(inPos);    	non-compiled	[CE]  ';'  expected	84	None	replace
611	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,chunks);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,chunks);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,chunks);	  System.arraycopy(chunks,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	194	None	replace
612	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  outAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	155	None	replace
613	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail,  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  outAvail,  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	155	None	replace
614	[BUG]  [BUGGY]  resizeBounds(pos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBounds(pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBounds(pos);	  resizeBounds();    	non-compiled	[CE]  ';'  expected	207	None	replace
615	[BUG]  [BUGGY]  resizeInt();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeInt();  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeInt();	  resizeBounds();    	non-compiled	[CE]  ';'  expected	207	None	replace
616	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  +  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	123	None	replace
617	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	123	None	replace
618	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
619	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
620	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
621	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
622	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
623	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  inAvail);  outPos  +=  1;  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  inAvail);  outPos  +=  1;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  inAvail);  outPos  +=  1;	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
624	[BUG]  [BUGGY]  inAvail  +=  inPos;  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  +=  inPos;	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
625	[BUG]  [BUGGY]  resizeBytes(pos,  encodeSize);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBytes(pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(pos,  encodeSize);	  resizeBytes();    	non-compiled	[CE]  ';'  expected	208	None	replace
626	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail,  inPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail,  inPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	105	None	replace
627	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  pos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  pos);	  System.arraycopy(inAvail,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	44	None	replace
628	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inAvail,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inAvail,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inAvail,  inAvail);	  System.arraycopy(inAvail,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	44	None	replace
629	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  outAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  outAvail);	  System.arraycopy(inAvail,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	44	None	replace
630	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail;  i  <  outPos;  i++)  {	  for(int    i    =    outPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	95	None	replace
631	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	162	None	replace
632	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	162	None	replace
633	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	162	None	replace
634	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail;  i  +=  2)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inAvail;  i  +=  2)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail;  i  +=  2)  {	  for(int    i    =    0;    i    <    inavail;    i++)    {    	non-compiled	[CE]  ';'  expected	148	None	replace
635	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inavail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  inavail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inavail;  i++)  {	  for(int    i    =    0;    i    <    inavail;    i++)    {    	non-compiled	[CE]  ';'  expected	148	None	replace
636	[BUG]  [BUGGY]  for(int  i  =  0,  len;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
637	[BUG]  [BUGGY]  for(int  i  =  0,  outPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
638	[BUG]  [BUGGY]  for(int  i  =  0,  inPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
639	[BUG]  [BUGGY]  for(int  i  =  0,  inPos;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos;  i  <  outPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
640	[BUG]  [BUGGY]  for(int  i  =  0,  off;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  off;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  off;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
641	[BUG]  [BUGGY]  for(int  i  =  0,  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
642	[BUG]  [BUGGY]  for(int  i  =  0,  isAvailable;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  isAvailable;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  isAvailable;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
643	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(chunkSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	173	None	replace
644	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineLength);	  System.arraycopy(chunkSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	173	None	replace
645	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  inAvail);	  System.arraycopy(chunkSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	173	None	replace
646	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  1);	  System.arraycopy(chunkSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	173	None	replace
647	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(chunkSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	173	None	replace
648	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  -  1);	  System.arraycopy(lineSeparator,    0,    buffer,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
649	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
650	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  0,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
651	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  +  1);	  System.arraycopy(lineSeparator,    0,    buffer,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
652	[BUG]  [BUGGY]  for(int  i  =  4;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  4;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  4;  i  <  inPos;  i++)  {	  for(int    i    =    2;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	138	None	replace
653	[BUG]  [BUGGY]  if(inAvail  ==  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  ==  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  ==  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    <    inAvail)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	196	None	replace
654	[BUG]  [BUGGY]  if(inAvail  <  inPos)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inPos)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inPos)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    <    inAvail)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	196	None	replace
655	[BUG]  [BUGGY]  if(inAvail  >=  inPos)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >=  inPos)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >=  inPos)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    <    inAvail)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	196	None	replace
656	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  inPos);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	72	None	replace
657	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos,  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  outPos,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	72	None	replace
658	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos  +  1,  inAvail);	  System.arraycopy(in,    0,    buffer,    inPos,    pos    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
659	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
660	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
661	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
662	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
663	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
664	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
665	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
666	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  +  2);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	55	None	replace
667	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  +  1,  inPos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  +  1,  inPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	55	None	replace
668	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length  +  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	55	None	replace
669	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length  +  2);	  System.arraycopy(b,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	58	None	replace
670	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length,  inAvail);	  System.arraycopy(b,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	58	None	replace
671	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	140	None	replace
672	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	140	None	replace
673	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	140	None	replace
674	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  2);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	140	None	replace
675	[BUG]  [BUGGY]  resizeSize(pos  +  1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeSize(pos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize(pos  +  1);	  resizeSize(pos);    	non-compiled	[CE]  ';'  expected	86	None	replace
676	[BUG]  [BUGGY]  resizeSize(buffer,  pos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeSize(buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize(buffer,  pos);	  resizeSize(pos);    	non-compiled	[CE]  ';'  expected	86	None	replace
677	[BUG]  [BUGGY]  resizeSize(pos,  inAvail);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeSize(pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize(pos,  inAvail);	  resizeSize(pos);    	non-compiled	[CE]  ';'  expected	86	None	replace
678	[BUG]  [BUGGY]  resizeSize(pos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeSize(pos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize(pos  +  1,  inAvail);	  resizeSize(pos);    	non-compiled	[CE]  ';'  expected	86	None	replace
679	[BUG]  [BUGGY]  resizeBuffer(pos  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBuffer(pos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBuffer(pos  +  1);	  resizeBuffer(pos);    	non-compiled	[CE]  ';'  expected	80	None	replace
680	[BUG]  [BUGGY]  resizeBuffer(buffer,  pos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBuffer(buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBuffer(buffer,  pos);	  resizeBuffer(pos);    	non-compiled	[CE]  ';'  expected	80	None	replace
681	[BUG]  [BUGGY]  resizeBuffer(pos,  buffer.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBuffer(pos,  buffer.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBuffer(pos,  buffer.length);	  resizeBuffer(pos);    	non-compiled	[CE]  ';'  expected	80	None	replace
682	[BUG]  [BUGGY]  resizeBuffer(buffer);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBuffer(buffer);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBuffer(buffer);	  resizeBuffer(pos);    	non-compiled	[CE]  ';'  expected	80	None	replace
683	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i!=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i!=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i!=  inAvail;  i++)  {	  for(int    i    =    2;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
684	[BUG]  [BUGGY]  for(int  i  =  3;  i!=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  3;  i!=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  3;  i!=  inAvail;  i++)  {	  for(int    i    =    2;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
685	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail;  i!=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail;  i!=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail;  i!=  inAvail;  i++)  {	  for(int    i    =    2;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
686	[BUG]  [BUGGY]  for(int  i  =  0;  i  >>  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  >>  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  >>  inAvail;  i++)  {	  for(int    i    =    2;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
687	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  outAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  outAvail);	  System.arraycopy(in,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	31	None	replace
688	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	31	None	replace
689	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	31	None	replace
690	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	63	None	replace
691	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  outPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  outPos);	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	63	None	replace
692	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  outPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator,  outPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    outPos);    	non-compiled	[CE]  ';'  expected	149	None	replace
693	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    outPos);    	non-compiled	[CE]  ';'  expected	149	None	replace
694	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail  =  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail  =  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail  =  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
695	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  inAvail  +  1;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  inAvail  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  <  inAvail  +  1;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
696	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.length;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  in.length;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  in.length;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
697	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos  +  1;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos  +  1;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos  +  1;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
698	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  inAvail);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
699	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  1);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
700	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  1,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
701	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inPos,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  inPos,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
702	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  inPos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  inPos);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
703	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos  +  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos  +  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos  +  inAvail);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
704	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  2);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  2);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
705	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  3);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  3);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
706	[BUG]  [BUGGY]  if(inPos  ==  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
707	[BUG]  [BUGGY]  if(inPos!=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos!=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos!=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
708	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  1;  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
709	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1,  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
710	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  encodeSize);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
711	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  outPos  +  1,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
712	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  lineSeparator.length);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
713	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos  +  1;  i  <  outPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos  +  1;  i  <  outPos  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos  +  1;  i  <  outPos  +  1;  i++)  {	  for(int    i    =    0;    i    <    outPos    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
714	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  outPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  outPos  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  outPos  +  1;  i++)  {	  for(int    i    =    0;    i    <    outPos    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
715	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  outPos  +  2;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  outPos  +  2;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  outPos  +  2;  i++)  {	  for(int    i    =    0;    i    <    outPos    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
716	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;	  System.arraycopy(inPos,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	48	None	replace
717	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  System.arraycopy(inPos,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	48	None	replace
718	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  System.arraycopy(inPos,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	48	None	replace
719	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  }	  System.arraycopy(inPos,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	48	None	replace
720	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  System.arraycopy(inPos,  0,  buffer,  pos,  in  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  System.arraycopy(inPos,  0,  buffer,  pos,  in  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  System.arraycopy(inPos,  0,  buffer,  pos,  in	  System.arraycopy(inPos,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	48	None	replace
721	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inAvail  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inAvail  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inAvail);    	non-compiled	[CE]  ';'  expected	74	None	replace
722	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inAvail,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inAvail);    	non-compiled	[CE]  ';'  expected	74	None	replace
723	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  outAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  outAvail);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inAvail);    	non-compiled	[CE]  ';'  expected	74	None	replace
724	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inAvail);    	non-compiled	[CE]  ';'  expected	74	None	replace
725	[BUG]  [BUGGY]  for(int  i  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inAvail;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inAvail;  i  <  len;  i++)  {	  for(int    i    =    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	91	None	replace
726	[BUG]  [BUGGY]  System.arraycopy(fileSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(fileSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(fileSeparator,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    fileSeparator.length);    	non-compiled	[CE]  ';'  expected	199	None	replace
727	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  fileSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  fileSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  fileSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    fileSeparator.length);    	non-compiled	[CE]  ';'  expected	199	None	replace
728	[BUG]  [BUGGY]  System.arraycopy(fileSeparator,  0,  buffer,  pos,  fileSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(fileSeparator,  0,  buffer,  pos,  fileSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(fileSeparator,  0,  buffer,  pos,  fileSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    fileSeparator.length);    	non-compiled	[CE]  ';'  expected	199	None	replace
729	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  fileSeparator,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  fileSeparator,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  fileSeparator,  pos,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    fileSeparator.length);    	non-compiled	[CE]  ';'  expected	199	None	replace
730	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	163	None	replace
731	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	163	None	replace
732	[BUG]  [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	163	None	replace
733	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	163	None	replace
734	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	163	None	replace
735	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	163	None	replace
736	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length;	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    +    2);    	non-compiled	[CE]  ';'  expected	21	None	replace
737	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  2);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    +    2);    	non-compiled	[CE]  ';'  expected	21	None	replace
738	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  *  2);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  *  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  *  2);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	136	None	replace
739	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  2);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	136	None	replace
740	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos  +  2);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos  +  2);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	136	None	replace
741	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  3);  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  3);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	136	None	replace
742	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length  -  2);	  System.arraycopy(buffer,    0,    buffer,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	3	None	replace
743	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail;  i  >=  inPos;  i++)  {	  for(int    i    =    inPos;    i    >=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	94	None	replace
744	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize,  pos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  encodeSize,  pos);	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    	non-compiled	[CE]  ';'  expected	46	None	replace
745	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  encodeSize);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  encodeSize);	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    	non-compiled	[CE]  ';'  expected	46	None	replace
746	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  encodeSize);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  encodeSize);	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    	non-compiled	[CE]  ';'  expected	46	None	replace
747	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  pos);	  System.arraycopy(inPos,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	87	None	replace
748	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inPos);	  System.arraycopy(inPos,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	87	None	replace
749	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);	  System.arraycopy(inPos,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	87	None	replace
750	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  outAvail);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  outAvail);	  System.arraycopy(inPos,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	87	None	replace
751	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
752	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
753	[BUG]  [BUGGY]  if(inPos  ==  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
754	[BUG]  [BUGGY]  if(inPos!=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos!=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos!=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
755	[BUG]  [BUGGY]  if(inPos  >>  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >>  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >>  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
756	[BUG]  [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
757	[BUG]  [BUGGY]  if(inAvail  <  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
758	[BUG]  [BUGGY]  if(inAvail  >=  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >=  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >=  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
759	[BUG]  [BUGGY]  if(inAvail  ==  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  ==  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  ==  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
760	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
761	[BUG]  [BUGGY]  if(inAvail!=  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail!=  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail!=  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
762	[BUG]  [BUGGY]  if(inAvail  <  =  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  =  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  =  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
763	[BUG]  [BUGGY]  resize(inAvail,  inPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inAvail,  inPos);	  resize(inAvail);    	non-compiled	[CE]  ';'  expected	168	None	replace
764	[BUG]  [BUGGY]  resize(inPos  +  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos  +  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos  +  inAvail);	  resize(inAvail);    	non-compiled	[CE]  ';'  expected	168	None	replace
765	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inPos);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	145	None	replace
766	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator,  inPos);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator,  inPos);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	145	None	replace
767	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength,  inPos);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength,  inPos);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	145	None	replace
768	[BUG]  [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  }  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  }	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	145	None	replace
769	[BUG]  [BUGGY]  b  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  b  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	b  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	145	None	replace
770	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSize,  inPos);  [CE]  ';'  expected  [FE]                                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSize,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSize,  inPos);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	145	None	replace
771	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  b);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  b);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  b);	  System.arraycopy(inavail,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	179	None	replace
772	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize  +  1);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
773	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  fileLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  fileLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  fileLength);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
774	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  outPos);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
775	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize,  out);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize,  out);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize,  out);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
776	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length  -  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	200	None	replace
777	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  sourcePos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  sourcePos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length,  sourcePos);	  System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
778	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail-1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail-1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail-1);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
779	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  pos-1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  pos-1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  pos-1);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
780	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos,  encodeSize);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
781	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize-1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize-1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize-1);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
782	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  outPos  *  1;  i++)  {  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  outPos  *  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  outPos  *  1;  i++)  {	  for(int    i    =    0;    i    <    inAvail    *    1;    i++)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
783	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail,  encodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail,  encodeSize);	  System.arraycopy(inAvail,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	105	None	replace
784	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	67	None	replace
785	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1,  encodeSize);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1,  encodeSize);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	106	None	replace
786	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize  +  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	106	None	replace
787	[BUG]  [BUGGY]  System.arraycopy(lineNumber,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineNumber,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineNumber,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(lineLength,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	202	None	replace
788	[BUG]  [BUGGY]  System.arraycopy(lineBuffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineBuffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineBuffer,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(lineLength,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	202	None	replace
789	[BUG]  [BUGGY]  System.arraycopy(lineLength,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineLength,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineLength,  0,  buffer,  pos,  lineSeparator.length  -  1);	  System.arraycopy(lineLength,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	202	None	replace
790	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail  -  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
791	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outPos  -  inPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outPos  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  outPos  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
792	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	174	None	replace
793	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileSeparator,  encodeSize);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileSeparator,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  fileSeparator,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	150	None	replace
794	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
795	[BUG]  [BUGGY]  arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;	  if(inPos    <    inAvail)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
796	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  b);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  b);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  b);	  System.arraycopy(in,    0,    buffer,    inPos,    b);    	non-compiled	[CE]  ';'  expected	156	None	replace
797	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(base64,  0,  buffer,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(base64,  0,  buffer,  pos,  encodeSize);	  System.arraycopy(b,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	39	None	replace
798	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  inPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  max  =  inPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  max  =  inPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
799	[BUG]  [BUGGY]  for(int  i  =  0,  length;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  length;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  length;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
800	[BUG]  [BUGGY]  for(int  i  =  0,  isEnabled;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  isEnabled;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  isEnabled;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
801	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
802	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  decodeSize);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  decodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
803	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeLength);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeLength);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
804	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  encodeSize);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  encodeSize);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  encodeSize);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
805	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  16);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  16);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  16);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
806	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  =  0;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  =  0;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
807	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  +  2);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  +  2);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	158	None	replace
808	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	1	None	replace
809	[BUG]  [BUGGY]  System.arraycopy(lines,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lines,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lines,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(buffer,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
810	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  outPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  outPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    outPos);    	non-compiled	[CE]  ';'  expected	180	None	replace
811	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outPos,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  outPos,  inAvail);	  System.arraycopy(inAvail,    0,    buffer,    pos,    outPos);    	non-compiled	[CE]  ';'  expected	180	None	replace
812	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  readPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  readPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  readPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    outPos);    	non-compiled	[CE]  ';'  expected	180	None	replace
813	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
814	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
815	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
816	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
817	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileSeparator,  inPos);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileSeparator,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  fileSeparator,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	72	None	replace
818	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  encodeSize);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	134	None	replace
819	[BUG]  [BUGGY]  for(int  i  =  inputPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inputPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inputPos;  i  <  inAvail;  i++)  {	  for(int    i    =    outPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	95	None	replace
820	[BUG]  [BUGGY]  for(int  i  =  readPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  readPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  readPos;  i  <  inAvail;  i++)  {	  for(int    i    =    outPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	95	None	replace
821	[BUG]  [BUGGY]  for(int  i  =  0;  i  >>  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  >>  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  >>  inPos;  i++)  {	  for(int    i    =    1;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	125	None	replace
822	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  outPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  outPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
823	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  outAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  outAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    inAvail);    	non-compiled	[CE]  ';'  expected	5	None	replace
824	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  outPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length,  outPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    inAvail);    	non-compiled	[CE]  ';'  expected	5	None	replace
825	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
826	[BUG]  [BUGGY]  System.arraycopy(textBuffer,  0,  lineSeparator,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(textBuffer,  0,  lineSeparator,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(textBuffer,  0,  lineSeparator,  pos,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	183	None	replace
827	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  lineSeparator,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  lineSeparator,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  lineSeparator,  pos,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	183	None	replace
828	[BUG]  [BUGGY]  System.arraycopy(hashCode,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(hashCode,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(hashCode,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	183	None	replace
829	[BUG]  [BUGGY]  System.arraycopy(in,  pos,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  pos,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  pos,  lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	183	None	replace
830	[BUG]  [BUGGY]  for(int  i  =  outPos;  i  <  inAvail  +  1;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  outPos;  i  <  inAvail  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  outPos;  i  <  inAvail  +  1;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	90	None	replace
831	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  outPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i  <  outPos  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  outPos  +  1;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	90	None	replace
832	[BUG]  [BUGGY]  if(inAvail  <  =  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  =  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  =  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    <    inAvail)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	196	None	replace
833	[BUG]  [BUGGY]  if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    <    inAvail)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	196	None	replace
834	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize  +  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize  +  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize  +  inAvail);	  System.arraycopy(codeTable,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	175	None	replace
835	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  pos,  lineLength);	  System.arraycopy(codeTable,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	175	None	replace
836	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos  +  inPos);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos  +  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos  +  inPos);	  System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	12	None	replace
837	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  outAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	122	None	replace
838	[BUG]  [BUGGY]  resizeBuffer(pos  +  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBuffer(pos  +  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBuffer(pos  +  inPos);	  resizeBuffer(pos);    	non-compiled	[CE]  ';'  expected	80	None	replace
839	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  outPos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  outPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length,    inPos);    	non-compiled	[CE]  ';'  expected	57	None	replace
840	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length,    inPos);    	non-compiled	[CE]  ';'  expected	57	None	replace
841	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  lineSeparator.length,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  lineSeparator.length,  inAvail);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length,    inPos);    	non-compiled	[CE]  ';'  expected	57	None	replace
842	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputLength;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inputLength;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputLength;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    input.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	178	None	replace
843	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  2);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    2);    	non-compiled	[CE]  ';'  expected	157	None	replace
844	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  2  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  2  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  2  +  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    2);    	non-compiled	[CE]  ';'  expected	157	None	replace
845	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  outPos);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  outPos);	  System.arraycopy(inPos,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	87	None	replace
846	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  outPos,  inAvail);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  outPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  outPos,  inAvail);	  System.arraycopy(inPos,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	87	None	replace
847	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize,  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inPos);    	non-compiled	[CE]  ';'  expected	75	None	replace
848	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  inAvail;  i  <  outPos;  i++)  {	  for(int    i    =    1;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
849	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  0,  lineSeparator.length  -  1);	  System.arraycopy(buffer,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	22	None	replace
850	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  b,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  b,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  b,  0,  lineSeparator.length);	  System.arraycopy(buffer,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	22	None	replace
851	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	163	None	replace
852	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  3);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  3);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    3);    	non-compiled	[CE]  ';'  expected	187	None	replace
853	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  6);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  6);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  6);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    3);    	non-compiled	[CE]  ';'  expected	187	None	replace
854	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	140	None	replace
855	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	140	None	replace
856	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inPos;  i!=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
857	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inputSize;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inputSize;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inputSize;  i!=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
858	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  readPos;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  readPos;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  readPos;  i!=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
859	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(base64,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(base64,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(b,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	58	None	replace
860	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
861	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
862	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  encodeSize);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  encodeSize);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1,  encodeSize);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
863	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  2);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  2);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos  +  2);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
864	[BUG]  [BUGGY]  resizeSize(inAvail);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeSize(inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize(inAvail);	  resizeSize(pos);    	non-compiled	[CE]  ';'  expected	86	None	replace
865	[BUG]  [BUGGY]  resizeSize(pos  +  inPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeSize(pos  +  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize(pos  +  inPos);	  resizeSize(pos);    	non-compiled	[CE]  ';'  expected	86	None	replace
866	[BUG]  [BUGGY]  resizeSize(buffer);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeSize(buffer);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize(buffer);	  resizeSize(pos);    	non-compiled	[CE]  ';'  expected	86	None	replace
867	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	184	None	replace
868	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputEnd;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inputEnd;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputEnd;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inputSize;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	177	None	replace
869	[BUG]  [BUGGY]  System.arraycopy(fileSeparator,  0,  buffer,  pos,  fileSeparator.length  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(fileSeparator,  0,  buffer,  pos,  fileSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(fileSeparator,  0,  buffer,  pos,  fileSeparator.length  +  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    fileSeparator.length);    	non-compiled	[CE]  ';'  expected	199	None	replace
870	[BUG]  [BUGGY]  System.arraycopy(fileSeparator,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(fileSeparator,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(fileSeparator,  0,  buffer,  pos,  lineSeparator.length  +  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    fileSeparator.length);    	non-compiled	[CE]  ';'  expected	199	None	replace
871	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  outPos;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  outPos;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  outPos;  i  >=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
872	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  readPos;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  readPos;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  readPos;  i  >=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
873	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  inAvail;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  inAvail;  i  >=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
874	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
875	[BUG]  [BUGGY]  if(inPos  ==  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
876	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength,  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength,  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	124	None	replace
877	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  outPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  outPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	124	None	replace
878	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  in,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  in,  pos,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  in,  pos,  lineSeparator.length  -  1);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	109	None	replace
879	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outAvail  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  outAvail  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	71	None	replace
880	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  -  inPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	186	None	replace
881	[BUG]  [BUGGY]  System.arraycopy(inpos,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inpos,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inpos,  0,  buffer,  pos,  inAvail);	  System.arraycopy(inpos,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	205	None	replace
882	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  -  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
883	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength  +  2);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
884	[BUG]  [BUGGY]  resizeFields(pos  +  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeFields(pos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeFields(pos  +  1);	  resizeFields();    	non-compiled	[CE]  ';'  expected	85	None	replace
885	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail);	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
886	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize);	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
887	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outPos  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  outPos  +  1);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
888	[BUG]  [BUGGY]  if(inPos  ==  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
889	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  fileLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  fileLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  fileLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
890	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  encodeSize  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
891	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  endPos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  endPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  endPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
892	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
893	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
894	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail,  outPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail,  outPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
895	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  fileSeparator,  inPos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  fileSeparator,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  fileSeparator,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
896	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outPos,  inAvail);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outPos,  inAvail);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
897	[BUG]  [BUGGY]  resizePos()  +=  inAvail;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizePos()  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos()  +=  inAvail;	  resizePos();    	non-compiled	[CE]  ';'  expected	79	None	replace
898	[BUG]  [BUGGY]  resizePos()  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizePos()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos()  +  1;	  resizePos();    	non-compiled	[CE]  ';'  expected	79	None	replace
899	[BUG]  [BUGGY]  resizePos()  +  inAvail;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizePos()  +  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos()  +  inAvail;	  resizePos();    	non-compiled	[CE]  ';'  expected	79	None	replace
900	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	70	None	replace
901	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length  -  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	56	None	replace
902	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  pos,  lineSeparator.length  -  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	56	None	replace
903	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
904	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
905	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  4);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  4);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
906	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outPos;  i  >=  len;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  outPos;  i  >=  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  outPos;  i  >=  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    len;    i++)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
907	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
908	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
909	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
910	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos  +  1);  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos  +  1);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos  +  1);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
911	[BUG]  [BUGGY]  for(int  i  =  0;  i!=  outAvail;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i!=  outAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i!=  outAvail;  i++)  {	  for(int    i    =    2;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
912	[BUG]  [BUGGY]  System.arraycopy(textBuffer,  0,  buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(textBuffer,  0,  buffer,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(textBuffer,  0,  buffer,  0,  lineSeparator.length);	  System.arraycopy(buffer,    0,    buffer,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	3	None	replace
913	[BUG]  [BUGGY]  for(int  i  =  0,  encodeSize;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  encodeSize;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  encodeSize;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
914	[BUG]  [BUGGY]  for(int  i  =  0,  length;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  length;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  length;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
915	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  inAvail;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  max  =  inAvail;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  max  =  inAvail;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
916	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail  +  2);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail  +  2);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	136	None	replace
917	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  2);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  2);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	136	None	replace
918	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
919	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  lineSeparator.length);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
920	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  outPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  outPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  +  outPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
921	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outPos  +  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  outPos  +  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  outPos  +  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
922	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outAvail  +  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  outAvail  +  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  outAvail  +  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
923	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	129	None	replace
924	[BUG]  [BUGGY]  for(int  i  =  3;  i  <  inAvail  +  1;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  3;  i  <  inAvail  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  3;  i  <  inAvail  +  1;  i++)  {	  for(int    i    =    1;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
925	[BUG]  [BUGGY]  System.arraycopy(outAvail,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(outAvail,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(outAvail,  0,  buffer,  pos,  outAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	155	None	replace
926	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  outAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  b,  pos,  outAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	155	None	replace
927	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  outAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  outAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
928	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
929	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
930	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  outPos,  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  outPos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  outPos,  inAvail);	  System.arraycopy(inAvail,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	44	None	replace
931	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail  -  1);	  System.arraycopy(inAvail,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	44	None	replace
932	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  }	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	161	None	replace
933	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  decodeSize);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  decodeSize);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  decodeSize);  outPos  +=  inAvail;	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	161	None	replace
934	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	18	None	replace
935	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  readPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  readPos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  readPos);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	63	None	replace
936	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  b);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  b);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  b);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	63	None	replace
937	[BUG]  [BUGGY]  for(int  i  =  outPos;  i  >=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  outPos;  i  >=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  outPos;  i  >=  inAvail;  i++)  {	  for(int    i    =    inPos;    i    >=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	94	None	replace
938	[BUG]  [BUGGY]  for(int  i  =  inputPos;  i  >=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inputPos;  i  >=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inputPos;  i  >=  inAvail;  i++)  {	  for(int    i    =    inPos;    i    >=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	94	None	replace
939	[BUG]  [BUGGY]  resizeInAvail();  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeInAvail();  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeInAvail();	  resizeSize();    	non-compiled	[CE]  ';'  expected	82	None	replace
940	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	162	None	replace
941	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  pos;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  pos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  pos;	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	162	None	replace
942	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail.length  -  1;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail.length  -  1;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail.length  -  1;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail.length;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
943	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  len;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  len;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  len;  i  <  outPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
944	[BUG]  [BUGGY]  for(int  i  =  0,  off  =  inPos;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  off  =  inPos;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  off  =  inPos;  i  <  outPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
945	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length  -  2);	  System.arraycopy(lineSeparator,    0,    buffer,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
946	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
947	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
948	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  pos);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
949	[BUG]  [BUGGY]  byte  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	165	None	replace
950	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  outAvail);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	165	None	replace
951	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
952	[BUG]  [BUGGY]  Integer  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  Integer  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	Integer  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
953	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inSize  +  1;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inSize  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inSize  +  1;  i++)  {	  for(int    i    =    0;    i    <    outPos    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
954	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
955	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
956	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  4);  [CE]  ';'  expected  [FE]                                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  4);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
957	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	164	None	replace
958	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  base64);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  base64);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  base64);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
959	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  outPos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  outPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
960	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  sourcePos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  sourcePos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  sourcePos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
961	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  decodeSize);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length,  decodeSize);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
962	[BUG]  [BUGGY]  if(inPos  ==  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
963	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
964	[BUG]  [BUGGY]  System.arraycopy(lineLength,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineLength,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineLength,  0,  buffer,  pos,  lineSeparator.length  +  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	55	None	replace
965	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1,  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
966	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  encodeSize);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
967	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  1,  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize  +  1,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
968	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  outPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  outPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
969	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
970	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  fileLength);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  fileLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  fileLength);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	144	None	replace
971	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
972	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer.length);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer.length);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
973	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  encodeSize);  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  encodeSize);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
974	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  inAvail,  pos,  lineLength);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  inAvail,  pos,  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  inAvail,  pos,  lineLength);	  System.arraycopy(in,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	204	None	replace
975	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  0;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1;  i  <  0;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  0;  i++)  {	  for(int    i    =    inPos;    i    <    0;    i++)    {    	non-compiled	[CE]  ';'  expected	159	None	replace
976	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outAvail);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	160	None	replace
977	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	53	None	replace
978	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  lineSeparator);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	15	None	replace
979	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  encodeSize);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  encodeSize);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
980	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  4);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  4);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
981	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outAvail;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  outAvail;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  outAvail;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
982	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  outPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  outPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
983	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos);	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
984	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail,  encodeSize);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail,  encodeSize);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail,  encodeSize);  outPos  +=  inAvail;	  System.arraycopy(inPos,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	48	None	replace
985	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  inPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  inPos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  inPos;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
986	[BUG]  [BUGGY]  for(int  i  =  outPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  outPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  outPos;  i  <  inPos;  i++)  {	  for(int    i    =    inPos;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
987	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
988	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
989	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
990	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  +  16;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inPos  +  16;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  +  16;  i++)  {	  for(int    i    =    0;    i    <    inPos    +    2;    i++)    {    	non-compiled	[CE]  ';'  expected	153	None	replace
991	[BUG]  [BUGGY]  For(int  i  =  0;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  0;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0;  i  >=  inPos;  i++)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
992	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inputPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  0;  i  <  inputPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0;  i  <  inputPos;  i++)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
993	[BUG]  [BUGGY]  if(inPos  ==  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	185	None	replace
994	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	185	None	replace
995	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  outPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  outPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  outPos);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	185	None	replace
996	[BUG]  [BUGGY]  resize(inPos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos  +  1,  inAvail);	  resize(inPos);    	non-compiled	[CE]  ';'  expected	84	None	replace
997	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  endPos,  outPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  endPos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  endPos,  outPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    outPos);    	non-compiled	[CE]  ';'  expected	149	None	replace
998	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
999	[BUG]  [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1000	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1001	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  return;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1002	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  0;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  0;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  0;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
1003	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  readPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  readPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  readPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
1004	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inputSize;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inputSize;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inputSize;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
1005	[BUG]  [BUGGY]  for(int  i  =  outPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  outPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  outPos;  i  <  len;  i++)  {	  for(int    i    =    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	91	None	replace
1006	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  encodeSize);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  encodeSize);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
1007	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
1008	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  outAvail,  buffer,  pos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  outAvail,  buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  outAvail,  buffer,  pos);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
1009	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos  +  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos  +  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos  +  inAvail);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
1010	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inPos,  encodeSize);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inPos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  inPos,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
1011	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  lineSeparator.length);	  System.arraycopy(in,    0,    buffer,    pos    +    inPos);    	non-compiled	[CE]  ';'  expected	33	None	replace
1012	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  fileLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  fileLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  fileLength);	  System.arraycopy(chunks,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	38	None	replace
1013	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  outAvail);	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	37	None	replace
1014	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  fileLength);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  fileLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  fileLength);	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	37	None	replace
1015	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
1016	[BUG]  [BUGGY]  resize(lineSeparator);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(lineSeparator);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(lineSeparator);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
1017	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos);	  resize(pos);    	non-compiled	[CE]  ';'  expected	81	None	replace
1018	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  >=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  >=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  >=  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	126	None	replace
1019	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  inPos;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  inPos;  i  >=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  inPos;  i  >=  inPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	126	None	replace
1020	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize,  outPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize,  outPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	35	None	replace
1021	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  outAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  outAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	123	None	replace
1022	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  outPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  outPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	123	None	replace
1023	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  fileSeparator.length);	  System.arraycopy(in,    0,    buffer,    pos,    fileLength);    	non-compiled	[CE]  ';'  expected	182	None	replace
1024	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
1025	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  outPos,  encodeSize);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  outPos,  encodeSize);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  outPos,  encodeSize);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
1026	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  -=  inPos;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  -=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  encodeSize);  outPos  -=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
1027	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
1028	[BUG]  [BUGGY]  resize(inAvail  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inAvail  +  1);	  resize(inAvail);    	non-compiled	[CE]  ';'  expected	168	None	replace
1029	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos);	  resize(inAvail);    	non-compiled	[CE]  ';'  expected	168	None	replace
1030	[BUG]  [BUGGY]  System.arraycopy(codeBuffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(codeBuffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeBuffer,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(buffer,    0,    b,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	169	None	replace
1031	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos    +    1);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	69	None	replace
1032	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  4);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  4);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  4);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	188	None	replace
1033	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1034	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
1035	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  outAvail,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  outAvail,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  outAvail,  buffer,  pos,  inAvail);	  byte[]    outAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	166	None	replace
1036	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  inPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos  =  inPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos  =  inPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
1037	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize  +  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize  +  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize  +  inAvail);	  System.arraycopy(frameBuffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	197	None	replace
1038	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  >=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  >=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i  >=  inAvail;  i++)  {	  for(int    i    =    1;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
1039	[BUG]  [BUGGY]  for(int  i  =  inPos;  i!=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  inPos;  i!=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i!=  inAvail;  i++)  {	  for(int    i    =    1;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
1040	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
1041	[BUG]  [BUGGY]  For(int  i  =  0;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  0;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0;  i!=  inPos;  i++)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
1042	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inPos;  ++i)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  For(int  i  =  0;  i  <  inPos;  ++i)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0;  i  <  inPos;  ++i)  {	  For(int    i    =    0;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	206	None	replace
1043	[BUG]  [BUGGY]  for(int  i  =  2;  i  >=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  2;  i  >=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2;  i  >=  inAvail;  i++)  {	  for(int    i    =    inPos;    i    >=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	94	None	replace
1044	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  decodeSize;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  decodeSize;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  <  decodeSize;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
1045	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inBos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inBos;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inBos;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    len    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
1046	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  outPos);  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  outPos);	  byte[]    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	135	None	replace
1047	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	134	None	replace
1048	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	134	None	replace
1049	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  inPos,  b);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  inPos,  b);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  inPos,  b);	  System.arraycopy(in,    0,    buffer,    inPos,    b);    	non-compiled	[CE]  ';'  expected	156	None	replace
1050	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
1051	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
1052	[BUG]  [BUGGY]  if(inAvail  >=  inPos)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [CE]  ';'  expected  [FE]                                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >=  inPos)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >=  inPos)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
1053	[BUG]  [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  else  {  return;  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  inPos);  }  else  {  return;  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
1054	[BUG]  [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  outPos);  }  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  outPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  outPos);  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    pos);    	non-compiled	[CE]  ';'  expected	133	None	replace
1055	[BUG]  [BUGGY]  System.arraycopy(line,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(line,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(line,  0,  buffer,  pos,  lineSeparator.length  -  1);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	109	None	replace
1056	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos  +  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos  +  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos  +  inPos);	  System.arraycopy(inAvail,    0,    buffer,    pos,    outPos);    	non-compiled	[CE]  ';'  expected	180	None	replace
1057	[BUG]  [BUGGY]  System.arraycopy(buffer,  pos,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  pos,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  pos,  lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(buffer,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	22	None	replace
1058	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  >=  len;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  >=  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inPos;  i  >=  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	126	None	replace
1059	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  len);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  len);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  len);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	160	None	replace
1060	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineLength,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inPos);    	non-compiled	[CE]  ';'  expected	75	None	replace
1061	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  1,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  1,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    encodeSize,    inPos);    	non-compiled	[CE]  ';'  expected	75	None	replace
1062	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail  =  encodeSize;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail  =  encodeSize;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail  =  encodeSize;  i  <  inAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
1063	[BUG]  [BUGGY]  for(int  i  =  0,  len;  i  <  outAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len;  i  <  outAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len;  i  <  outAvail;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	181	None	replace
1064	[BUG]  [BUGGY]  if(inPos  ==  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
1065	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos  +  1);  return;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos  +  1);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos  +  1);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
1066	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos  +  inPos);  return;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos  +  inPos);  return;  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos  +  inPos);  return;  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    return;    }    	non-compiled	[CE]  ';'  expected	192	None	replace
1067	[BUG]  [BUGGY]  if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  }	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	201	None	replace
1068	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1  +  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1  +  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1  +  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	2	None	replace
1069	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inPos,  outPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inPos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  inPos,  outPos);	  System.arraycopy(in,    0,    buffer,    pos,    outPos);    	non-compiled	[CE]  ';'  expected	30	None	replace
1070	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail;  i  >=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inAvail;  i  >=  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail;  i  >=  inAvail;  i++)  {	  for(int    i    =    2;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
1071	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inAvail,  outPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inAvail,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inAvail,  outPos);	  System.arraycopy(inAvail,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	44	None	replace
1072	[BUG]  [BUGGY]  for(int  i  =  0,  outPos;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  outPos;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  outPos;  i  <  outPos;  i++)  {	  for(int    i    =    inPos;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
1073	[BUG]  [BUGGY]  resizeBounds(inPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBounds(inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBounds(inPos);	  resize(inAvail);    	non-compiled	[CE]  ';'  expected	168	None	replace
1074	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  encodeSize);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineLength,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	150	None	replace
1075	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  encodeSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	150	None	replace
1076	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  }	  inAvail    =    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	141	None	replace
1077	[BUG]  [BUGGY]  if(lineSeparator!=  null)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(lineSeparator!=  null)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(lineSeparator!=  null)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	140	None	replace
1078	[BUG]  [BUGGY]  if(lineSeparator.length  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(lineSeparator.length  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(lineSeparator.length  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	140	None	replace
1079	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	129	None	replace
1080	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	129	None	replace
1081	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  3);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  *  3);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    3);    	non-compiled	[CE]  ';'  expected	187	None	replace
1082	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  outPos  -  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  outPos  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  outPos  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
1083	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  len  -  inPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  len  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  len  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
1084	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos  -  inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  pos  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  pos  -  inPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    -    inPos);    	non-compiled	[CE]  ';'  expected	195	None	replace
1085	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  -  1);	  System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	56	None	replace
1086	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	63	None	replace
1087	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  outPos  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  outPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  outPos  +  1);	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	63	None	replace
1088	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  1  +  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  1  +  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  1  +  inAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	20	None	replace
1089	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  1,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  1,  inAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	20	None	replace
1090	[BUG]  [BUGGY]  Arrays.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  Arrays.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	Arrays.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;	  if(inPos    >=    inAvail)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
1091	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }	  if(inPos    >=    inAvail)    {    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
1092	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  inPos,  pos,  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  inPos,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  inPos,  pos,  inAvail);	  System.arraycopy(in,    0,    buffer,    inPos,    pos);    	non-compiled	[CE]  ';'  expected	40	None	replace
1093	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  +  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	18	None	replace
1094	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    outAvail);    	non-compiled	[CE]  ';'  expected	165	None	replace
1095	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
1096	[BUG]  [BUGGY]  if(inAvail!=  inPos)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail!=  inPos)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail!=  inPos)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	164	None	replace
1097	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }	  if(inPos    <    inAvail)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
1098	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  }	  if(inPos    <    inAvail)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
1099	[BUG]  [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  Arrays.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	Arrays.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;	  if(inPos    <    inAvail)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
1100	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	174	None	replace
1101	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileLength);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileLength);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	174	None	replace
1102	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  fileSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  fileSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  fileSeparator.length);	  System.arraycopy(buffer,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
1103	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);	  byte[]    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	146	None	replace
1104	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  }	  if(inAvail    <    inAvail)    {    inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	196	None	replace
1105	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  inPos;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  1,  len  =  inPos;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1,  len  =  inPos;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
1106	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  +  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  +  lineLength);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail  +  lineLength);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	123	None	replace
1107	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  inPos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  inPos,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  inPos,  inAvail  +  1);	  System.arraycopy(chunks,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	194	None	replace
1108	[BUG]  [BUGGY]  System.arraycopy(line,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(line,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(line,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(buffer,    0,    lineSeparator,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
1109	[BUG]  [BUGGY]  System.arraycopy(textBuffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(textBuffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(textBuffer,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(buffer,    0,    lineSeparator,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
1110	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize  +  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize  +  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize  +  inAvail);	  System.arraycopy(inPos,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	37	None	replace
1111	[BUG]  [BUGGY]  for(int  i  =  decodeSize;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  decodeSize;  i  <  inAvail;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  decodeSize;  i  <  inAvail;  i++)  {	  for(int    i    =    outPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	95	None	replace
1112	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  outAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  outAvail);	  System.arraycopy(chunks,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	38	None	replace
1113	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	1	None	replace
1114	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
1115	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  outPos  -=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  outPos  -=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
1116	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  outPos);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail,  outPos);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    -=    inAvail;    	non-compiled	[CE]  ';'  expected	191	None	replace
1117	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);	  inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	144	None	replace
1118	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	70	None	replace
1119	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  inPos,  encodeSize);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunks,  0,  buffer,  inPos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  inPos,  encodeSize);	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    	non-compiled	[CE]  ';'  expected	46	None	replace
1120	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  inPos,  encodeSize);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  inPos,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  inPos,  encodeSize);	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    	non-compiled	[CE]  ';'  expected	46	None	replace
1121	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  inPos,  lineSeparator.length  -  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	200	None	replace
1122	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length  -  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	200	None	replace
1123	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  }  [CE]  ';'  expected  [FE]                                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	136	None	replace
1124	[BUG]  [BUGGY]  if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  }  [CE]  ';'  expected  [FE]                                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  ';'  expected	136	None	replace
1125	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos-1,  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos-1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos-1,  inAvail);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
1126	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos-1);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos-1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos-1);	  System.arraycopy(in,    0,    buffer,    inPos,    pos-1);    	non-compiled	[CE]  ';'  expected	47	None	replace
1127	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }	  System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	67	None	replace
1128	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
1129	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
1130	[BUG]  [BUGGY]  if(inPos  ==  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  ==  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  ==  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
1131	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos  +  inPos);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos  +  inPos);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos  +  inPos);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
1132	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos-1);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos-1);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos-1);  }	  if(inPos    >=    inPos)    {    System.arraycopy(inPos,    0,    buffer,    pos,    inPos);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
1133	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  currentLinePos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  currentLinePos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  currentLinePos);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    inPos,    encodeSize);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	162	None	replace
1134	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos  +  1);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos  +  1);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	89	None	replace
1135	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos  +  1,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos  +  1,  inAvail  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos  +  1,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	89	None	replace
1136	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  *  inAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  *  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  *  inAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
1137	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  *  2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  *  2);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length  *  2);	  System.arraycopy(lineSeparator,    0,    buffer,    pos    +    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	24	None	replace
1138	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
1139	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  inPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  inPos);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	131	None	replace
1140	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  inPos++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  inPos++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inPos;  i  <  inPos++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
1141	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  inPos;  i  <  outPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inPos;  i  <  outPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
1142	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  decodeSize;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  decodeSize;  i  <  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  decodeSize;  i  <  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
1143	[BUG]  [BUGGY]  resizeLength(pos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeLength(pos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeLength(pos);	  resizeSize(pos);    	non-compiled	[CE]  ';'  expected	86	None	replace
1144	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  1);	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
1145	[BUG]  [BUGGY]  if(inAvail!=  inPos)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail!=  inPos)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail!=  inPos)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inAvail    >    0)    {    inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	170	None	replace
1146	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  outPos);	  System.arraycopy(chunkSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	173	None	replace
1147	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  endPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  endPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  endPos);	  System.arraycopy(chunkSeparator,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	173	None	replace
1148	[BUG]  [BUGGY]  resize(inPos-1);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos-1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos-1);	  resize(inPos);    	non-compiled	[CE]  ';'  expected	84	None	replace
1149	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(buffer,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
1150	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(buffer,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
1151	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  System.arraycopy(lineSeparator,  0,  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  System.arraycopy(lineSeparator,  0,  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  System.arraycopy(lineSeparator,  0,	  System.arraycopy(buffer,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
1152	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length);	  System.arraycopy(buffer,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
1153	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  inAvail  +=  inAvail;  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  inAvail  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  inAvail  +=  inAvail;	  System.arraycopy(buffer,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
1154	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  else  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  outPos  +=  inAvail;	  System.arraycopy(buffer,    0,    in,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	110	None	replace
1155	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  outPos);  outPos  +=  inAvail;  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
1156	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  1;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  1;  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
1157	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  2;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  2;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  2;  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
1158	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
1159	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
1160	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  outPos  -=  inPos;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  outPos  -=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  outPos  -=  inPos;	  System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	189	None	replace
1161	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  2;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  2;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  2;  }	  if(inPos    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    	non-compiled	[CE]  ';'  expected	185	None	replace
1162	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  decodeSize;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  inPos  =  decodeSize;  i!=  inPos;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  decodeSize;  i!=  inPos;  i++)  {	  for(int    i    =    0,    inPos    =    inAvail;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
1163	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  outPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineLength,  outPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    outPos);    	non-compiled	[CE]  ';'  expected	149	None	replace
1164	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileLength  -  inPos);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileLength  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  fileLength  -  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    fileLength);    	non-compiled	[CE]  ';'  expected	182	None	replace
1165	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileLength  -  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileLength  -  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  fileLength  -  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    fileLength);    	non-compiled	[CE]  ';'  expected	182	None	replace
1166	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileSeparator.length,  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileSeparator.length,  encodeSize);	  System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	184	None	replace
1167	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
1168	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
1169	[BUG]  [BUGGY]  Integer  inAvail  =  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  Integer  inAvail  =  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	Integer  inAvail  =  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
1170	[BUG]  [BUGGY]  if(inAvail  ==  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  ==  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  ==  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
1171	[BUG]  [BUGGY]  if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  }	  inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	130	None	replace
1172	[BUG]  [BUGGY]  resizeBounds(pos,  inPos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBounds(pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBounds(pos,  inPos);	  resizeBounds();    	non-compiled	[CE]  ';'  expected	207	None	replace
1173	[BUG]  [BUGGY]  resizeBounds(pos,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeBounds(pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBounds(pos,  inAvail);	  resizeBounds();    	non-compiled	[CE]  ';'  expected	207	None	replace
1174	[BUG]  [BUGGY]  resizeAvail();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizeAvail();  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeAvail();	  resizeBounds();    	non-compiled	[CE]  ';'  expected	207	None	replace
1175	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  outPos  +=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  outPos  +=  inPos;	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	190	None	replace
1176	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  }	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	190	None	replace
1177	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inPos;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inPos;	  System.arraycopy(in,    0,    buffer,    pos,    inPos);    outPos    +=    inPos;    	non-compiled	[CE]  ';'  expected	190	None	replace
1178	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outPos);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
1179	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
1180	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  3);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  3);	  bAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	132	None	replace
1181	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
1182	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
1183	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize);	  byte[]    outAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	172	None	replace
1184	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  len,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  len,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  len,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	31	None	replace
1185	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileSeparator.length  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileSeparator.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileSeparator.length  -  1);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    fileSeparator.length);    	non-compiled	[CE]  ';'  expected	199	None	replace
1186	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
1187	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
1188	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
1189	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
1190	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  1;  }  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  1;  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  1;  }	  if(inPos    >    0)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    }    else    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
1191	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  inPos,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  inPos,  lineSeparator.length  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  inPos,  lineSeparator.length  -  inPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	186	None	replace
1192	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  inPos);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  inPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length    -    inPos);    	non-compiled	[CE]  ';'  expected	186	None	replace
1193	[BUG]  [BUGGY]  System.arraycopy(lineBounds,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineBounds,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineBounds,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(lineLength,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	202	None	replace
1194	[BUG]  [BUGGY]  System.arraycopy(linePos,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(linePos,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(linePos,  0,  buffer,  pos,  lineSeparator.length);	  System.arraycopy(lineLength,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	202	None	replace
1195	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos  +  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inPos  +  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos  +  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
1196	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputPos  +  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inputPos  +  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputPos  +  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
1197	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inpos  +  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0,  len  =  inpos  +  inPos;  i  <  len;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inpos  +  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail    +    inPos;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
1198	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  len,  inPos);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  len,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  len,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	72	None	replace
1199	[BUG]  [BUGGY]  resize(inPos,  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resize(inPos,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos,  inPos);	  resizeBytes();    	non-compiled	[CE]  ';'  expected	208	None	replace
1200	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  decodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  decodeSize);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	36	None	replace
1201	[BUG]  [BUGGY]  resizePos++;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizePos++;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos++;	  resizePos();    	non-compiled	[CE]  ';'  expected	79	None	replace
1202	[BUG]  [BUGGY]  resizePos  =  inPos;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizePos  =  inPos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos  =  inPos;	  resizePos();    	non-compiled	[CE]  ';'  expected	79	None	replace
1203	[BUG]  [BUGGY]  resizePos(inPos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizePos(inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos(inPos);	  resizePos();    	non-compiled	[CE]  ';'  expected	79	None	replace
1204	[BUG]  [BUGGY]  resizePos  =  pos;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  resizePos  =  pos;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos  =  pos;	  resizePos();    	non-compiled	[CE]  ';'  expected	79	None	replace
1205	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  outPos);  }  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  outPos);  }  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  inAvail,  outPos);  }	  inAvail    =    System.arraycopy(buffer,    0,    inAvail,    buffer,    pos);    	non-compiled	[CE]  ';'  expected	167	None	replace
1206	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  -  inPos);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  -  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  -  inPos);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	158	None	replace
1207	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  -  inAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  -  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength  -  inAvail);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	158	None	replace
1208	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  len);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  len);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  len);	  System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	158	None	replace
1209	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
1210	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize);	  bAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	143	None	replace
1211	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength  +  1,  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineLength  +  1,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
1212	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos  +  1,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos  +  1,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
1213	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  1,  inPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  1,  inPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  1,  inPos);	  System.arraycopy(in,    0,    buffer,    pos,    inAvail    +    1,    inPos);    	non-compiled	[CE]  ';'  expected	73	None	replace
1214	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail,  outPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail,  outPos);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail,  outPos);	  System.arraycopy(inPos,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	48	None	replace
1215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inavail  +  1;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  inavail  +  1;  i++)  {  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inavail  +  1;  i++)  {	  for(int    i    =    0;    i    <    outPos    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
1216	[BUG]  [BUGGY]  System.arraycopy(line,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(line,  0,  buffer,  pos,  inAvail);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(line,  0,  buffer,  pos,  inAvail);	  System.arraycopy(in,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	204	None	replace
1217	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  encodeSize);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  encodeSize);  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length,    encodeSize);    	non-compiled	[CE]  ';'  expected	7	None	replace
1218	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
1219	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  }  [BUGGY]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  }	  if(inPos    >=    inPos)    {    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
1220	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inPos);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inPos);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
1221	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  len);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {      [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  len);  outPos  +=  inAvail;  [BUGGY]      for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  len);  outPos  +=  inAvail;	  System.arraycopy(in,    0,    buffer,    pos,    inAvail,    inPos);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	68	None	replace
