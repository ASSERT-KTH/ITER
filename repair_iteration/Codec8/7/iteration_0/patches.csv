bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]  for(int  i  =  0;  i  <  inPos;  i++)  {  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos;  i++)  {	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]  for(int  i  =  1;  i  <  inAvail;  i++)  {  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inAvail;  i++)  {	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  len;  i++)  {  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i  <  len;  i++)  {	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]  for(int  i  =  inPos;  i  <  inAvail;  i++)  {  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  inAvail;  i++)  {	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i!=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]  for(int  i  =  0;  i!=  inAvail;  i++)  {  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i!=  inAvail;  i++)  {	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  1;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  1;  i++)  {  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  +  1;  i++)  {	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
7	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	  	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
8	[BUG]  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(in,  0,  buffer,  pos,  inAvail);		non-compiled	[CE]  ';'  expected	14	None	add
9	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	14	None	add
10	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);		non-compiled	[CE]  ';'  expected	14	None	add
11	[BUG]  [BUGGY]    resizeBuffer();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    resizeBuffer();  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    resizeBuffer();		non-compiled	[CE]  ';'  expected	14	None	add
12	[BUG]  [BUGGY]    System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);		non-compiled	[CE]  ';'  expected	14	None	add
13	[BUG]  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	14	None	add
14	[BUG]  [BUGGY]    System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	14	None	add
15	[BUG]  [BUGGY]    inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);		non-compiled	[CE]  ';'  expected	14	None	add
16	[BUG]  [BUGGY]    inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);		non-compiled	[CE]  ';'  expected	14	None	add
17	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail);		non-compiled	[CE]  ';'  expected	14	None	add
18	[BUG]  [BUGGY]    System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	14	None	add
19	[BUG]  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(in,  0,  buffer,  pos,  encodeSize);		non-compiled	[CE]  ';'  expected	14	None	add
20	[BUG]  [BUGGY]    System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(in,  0,  buffer,  inPos,  inAvail);		non-compiled	[CE]  ';'  expected	14	None	add
21	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  inAvail,  pos,  encodeSize);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(buffer,  0,  inAvail,  pos,  encodeSize);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(buffer,  0,  inAvail,  pos,  encodeSize);		non-compiled	[CE]  ';'  expected	14	None	add
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]  for(int  i  =  0;  i  <  outPos;  i++)  {  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  outPos;  i++)  {	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]  for(int  i  =  0;  i  >=  inPos;  i++)  {  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  >=  inPos;  i++)  {	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
24	[BUG]  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  inPos);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(in,  0,  buffer,  pos,  inPos);		non-compiled	[CE]  ';'  expected	14	None	add
25	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(buffer,  0,  buffer,  pos,  inPos);		non-compiled	[CE]  ';'  expected	14	None	add
26	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;		non-compiled	[CE]  ';'  expected	14	None	add
27	[BUG]  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]    System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	    System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;		non-compiled	[CE]  ';'  expected	14	None	add
28	[BUG]  [BUGGY]  for(int  i  =  0;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  [BUGGY]  for(int  i  =  0;  i!=  inPos;  i++)  {  [BUGGY]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i!=  inPos;  i++)  {	for  (int  i  =  0;  i  <  inAvail;  i++)  {  	non-compiled	[CE]  ';'  expected	13	None	replace
