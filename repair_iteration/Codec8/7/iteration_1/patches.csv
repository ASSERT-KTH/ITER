bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  1;  i!=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  1;  i!=  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i!=  inAvail;  i++)  {	  for(int    i    =    0;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  ==  inPos;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  ==  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  ==  inPos;  i++)  {	  for(int    i    =    0;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  2;  i!=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  2;  i!=  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2;  i!=  inAvail;  i++)  {	  for(int    i    =    0;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  >=  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  >=  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i  >=  len;  i++)  {	  for(int    i    =    0;    i!=    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inPos);	      System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	25	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos);	      System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	25	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);	      System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	25	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  inPos);	      System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	25	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	25	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  outPos);	      System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	25	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  1);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  pos,  lineSeparator.length);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  1);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  +  2);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  0,  lineSeparator.length);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos  +  lineSeparator.length);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  1;  i  <  outPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  outPos;  i++)  {	  for(int    i    =    0;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  outPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i  <  outPos;  i++)  {	  for(int    i    =    0;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  outAvail;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  outAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  outAvail;  i++)  {	  for(int    i    =    0;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  outPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  inPos;  i  <  outPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  outPos;  i++)  {	  for(int    i    =    0;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  >=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  >=  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  >=  inAvail;  i++)  {	  for(int    i    =    0;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  outPos);	      System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	24	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos,  inAvail);	      System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	24	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);	      System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	24	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inPos);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos  +  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos  +  inPos);	      System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	24	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outAvail);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  outAvail);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos  +  1);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  +  1);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos-1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  pos-1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  pos-1);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	26	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	26	None	replace
50	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	26	None	replace
51	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	26	None	replace
52	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	26	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	26	None	replace
54	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  else  {  return;  }	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	26	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  +  1);	      System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	14	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length  -  1);	      System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	14	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  lineSeparator.length,  inPos);	      System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	14	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(b,  0,  buffer,  pos,  lineSeparator.length);	      System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	14	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  1;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  1;  i!=  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i!=  inPos;  i++)  {	  for(int    i    =    0;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  >=  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inAvail;  i  >=  inPos;  i++)  {	  for(int    i    =    0;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i!=  inPos;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i!=  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inAvail;  i!=  inPos;  i++)  {	  for(int    i    =    0;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  ==  inAvail;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  ==  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  ==  inAvail;  i++)  {	  for(int    i    =    0;    i!=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inAvail;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
64	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
65	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
66	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inPos;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  outPos  +=  inAvail;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos  +  1);  outPos  +=  inAvail;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inAvail;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	8	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	8	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1,  inPos);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	8	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inAvail);	      System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	19	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  encodeSize,  inPos);	      System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	19	None	replace
76	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	      	non-compiled	[CE]  ';'  expected	7	None	replace
77	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  }	      	non-compiled	[CE]  ';'  expected	7	None	replace
78	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  }	      	non-compiled	[CE]  ';'  expected	7	None	replace
79	[BUG]  [BUGGY]  resizePos();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resizePos();  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizePos();	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
80	[BUG]  [BUGGY]  resizeBuffer(pos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resizeBuffer(pos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBuffer(pos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
81	[BUG]  [BUGGY]  resize(pos);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resize(pos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(pos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
82	[BUG]  [BUGGY]  resizeSize();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resizeSize();  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize();	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
83	[BUG]  [BUGGY]  resizeBytes(pos);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resizeBytes(pos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes(pos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
84	[BUG]  [BUGGY]  resize(inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resize(inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inPos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
85	[BUG]  [BUGGY]  resizeFields();  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resizeFields();  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeFields();	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
86	[BUG]  [BUGGY]  resizeSize(pos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resizeSize(pos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeSize(pos);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	17	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	17	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail  +  1);	      System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	17	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  1;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  inPos;  i  <  inAvail  +  1;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  inAvail  +  1;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  inPos;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  len;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  <  inAvail;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  inAvail;  i  <  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail;  i  <  inPos;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  >=  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  inPos;  i  >=  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  >=  inAvail;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  outPos;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  outPos;  i  <  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  outPos;  i  <  inAvail;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inPos  +  1;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  +  1;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  2;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  2;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  +  2;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  3;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  3;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  +  3;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  4;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  4;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  +  4;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inAvail  +  1;  i++)  {  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  1;  i  <  inAvail  +  1;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inAvail  +  1;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  8;  i++)  {  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  8;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  +  8;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  *  1;  i++)  {  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inAvail  *  1;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  *  1;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  6;  i++)  {  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inAvail  +  6;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inAvail  +  6;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
104	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail  +  1);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	12	None	replace
105	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  outAvail);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	12	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  inPos  +  1);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	12	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  +  1);	      System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  inAvail);	      System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length  -  1);	      System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  in,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  in,  pos,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  in,  pos,  lineSeparator.length);	      System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inPos;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i  <  inPos;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail  +  inPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail.length;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inAvail.length;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  inAvail;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  1,  len  =  inAvail;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1,  len  =  inAvail;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  decodeSize;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  decodeSize;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  decodeSize;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  outPos;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  outPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  1;  i  <  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  <  inPos;  i++)  {	  for(int    i    =    1;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  2;  i  <  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2;  i  <  inAvail;  i++)  {	  for(int    i    =    1;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  <  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i  <  inAvail;  i++)  {	  for(int    i    =    1;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  3;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  3;  i  <  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  3;  i  <  inAvail;  i++)  {	  for(int    i    =    1;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
122	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	10	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	10	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	10	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  1;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  1;  i  >=  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  1;  i  >=  inPos;  i++)  {	  for(int    i    =    0;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  >=  inPos;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inAvail;  i  >=  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inAvail;  i  >=  inPos;  i++)  {	  for(int    i    =    0;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  inPos  =  inAvail;  i  <  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inPos  =  inAvail;  i  <  inPos;  i++)  {	  for(int    i    =    0;    i    >=    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
128	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
129	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inPos);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
130	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
131	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  inPos);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
132	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
133	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  pos);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
134	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  encodeSize);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
135	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
136	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  2);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  len;  i++)  {	  for(int    i    =    0;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  inPos;  i++)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  2;  i  <  inPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  2;  i  <  inPos;  i++)  {	  for(int    i    =    0;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
139	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
140	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
141	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
142	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inPos);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
143	[BUG]  [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	bAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
144	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
145	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [CE]  ';'  expected  [FE]                                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
146	[BUG]  [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inputPos;  i++)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inputPos;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inputPos;  i++)  {	  for(int    i    =    0;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inavail;  i++)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inavail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inavail;  i++)  {	  for(int    i    =    0;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail,  outPos);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	8	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  encodeSize);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail,  encodeSize);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	8	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  outAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  outAvail);	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	8	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  outPos  +  1;  i++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  outPos  +  1;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  outPos  +  1;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inPos  +  2;  i++)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  inPos  +  2;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  inPos  +  2;  i++)  {	  for(int    i    =    0;    i    <    inAvail    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
154	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	10	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	10	None	replace
156	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  b);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  b);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  b);	      System.arraycopy(in,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	24	None	replace
157	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  2);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  2);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
158	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  inPos;  i  <  0;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  inPos;  i  <  0;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  inPos;  i  <  0;  i++)  {	  for(int    i    =    inPos;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
161	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inPos,  0,  buffer,  pos,  encodeSize);  outPos  +=  inAvail;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  encodeSize);  outPos  +=  inAvail;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inAvail  +  1);  outPos  +=  inAvail;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
164	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >  0)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
165	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  outAvail);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
166	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
167	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  inAvail,  buffer,  pos);	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
168	[BUG]  [BUGGY]  resize(inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resize(inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resize(inAvail);	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  b,  pos,  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
170	[BUG]  [BUGGY]  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inAvail  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  >  0)  {  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  }	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
171	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  outAvail);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
172	[BUG]  [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	byte[]  outAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
173	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
174	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
175	[BUG]  [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(codeTable,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputPos;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inputPos;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputPos;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  inputSize;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  inputSize;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  inputSize;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  input.length;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  input.length;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  input.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
179	[BUG]  [BUGGY]  System.arraycopy(inavail,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inavail,  0,  buffer,  inPos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inavail,  0,  buffer,  inPos,  inAvail);	      System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	17	None	replace
180	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos,  outPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inAvail,  0,  buffer,  pos,  outPos);	      System.arraycopy(inAvail,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	12	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0,  inAvail;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  inAvail;  i  <  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  inAvail;  i  <  inAvail;  i++)  {	  for(int    i    =    1;    i    <    inAvail;    i++)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
182	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileLength);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  fileLength);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  fileLength);	      System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	19	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  in,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  in,  pos,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  in,  pos,  lineSeparator.length);	      System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
184	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);	      System.arraycopy(in,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
185	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  pos,  inAvail);  outPos  +=  inAvail;  }	      System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	26	None	replace
186	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  inPos);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
187	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  3);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  3);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  3);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
188	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  4);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  4);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length  -  4);	      System.arraycopy(lineSeparator,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
189	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  +=  inPos;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  inPos);  outPos  +=  inPos;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  outPos  -=  inAvail;	      System.arraycopy(in,    0,    buffer,    pos,    inAvail);    outPos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
192	[BUG]  [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inPos  >=  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inPos  >=  inPos)  {  System.arraycopy(inPos,  0,  buffer,  pos,  inPos);  return;  }	      	non-compiled	[CE]  ';'  expected	7	None	replace
193	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  outPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  outPos);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  inPos,  inAvail);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(chunks,  0,  buffer,  inPos,  inAvail);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
195	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail  -  inPos);	      System.arraycopy(in,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	20	None	replace
196	[BUG]  [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	if(inAvail  <  inAvail)  {  inAvail  =  System.arraycopy(in,  0,  buffer,  pos,  inAvail);  }	      inAvail    =    System.arraycopy(in,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	15	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  encodeSize);	      System.arraycopy(buffer,    0,    inAvail,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  i++)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0;  i  <  4;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0;  i  <  4;  i++)  {	  for(int    i    =    0;    i    <    inPos;    i++)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
199	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileSeparator.length);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  fileSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
200	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inPos);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	9	None	replace
201	[BUG]  [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	inAvail  =  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);	      inAvail    =    System.arraycopy(buffer,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	16	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(lineLength,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(lineLength,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(lineLength,  0,  buffer,  pos,  lineSeparator.length);	      System.arraycopy(inAvail,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	14	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  encodeSize;  i  <  len;  i++)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  for(int  i  =  0,  len  =  encodeSize;  i  <  len;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	for(int  i  =  0,  len  =  encodeSize;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    inAvail;    i    <    len;    i++)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(in,  0,  buffer,  pos,  lineLength);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(in,  0,  buffer,  pos,  lineLength);	      System.arraycopy(in,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	19	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(inpos,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  System.arraycopy(inpos,  0,  buffer,  pos,  inPos);  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	System.arraycopy(inpos,  0,  buffer,  pos,  inPos);	      System.arraycopy(buffer,    0,    buffer,    pos,    inPos);    	non-compiled	[CE]  ';'  expected	25	None	replace
206	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inAvail;  i++)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  For(int  i  =  0;  i  <  inAvail;  i++)  {  [BUGGY]    if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	For(int  i  =  0;  i  <  inAvail;  i++)  {	  for(int    i    =    0;    i    <    outPos;    i++)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
207	[BUG]  [BUGGY]  resizeBounds();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resizeBounds();  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBounds();	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
208	[BUG]  [BUGGY]  resizeBytes();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    break;  }    byte  b  =  lineSeparator[lineSeparator.length  -  1];  if  (lineLength  >  0  &&  pos  >  0  &&  buffer[pos-1]  !=  b)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {    [BUGGY]  resizeBytes();  [BUGGY]    for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  }  x  =  (x  <<  8)  +  b;  if  (0  ==  modulus)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	484	484	1	replace	resizeBytes();	      resizeBuffer();    	non-compiled	[CE]  ';'  expected	11	None	replace
