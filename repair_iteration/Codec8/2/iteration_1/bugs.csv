bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	4	None	add
2	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	4	None	add
3	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }		non-compiled	[CE]  ';'  expected	4	None	add
4	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }		non-compiled	[CE]  ';'  expected	4	None	add
5	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }		non-compiled	[CE]  ';'  expected	4	None	add
6	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);		non-compiled	[CE]  ';'  expected	4	None	add
7	[BUG]  [BUGGY]    System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.buffer,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	4	None	add
8	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	4	None	add
9	[BUG]  [BUGGY]    System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	4	None	add
10	[BUG]  [BUGGY]    this.urlSafe  =  urlSafe;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    this.urlSafe  =  urlSafe;  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    this.urlSafe  =  urlSafe;		non-compiled	[CE]  ';'  expected	4	None	add
11	[BUG]  [BUGGY]  this.lineSeparator  =  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  this.lineSeparator  =  CHUNK_SEPARATOR;  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  CHUNK_SEPARATOR;	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
12	[BUG]  [BUGGY]  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
13	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
14	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
15	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
16	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
17	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
18	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
19	[BUG]  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	4	None	add
20	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);		non-compiled	[CE]  ';'  expected	4	None	add
21	[BUG]  [BUGGY]    System.arraycopy(this.buffer,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.buffer,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.buffer,  0,  lineSeparator,  0,  urlSafe);		non-compiled	[CE]  ';'  expected	4	None	add
22	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	4	None	add
23	[BUG]  [BUGGY]    System.arraycopy(this.separator,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.separator,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.separator,  0,  lineSeparator,  0,  urlSafe);		non-compiled	[CE]  ';'  expected	4	None	add
24	[BUG]  [BUGGY]    System.arraycopy(this.sep,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.sep,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.sep,  0,  lineSeparator,  0,  urlSafe);		non-compiled	[CE]  ';'  expected	4	None	add
25	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
26	[BUG]  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	if(urlSafe)  {  lineSeparator  =  CHUNK_SEPARATOR;  }  else  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
27	[BUG]  [BUGGY]  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
28	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]  this.lineSeparator  =  urlSafe;  [BUGGY]  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	this.lineSeparator  =  urlSafe;	lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  	non-compiled	[CE]  ';'  expected	3	None	replace
29	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);		non-compiled	[CE]  ';'  expected	4	None	add
30	[BUG]  [BUGGY]    System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.sep,  0,  this.sep,  0,  lineLength);		non-compiled	[CE]  ';'  expected	4	None	add
31	[BUG]  [BUGGY]    System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  [BUGGY]    System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec8/src/java/org/apache/commons/codec/binary/Base64.java	1.0	335	336	1	replace	    System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	4	None	add
